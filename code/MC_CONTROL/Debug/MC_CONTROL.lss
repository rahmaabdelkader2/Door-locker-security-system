
MC_CONTROL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000231a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011c  00800060  0000231a  000023ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  0080017c  0080017c  000024ca  2**0
                  ALLOC
  3 .stab         0000285c  00000000  00000000  000024cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014e4  00000000  00000000  00004d28  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000620c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  0000638c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  0000655f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000856e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  000096de  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000a6e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000a880  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000ab41  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b3ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 d2 0f 	jmp	0x1fa4	; 0x1fa4 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 37       	cpi	r26, 0x7C	; 124
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e7       	ldi	r26, 0x7C	; 124
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3b       	cpi	r26, 0xB2	; 178
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f1 06 	call	0xde2	; 0xde2 <main>
      8a:	0c 94 8b 11 	jmp	0x2316	; 0x2316 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 70 11 	jmp	0x22e0	; 0x22e0 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 60 11 	jmp	0x22c0	; 0x22c0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 80 11 	jmp	0x2300	; 0x2300 <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 5c 11 	jmp	0x22b8	; 0x22b8 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__floatunsisf+0xe0>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__floatunsisf+0xbc>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__floatunsisf+0x7c>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__floatunsisf+0x74>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__floatunsisf+0x9e>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__floatunsisf+0xe0>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__floatunsisf+0xe0>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__floatunsisf+0xcc>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__floatunsisf+0xc4>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	e8 59       	subi	r30, 0x98	; 152
     972:	ff 4f       	sbci	r31, 0xFF	; 255
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <BUZZER_init>:
 */

#include "BUZZER.h"
#include "gpio.h"
void BUZZER_init()
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	63 e0       	ldi	r22, 0x03	; 3
     ce2:	41 e0       	ldi	r20, 0x01	; 1
     ce4:	0e 94 23 0b 	call	0x1646	; 0x1646 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
     ce8:	82 e0       	ldi	r24, 0x02	; 2
     cea:	63 e0       	ldi	r22, 0x03	; 3
     cec:	40 e0       	ldi	r20, 0x00	; 0
     cee:	0e 94 0e 0c 	call	0x181c	; 0x181c <GPIO_writePin>
}
     cf2:	cf 91       	pop	r28
     cf4:	df 91       	pop	r29
     cf6:	08 95       	ret

00000cf8 <BUZZER_on>:
void BUZZER_on()
{
     cf8:	df 93       	push	r29
     cfa:	cf 93       	push	r28
     cfc:	cd b7       	in	r28, 0x3d	; 61
     cfe:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
     d00:	82 e0       	ldi	r24, 0x02	; 2
     d02:	63 e0       	ldi	r22, 0x03	; 3
     d04:	41 e0       	ldi	r20, 0x01	; 1
     d06:	0e 94 0e 0c 	call	0x181c	; 0x181c <GPIO_writePin>
}
     d0a:	cf 91       	pop	r28
     d0c:	df 91       	pop	r29
     d0e:	08 95       	ret

00000d10 <BUZZER_off>:
void BUZZER_off()
{
     d10:	df 93       	push	r29
     d12:	cf 93       	push	r28
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
     d18:	82 e0       	ldi	r24, 0x02	; 2
     d1a:	63 e0       	ldi	r22, 0x03	; 3
     d1c:	40 e0       	ldi	r20, 0x00	; 0
     d1e:	0e 94 0e 0c 	call	0x181c	; 0x181c <GPIO_writePin>
}
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	08 95       	ret

00000d28 <DcMotor_Init>:
#include "DC_motor.h"
#include "gpio.h"


void DcMotor_Init(void)
{
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(Dc_MOTOR_PORT,Dc_MOTOR_PIN0,PIN_OUTPUT);
     d30:	83 e0       	ldi	r24, 0x03	; 3
     d32:	66 e0       	ldi	r22, 0x06	; 6
     d34:	41 e0       	ldi	r20, 0x01	; 1
     d36:	0e 94 23 0b 	call	0x1646	; 0x1646 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Dc_MOTOR_PORT,Dc_MOTOR_PIN1,PIN_OUTPUT);
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	67 e0       	ldi	r22, 0x07	; 7
     d3e:	41 e0       	ldi	r20, 0x01	; 1
     d40:	0e 94 23 0b 	call	0x1646	; 0x1646 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(Dc_MOTOR_PORT,Dc_MOTOR_ENABLE_PIN,PIN_OUTPUT);
     d44:	83 e0       	ldi	r24, 0x03	; 3
     d46:	65 e0       	ldi	r22, 0x05	; 5
     d48:	41 e0       	ldi	r20, 0x01	; 1
     d4a:	0e 94 23 0b 	call	0x1646	; 0x1646 <GPIO_setupPinDirection>
	GPIO_writePin(Dc_MOTOR_PORT,Dc_MOTOR_PIN0,LOGIC_LOW);
     d4e:	83 e0       	ldi	r24, 0x03	; 3
     d50:	66 e0       	ldi	r22, 0x06	; 6
     d52:	40 e0       	ldi	r20, 0x00	; 0
     d54:	0e 94 0e 0c 	call	0x181c	; 0x181c <GPIO_writePin>
	GPIO_writePin(Dc_MOTOR_PORT,Dc_MOTOR_PIN1,LOGIC_LOW);
     d58:	83 e0       	ldi	r24, 0x03	; 3
     d5a:	67 e0       	ldi	r22, 0x07	; 7
     d5c:	40 e0       	ldi	r20, 0x00	; 0
     d5e:	0e 94 0e 0c 	call	0x181c	; 0x181c <GPIO_writePin>
	GPIO_writePin(Dc_MOTOR_PORT,Dc_MOTOR_ENABLE_PIN,LOGIC_LOW);
     d62:	83 e0       	ldi	r24, 0x03	; 3
     d64:	65 e0       	ldi	r22, 0x05	; 5
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	0e 94 0e 0c 	call	0x181c	; 0x181c <GPIO_writePin>
}
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <Rotate_clockwise>:

void Rotate_clockwise(void)
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	cd b7       	in	r28, 0x3d	; 61
     d78:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Dc_MOTOR_PORT,Dc_MOTOR_PIN1,LOGIC_HIGH);
     d7a:	83 e0       	ldi	r24, 0x03	; 3
     d7c:	67 e0       	ldi	r22, 0x07	; 7
     d7e:	41 e0       	ldi	r20, 0x01	; 1
     d80:	0e 94 0e 0c 	call	0x181c	; 0x181c <GPIO_writePin>
	GPIO_writePin(Dc_MOTOR_PORT,Dc_MOTOR_PIN0,LOGIC_LOW);
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	66 e0       	ldi	r22, 0x06	; 6
     d88:	40 e0       	ldi	r20, 0x00	; 0
     d8a:	0e 94 0e 0c 	call	0x181c	; 0x181c <GPIO_writePin>
	GPIO_writePin(Dc_MOTOR_PORT,Dc_MOTOR_ENABLE_PIN,LOGIC_HIGH);
     d8e:	83 e0       	ldi	r24, 0x03	; 3
     d90:	65 e0       	ldi	r22, 0x05	; 5
     d92:	41 e0       	ldi	r20, 0x01	; 1
     d94:	0e 94 0e 0c 	call	0x181c	; 0x181c <GPIO_writePin>
}
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <Rotate_Anticlockwise>:
void Rotate_Anticlockwise(void)
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Dc_MOTOR_PORT,Dc_MOTOR_PIN0,LOGIC_HIGH);
     da6:	83 e0       	ldi	r24, 0x03	; 3
     da8:	66 e0       	ldi	r22, 0x06	; 6
     daa:	41 e0       	ldi	r20, 0x01	; 1
     dac:	0e 94 0e 0c 	call	0x181c	; 0x181c <GPIO_writePin>
	GPIO_writePin(Dc_MOTOR_PORT,Dc_MOTOR_PIN1,LOGIC_LOW);
     db0:	83 e0       	ldi	r24, 0x03	; 3
     db2:	67 e0       	ldi	r22, 0x07	; 7
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	0e 94 0e 0c 	call	0x181c	; 0x181c <GPIO_writePin>
	GPIO_writePin(Dc_MOTOR_PORT,Dc_MOTOR_ENABLE_PIN,LOGIC_HIGH);
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	65 e0       	ldi	r22, 0x05	; 5
     dbe:	41 e0       	ldi	r20, 0x01	; 1
     dc0:	0e 94 0e 0c 	call	0x181c	; 0x181c <GPIO_writePin>
}
     dc4:	cf 91       	pop	r28
     dc6:	df 91       	pop	r29
     dc8:	08 95       	ret

00000dca <MOTOR_STOP>:
void MOTOR_STOP()
{
     dca:	df 93       	push	r29
     dcc:	cf 93       	push	r28
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(Dc_MOTOR_PORT,Dc_MOTOR_ENABLE_PIN,LOGIC_LOW);
     dd2:	83 e0       	ldi	r24, 0x03	; 3
     dd4:	65 e0       	ldi	r22, 0x05	; 5
     dd6:	40 e0       	ldi	r20, 0x00	; 0
     dd8:	0e 94 0e 0c 	call	0x181c	; 0x181c <GPIO_writePin>
}
     ddc:	cf 91       	pop	r28
     dde:	df 91       	pop	r29
     de0:	08 95       	ret

00000de2 <main>:
uint8 choice;
uint8 newPassError=0;
uint8 return_flag=1;

int main(void)
{
     de2:	df 93       	push	r29
     de4:	cf 93       	push	r28
     de6:	cd b7       	in	r28, 0x3d	; 61
     de8:	de b7       	in	r29, 0x3e	; 62
     dea:	66 97       	sbiw	r28, 0x16	; 22
     dec:	0f b6       	in	r0, 0x3f	; 63
     dee:	f8 94       	cli
     df0:	de bf       	out	0x3e, r29	; 62
     df2:	0f be       	out	0x3f, r0	; 63
     df4:	cd bf       	out	0x3d, r28	; 61
	SREG|=1<<7; // global interrupt enable
     df6:	af e5       	ldi	r26, 0x5F	; 95
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	ef e5       	ldi	r30, 0x5F	; 95
     dfc:	f0 e0       	ldi	r31, 0x00	; 0
     dfe:	80 81       	ld	r24, Z
     e00:	80 68       	ori	r24, 0x80	; 128
     e02:	8c 93       	st	X, r24

	DcMotor_Init();
     e04:	0e 94 94 06 	call	0xd28	; 0xd28 <DcMotor_Init>
	TWI_CONFIG config_i2c={0b00000001,400000};
     e08:	ce 01       	movw	r24, r28
     e0a:	01 96       	adiw	r24, 0x01	; 1
     e0c:	9e 87       	std	Y+14, r25	; 0x0e
     e0e:	8d 87       	std	Y+13, r24	; 0x0d
     e10:	e0 e7       	ldi	r30, 0x70	; 112
     e12:	f1 e0       	ldi	r31, 0x01	; 1
     e14:	f8 8b       	std	Y+16, r31	; 0x10
     e16:	ef 87       	std	Y+15, r30	; 0x0f
     e18:	f5 e0       	ldi	r31, 0x05	; 5
     e1a:	f9 8b       	std	Y+17, r31	; 0x11
     e1c:	ef 85       	ldd	r30, Y+15	; 0x0f
     e1e:	f8 89       	ldd	r31, Y+16	; 0x10
     e20:	00 80       	ld	r0, Z
     e22:	8f 85       	ldd	r24, Y+15	; 0x0f
     e24:	98 89       	ldd	r25, Y+16	; 0x10
     e26:	01 96       	adiw	r24, 0x01	; 1
     e28:	98 8b       	std	Y+16, r25	; 0x10
     e2a:	8f 87       	std	Y+15, r24	; 0x0f
     e2c:	ed 85       	ldd	r30, Y+13	; 0x0d
     e2e:	fe 85       	ldd	r31, Y+14	; 0x0e
     e30:	00 82       	st	Z, r0
     e32:	8d 85       	ldd	r24, Y+13	; 0x0d
     e34:	9e 85       	ldd	r25, Y+14	; 0x0e
     e36:	01 96       	adiw	r24, 0x01	; 1
     e38:	9e 87       	std	Y+14, r25	; 0x0e
     e3a:	8d 87       	std	Y+13, r24	; 0x0d
     e3c:	99 89       	ldd	r25, Y+17	; 0x11
     e3e:	91 50       	subi	r25, 0x01	; 1
     e40:	99 8b       	std	Y+17, r25	; 0x11
     e42:	e9 89       	ldd	r30, Y+17	; 0x11
     e44:	ee 23       	and	r30, r30
     e46:	51 f7       	brne	.-44     	; 0xe1c <main+0x3a>
	TWI_init(&config_i2c);
     e48:	ce 01       	movw	r24, r28
     e4a:	01 96       	adiw	r24, 0x01	; 1
     e4c:	0e 94 61 0e 	call	0x1cc2	; 0x1cc2 <TWI_init>

	BUZZER_init();
     e50:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <BUZZER_init>


	Uart_ConfigType config={EIGHT_BIT,DISABLED,ONE_BIT,9600};
     e54:	ce 01       	movw	r24, r28
     e56:	06 96       	adiw	r24, 0x06	; 6
     e58:	9b 8b       	std	Y+19, r25	; 0x13
     e5a:	8a 8b       	std	Y+18, r24	; 0x12
     e5c:	e9 e6       	ldi	r30, 0x69	; 105
     e5e:	f1 e0       	ldi	r31, 0x01	; 1
     e60:	fd 8b       	std	Y+21, r31	; 0x15
     e62:	ec 8b       	std	Y+20, r30	; 0x14
     e64:	f7 e0       	ldi	r31, 0x07	; 7
     e66:	fe 8b       	std	Y+22, r31	; 0x16
     e68:	ec 89       	ldd	r30, Y+20	; 0x14
     e6a:	fd 89       	ldd	r31, Y+21	; 0x15
     e6c:	00 80       	ld	r0, Z
     e6e:	8c 89       	ldd	r24, Y+20	; 0x14
     e70:	9d 89       	ldd	r25, Y+21	; 0x15
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	9d 8b       	std	Y+21, r25	; 0x15
     e76:	8c 8b       	std	Y+20, r24	; 0x14
     e78:	ea 89       	ldd	r30, Y+18	; 0x12
     e7a:	fb 89       	ldd	r31, Y+19	; 0x13
     e7c:	00 82       	st	Z, r0
     e7e:	8a 89       	ldd	r24, Y+18	; 0x12
     e80:	9b 89       	ldd	r25, Y+19	; 0x13
     e82:	01 96       	adiw	r24, 0x01	; 1
     e84:	9b 8b       	std	Y+19, r25	; 0x13
     e86:	8a 8b       	std	Y+18, r24	; 0x12
     e88:	9e 89       	ldd	r25, Y+22	; 0x16
     e8a:	91 50       	subi	r25, 0x01	; 1
     e8c:	9e 8b       	std	Y+22, r25	; 0x16
     e8e:	ee 89       	ldd	r30, Y+22	; 0x16
     e90:	ee 23       	and	r30, r30
     e92:	51 f7       	brne	.-44     	; 0xe68 <main+0x86>
	UART_init(&config);
     e94:	ce 01       	movw	r24, r28
     e96:	06 96       	adiw	r24, 0x06	; 6
     e98:	0e 94 05 10 	call	0x200a	; 0x200a <UART_init>



	NewPassMC2();
     e9c:	0e 94 00 0b 	call	0x1600	; 0x1600 <NewPassMC2>

	while(1)
	{
		if(return_flag==1)
     ea0:	80 91 68 01 	lds	r24, 0x0168
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	e1 f7       	brne	.-8      	; 0xea0 <main+0xbe>
			MC2_mainOptions();
     ea8:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <MC2_mainOptions>
     eac:	f9 cf       	rjmp	.-14     	; 0xea0 <main+0xbe>

00000eae <PWM_Timer0_Init>:




void PWM_Timer0_Init(unsigned char set_duty_cycle)
{
     eae:	df 93       	push	r29
     eb0:	cf 93       	push	r28
     eb2:	0f 92       	push	r0
     eb4:	cd b7       	in	r28, 0x3d	; 61
     eb6:	de b7       	in	r29, 0x3e	; 62
     eb8:	89 83       	std	Y+1, r24	; 0x01

		TCNT0 = 0;
     eba:	e2 e5       	ldi	r30, 0x52	; 82
     ebc:	f0 e0       	ldi	r31, 0x00	; 0
     ebe:	10 82       	st	Z, r1


		OCR0  = set_duty_cycle; // Set Compare Value
     ec0:	ec e5       	ldi	r30, 0x5C	; 92
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	80 83       	st	Z, r24

		GPIO_setupPinDirection(PORTB_ID,PIN3_ID, PIN_OUTPUT);
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	63 e0       	ldi	r22, 0x03	; 3
     ecc:	41 e0       	ldi	r20, 0x01	; 1
     ece:	0e 94 23 0b 	call	0x1646	; 0x1646 <GPIO_setupPinDirection>
		 * 1. Fast PWM mode FOC0=0
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
		 */
		TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
     ed2:	e3 e5       	ldi	r30, 0x53	; 83
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	8a e6       	ldi	r24, 0x6A	; 106
     ed8:	80 83       	st	Z, r24

	}
     eda:	0f 90       	pop	r0
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "i2c.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <EEPROM_writeByte+0x6>
     ee8:	00 d0       	rcall	.+0      	; 0xeea <EEPROM_writeByte+0x8>
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	9a 83       	std	Y+2, r25	; 0x02
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     ef4:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     ef8:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_getStatus>
     efc:	88 30       	cpi	r24, 0x08	; 8
     efe:	11 f0       	breq	.+4      	; 0xf04 <EEPROM_writeByte+0x22>
        return ERROR;
     f00:	1c 82       	std	Y+4, r1	; 0x04
     f02:	28 c0       	rjmp	.+80     	; 0xf54 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	9a 81       	ldd	r25, Y+2	; 0x02
     f08:	80 70       	andi	r24, 0x00	; 0
     f0a:	97 70       	andi	r25, 0x07	; 7
     f0c:	88 0f       	add	r24, r24
     f0e:	89 2f       	mov	r24, r25
     f10:	88 1f       	adc	r24, r24
     f12:	99 0b       	sbc	r25, r25
     f14:	91 95       	neg	r25
     f16:	80 6a       	ori	r24, 0xA0	; 160
     f18:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     f1c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_getStatus>
     f20:	88 31       	cpi	r24, 0x18	; 24
     f22:	11 f0       	breq	.+4      	; 0xf28 <EEPROM_writeByte+0x46>
        return ERROR; 
     f24:	1c 82       	std	Y+4, r1	; 0x04
     f26:	16 c0       	rjmp	.+44     	; 0xf54 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     f2e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_getStatus>
     f32:	88 32       	cpi	r24, 0x28	; 40
     f34:	11 f0       	breq	.+4      	; 0xf3a <EEPROM_writeByte+0x58>
        return ERROR;
     f36:	1c 82       	std	Y+4, r1	; 0x04
     f38:	0d c0       	rjmp	.+26     	; 0xf54 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     f40:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_getStatus>
     f44:	88 32       	cpi	r24, 0x28	; 40
     f46:	11 f0       	breq	.+4      	; 0xf4c <EEPROM_writeByte+0x6a>
        return ERROR;
     f48:	1c 82       	std	Y+4, r1	; 0x04
     f4a:	04 c0       	rjmp	.+8      	; 0xf54 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     f4c:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWI_stop>
	
    return SUCCESS;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	8c 83       	std	Y+4, r24	; 0x04
     f54:	8c 81       	ldd	r24, Y+4	; 0x04
}
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	00 d0       	rcall	.+0      	; 0xf6a <EEPROM_readByte+0x6>
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <EEPROM_readByte+0x8>
     f6c:	0f 92       	push	r0
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	9a 83       	std	Y+2, r25	; 0x02
     f74:	89 83       	std	Y+1, r24	; 0x01
     f76:	7c 83       	std	Y+4, r23	; 0x04
     f78:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     f7a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <TWI_start>
    if (TWI_getStatus() != TWI_START)
     f7e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_getStatus>
     f82:	88 30       	cpi	r24, 0x08	; 8
     f84:	11 f0       	breq	.+4      	; 0xf8a <EEPROM_readByte+0x26>
        return ERROR;
     f86:	1d 82       	std	Y+5, r1	; 0x05
     f88:	44 c0       	rjmp	.+136    	; 0x1012 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     f8a:	89 81       	ldd	r24, Y+1	; 0x01
     f8c:	9a 81       	ldd	r25, Y+2	; 0x02
     f8e:	80 70       	andi	r24, 0x00	; 0
     f90:	97 70       	andi	r25, 0x07	; 7
     f92:	88 0f       	add	r24, r24
     f94:	89 2f       	mov	r24, r25
     f96:	88 1f       	adc	r24, r24
     f98:	99 0b       	sbc	r25, r25
     f9a:	91 95       	neg	r25
     f9c:	80 6a       	ori	r24, 0xA0	; 160
     f9e:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     fa2:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_getStatus>
     fa6:	88 31       	cpi	r24, 0x18	; 24
     fa8:	11 f0       	breq	.+4      	; 0xfae <EEPROM_readByte+0x4a>
        return ERROR;
     faa:	1d 82       	std	Y+5, r1	; 0x05
     fac:	32 c0       	rjmp	.+100    	; 0x1012 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
     fb4:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_getStatus>
     fb8:	88 32       	cpi	r24, 0x28	; 40
     fba:	11 f0       	breq	.+4      	; 0xfc0 <EEPROM_readByte+0x5c>
        return ERROR;
     fbc:	1d 82       	std	Y+5, r1	; 0x05
     fbe:	29 c0       	rjmp	.+82     	; 0x1012 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     fc0:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
     fc4:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_getStatus>
     fc8:	80 31       	cpi	r24, 0x10	; 16
     fca:	11 f0       	breq	.+4      	; 0xfd0 <EEPROM_readByte+0x6c>
        return ERROR;
     fcc:	1d 82       	std	Y+5, r1	; 0x05
     fce:	21 c0       	rjmp	.+66     	; 0x1012 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	9a 81       	ldd	r25, Y+2	; 0x02
     fd4:	80 70       	andi	r24, 0x00	; 0
     fd6:	97 70       	andi	r25, 0x07	; 7
     fd8:	88 0f       	add	r24, r24
     fda:	89 2f       	mov	r24, r25
     fdc:	88 1f       	adc	r24, r24
     fde:	99 0b       	sbc	r25, r25
     fe0:	91 95       	neg	r25
     fe2:	81 6a       	ori	r24, 0xA1	; 161
     fe4:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     fe8:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_getStatus>
     fec:	80 34       	cpi	r24, 0x40	; 64
     fee:	11 f0       	breq	.+4      	; 0xff4 <EEPROM_readByte+0x90>
        return ERROR;
     ff0:	1d 82       	std	Y+5, r1	; 0x05
     ff2:	0f c0       	rjmp	.+30     	; 0x1012 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
     ff4:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <TWI_readByteWithNACK>
     ff8:	eb 81       	ldd	r30, Y+3	; 0x03
     ffa:	fc 81       	ldd	r31, Y+4	; 0x04
     ffc:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
     ffe:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <TWI_getStatus>
    1002:	88 35       	cpi	r24, 0x58	; 88
    1004:	11 f0       	breq	.+4      	; 0x100a <EEPROM_readByte+0xa6>
        return ERROR;
    1006:	1d 82       	std	Y+5, r1	; 0x05
    1008:	04 c0       	rjmp	.+8      	; 0x1012 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    100a:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <TWI_stop>

    return SUCCESS;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	8d 83       	std	Y+5, r24	; 0x05
    1012:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <MC2_Receive_pass>:
 *******************************************************************************/

// function to receive pass from mc1

void MC2_Receive_pass(uint8 *str)
{
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <MC2_Receive_pass+0xa>
    102e:	0f 92       	push	r0
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	9b 83       	std	Y+3, r25	; 0x03
    1036:	8a 83       	std	Y+2, r24	; 0x02
	uint8 count_pass=0;
    1038:	19 82       	std	Y+1, r1	; 0x01
    103a:	0f c0       	rjmp	.+30     	; 0x105a <MC2_Receive_pass+0x36>
	while(count_pass<5)
	{
		str[count_pass]=UART_receiveByte();
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	9b 81       	ldd	r25, Y+3	; 0x03
    1046:	8c 01       	movw	r16, r24
    1048:	02 0f       	add	r16, r18
    104a:	13 1f       	adc	r17, r19
    104c:	0e 94 b7 10 	call	0x216e	; 0x216e <UART_receiveByte>
    1050:	f8 01       	movw	r30, r16
    1052:	80 83       	st	Z, r24
		count_pass++;
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	8f 5f       	subi	r24, 0xFF	; 255
    1058:	89 83       	std	Y+1, r24	; 0x01
// function to receive pass from mc1

void MC2_Receive_pass(uint8 *str)
{
	uint8 count_pass=0;
	while(count_pass<5)
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	85 30       	cpi	r24, 0x05	; 5
    105e:	70 f3       	brcs	.-36     	; 0x103c <MC2_Receive_pass+0x18>
	{
		str[count_pass]=UART_receiveByte();
		count_pass++;
	}
}
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	1f 91       	pop	r17
    106c:	0f 91       	pop	r16
    106e:	08 95       	ret

00001070 <MC2_Pass_create>:
// function to create the passsword



void MC2_Pass_create()
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
	while(UART_receiveByte()!=ready);
    1078:	0e 94 b7 10 	call	0x216e	; 0x216e <UART_receiveByte>
    107c:	82 30       	cpi	r24, 0x02	; 2
    107e:	e1 f7       	brne	.-8      	; 0x1078 <MC2_Pass_create+0x8>
	UART_sendByte(MC2_READY);
    1080:	80 e1       	ldi	r24, 0x10	; 16
    1082:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_sendByte>
	MC2_Receive_pass(Fisrt_pass);
    1086:	88 ea       	ldi	r24, 0xA8	; 168
    1088:	91 e0       	ldi	r25, 0x01	; 1
    108a:	0e 94 12 08 	call	0x1024	; 0x1024 <MC2_Receive_pass>
	UART_sendByte(received);
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_sendByte>
	while(UART_receiveByte()!=RE_pass);
    1094:	0e 94 b7 10 	call	0x216e	; 0x216e <UART_receiveByte>
    1098:	84 30       	cpi	r24, 0x04	; 4
    109a:	e1 f7       	brne	.-8      	; 0x1094 <MC2_Pass_create+0x24>
	UART_sendByte(send);
    109c:	83 e0       	ldi	r24, 0x03	; 3
    109e:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_sendByte>
	MC2_Receive_pass(Second_pass);
    10a2:	8d e9       	ldi	r24, 0x9D	; 157
    10a4:	91 e0       	ldi	r25, 0x01	; 1
    10a6:	0e 94 12 08 	call	0x1024	; 0x1024 <MC2_Receive_pass>

	UART_sendByte(received);
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_sendByte>
}
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <MC2_CheckPassword>:


// function to check two passwords

uint8 MC2_CheckPassword(uint8 *Password,uint8 *RePassword)
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <MC2_CheckPassword+0x6>
    10bc:	00 d0       	rcall	.+0      	; 0x10be <MC2_CheckPassword+0x8>
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <MC2_CheckPassword+0xa>
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	9b 83       	std	Y+3, r25	; 0x03
    10c6:	8a 83       	std	Y+2, r24	; 0x02
    10c8:	7d 83       	std	Y+5, r23	; 0x05
    10ca:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i=0;
    10cc:	19 82       	std	Y+1, r1	; 0x01
    10ce:	19 c0       	rjmp	.+50     	; 0x1102 <MC2_CheckPassword+0x4c>
	while(i<5)
	{
		if(Password[i] != RePassword[i])
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	28 2f       	mov	r18, r24
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	9b 81       	ldd	r25, Y+3	; 0x03
    10da:	fc 01       	movw	r30, r24
    10dc:	e2 0f       	add	r30, r18
    10de:	f3 1f       	adc	r31, r19
    10e0:	40 81       	ld	r20, Z
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	28 2f       	mov	r18, r24
    10e6:	30 e0       	ldi	r19, 0x00	; 0
    10e8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ea:	9d 81       	ldd	r25, Y+5	; 0x05
    10ec:	fc 01       	movw	r30, r24
    10ee:	e2 0f       	add	r30, r18
    10f0:	f3 1f       	adc	r31, r19
    10f2:	80 81       	ld	r24, Z
    10f4:	48 17       	cp	r20, r24
    10f6:	11 f0       	breq	.+4      	; 0x10fc <MC2_CheckPassword+0x46>
		{
			return ERROR;
    10f8:	1e 82       	std	Y+6, r1	; 0x06
    10fa:	08 c0       	rjmp	.+16     	; 0x110c <MC2_CheckPassword+0x56>
		}
		i++;
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	8f 5f       	subi	r24, 0xFF	; 255
    1100:	89 83       	std	Y+1, r24	; 0x01
// function to check two passwords

uint8 MC2_CheckPassword(uint8 *Password,uint8 *RePassword)
{
	uint8 i=0;
	while(i<5)
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	85 30       	cpi	r24, 0x05	; 5
    1106:	20 f3       	brcs	.-56     	; 0x10d0 <MC2_CheckPassword+0x1a>
		{
			return ERROR;
		}
		i++;
	}
	return SUCCESS;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	8e 83       	std	Y+6, r24	; 0x06
    110c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    110e:	26 96       	adiw	r28, 0x06	; 6
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	cf 91       	pop	r28
    111c:	df 91       	pop	r29
    111e:	08 95       	ret

00001120 <MC2_Save_exeeprom>:

void MC2_Save_exeeprom()
{
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	2f 97       	sbiw	r28, 0x0f	; 15
    112a:	0f b6       	in	r0, 0x3f	; 63
    112c:	f8 94       	cli
    112e:	de bf       	out	0x3e, r29	; 62
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	cd bf       	out	0x3d, r28	; 61
	for(uint8 i=0;i<5;i++)
    1134:	1f 86       	std	Y+15, r1	; 0x0f
    1136:	86 c0       	rjmp	.+268    	; 0x1244 <MC2_Save_exeeprom+0x124>
	{
		EEPROM_writeByte(0x0311+i,Second_pass[i]);
    1138:	8f 85       	ldd	r24, Y+15	; 0x0f
    113a:	88 2f       	mov	r24, r24
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	8f 5e       	subi	r24, 0xEF	; 239
    1140:	9c 4f       	sbci	r25, 0xFC	; 252
    1142:	ac 01       	movw	r20, r24
    1144:	8f 85       	ldd	r24, Y+15	; 0x0f
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	fc 01       	movw	r30, r24
    114c:	e3 56       	subi	r30, 0x63	; 99
    114e:	fe 4f       	sbci	r31, 0xFE	; 254
    1150:	20 81       	ld	r18, Z
    1152:	ca 01       	movw	r24, r20
    1154:	62 2f       	mov	r22, r18
    1156:	0e 94 71 07 	call	0xee2	; 0xee2 <EEPROM_writeByte>
    115a:	80 e0       	ldi	r24, 0x00	; 0
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a8 e4       	ldi	r26, 0x48	; 72
    1160:	b3 e4       	ldi	r27, 0x43	; 67
    1162:	8b 87       	std	Y+11, r24	; 0x0b
    1164:	9c 87       	std	Y+12, r25	; 0x0c
    1166:	ad 87       	std	Y+13, r26	; 0x0d
    1168:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    116a:	6b 85       	ldd	r22, Y+11	; 0x0b
    116c:	7c 85       	ldd	r23, Y+12	; 0x0c
    116e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1170:	9e 85       	ldd	r25, Y+14	; 0x0e
    1172:	20 e0       	ldi	r18, 0x00	; 0
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	4a e7       	ldi	r20, 0x7A	; 122
    1178:	53 e4       	ldi	r21, 0x43	; 67
    117a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    117e:	dc 01       	movw	r26, r24
    1180:	cb 01       	movw	r24, r22
    1182:	8f 83       	std	Y+7, r24	; 0x07
    1184:	98 87       	std	Y+8, r25	; 0x08
    1186:	a9 87       	std	Y+9, r26	; 0x09
    1188:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    118a:	6f 81       	ldd	r22, Y+7	; 0x07
    118c:	78 85       	ldd	r23, Y+8	; 0x08
    118e:	89 85       	ldd	r24, Y+9	; 0x09
    1190:	9a 85       	ldd	r25, Y+10	; 0x0a
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	40 e8       	ldi	r20, 0x80	; 128
    1198:	5f e3       	ldi	r21, 0x3F	; 63
    119a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    119e:	88 23       	and	r24, r24
    11a0:	2c f4       	brge	.+10     	; 0x11ac <MC2_Save_exeeprom+0x8c>
		__ticks = 1;
    11a2:	81 e0       	ldi	r24, 0x01	; 1
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	9e 83       	std	Y+6, r25	; 0x06
    11a8:	8d 83       	std	Y+5, r24	; 0x05
    11aa:	3f c0       	rjmp	.+126    	; 0x122a <MC2_Save_exeeprom+0x10a>
	else if (__tmp > 65535)
    11ac:	6f 81       	ldd	r22, Y+7	; 0x07
    11ae:	78 85       	ldd	r23, Y+8	; 0x08
    11b0:	89 85       	ldd	r24, Y+9	; 0x09
    11b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	3f ef       	ldi	r19, 0xFF	; 255
    11b8:	4f e7       	ldi	r20, 0x7F	; 127
    11ba:	57 e4       	ldi	r21, 0x47	; 71
    11bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11c0:	18 16       	cp	r1, r24
    11c2:	4c f5       	brge	.+82     	; 0x1216 <MC2_Save_exeeprom+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    11c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    11c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    11cc:	20 e0       	ldi	r18, 0x00	; 0
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	40 e2       	ldi	r20, 0x20	; 32
    11d2:	51 e4       	ldi	r21, 0x41	; 65
    11d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11d8:	dc 01       	movw	r26, r24
    11da:	cb 01       	movw	r24, r22
    11dc:	bc 01       	movw	r22, r24
    11de:	cd 01       	movw	r24, r26
    11e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11e4:	dc 01       	movw	r26, r24
    11e6:	cb 01       	movw	r24, r22
    11e8:	9e 83       	std	Y+6, r25	; 0x06
    11ea:	8d 83       	std	Y+5, r24	; 0x05
    11ec:	0f c0       	rjmp	.+30     	; 0x120c <MC2_Save_exeeprom+0xec>
    11ee:	89 e1       	ldi	r24, 0x19	; 25
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	9c 83       	std	Y+4, r25	; 0x04
    11f4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	9c 81       	ldd	r25, Y+4	; 0x04
    11fa:	01 97       	sbiw	r24, 0x01	; 1
    11fc:	f1 f7       	brne	.-4      	; 0x11fa <MC2_Save_exeeprom+0xda>
    11fe:	9c 83       	std	Y+4, r25	; 0x04
    1200:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1202:	8d 81       	ldd	r24, Y+5	; 0x05
    1204:	9e 81       	ldd	r25, Y+6	; 0x06
    1206:	01 97       	sbiw	r24, 0x01	; 1
    1208:	9e 83       	std	Y+6, r25	; 0x06
    120a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    120c:	8d 81       	ldd	r24, Y+5	; 0x05
    120e:	9e 81       	ldd	r25, Y+6	; 0x06
    1210:	00 97       	sbiw	r24, 0x00	; 0
    1212:	69 f7       	brne	.-38     	; 0x11ee <MC2_Save_exeeprom+0xce>
    1214:	14 c0       	rjmp	.+40     	; 0x123e <MC2_Save_exeeprom+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1216:	6f 81       	ldd	r22, Y+7	; 0x07
    1218:	78 85       	ldd	r23, Y+8	; 0x08
    121a:	89 85       	ldd	r24, Y+9	; 0x09
    121c:	9a 85       	ldd	r25, Y+10	; 0x0a
    121e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	9e 83       	std	Y+6, r25	; 0x06
    1228:	8d 83       	std	Y+5, r24	; 0x05
    122a:	8d 81       	ldd	r24, Y+5	; 0x05
    122c:	9e 81       	ldd	r25, Y+6	; 0x06
    122e:	9a 83       	std	Y+2, r25	; 0x02
    1230:	89 83       	std	Y+1, r24	; 0x01
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	9a 81       	ldd	r25, Y+2	; 0x02
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	f1 f7       	brne	.-4      	; 0x1236 <MC2_Save_exeeprom+0x116>
    123a:	9a 83       	std	Y+2, r25	; 0x02
    123c:	89 83       	std	Y+1, r24	; 0x01
	return SUCCESS;
}

void MC2_Save_exeeprom()
{
	for(uint8 i=0;i<5;i++)
    123e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1240:	8f 5f       	subi	r24, 0xFF	; 255
    1242:	8f 87       	std	Y+15, r24	; 0x0f
    1244:	8f 85       	ldd	r24, Y+15	; 0x0f
    1246:	85 30       	cpi	r24, 0x05	; 5
    1248:	08 f4       	brcc	.+2      	; 0x124c <MC2_Save_exeeprom+0x12c>
    124a:	76 cf       	rjmp	.-276    	; 0x1138 <MC2_Save_exeeprom+0x18>
	{
		EEPROM_writeByte(0x0311+i,Second_pass[i]);
		_delay_ms(200);
	}
}
    124c:	2f 96       	adiw	r28, 0x0f	; 15
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	de bf       	out	0x3e, r29	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	cd bf       	out	0x3d, r28	; 61
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <MC2_GET_exeeprom>:

void MC2_GET_exeeprom()
{
    125e:	df 93       	push	r29
    1260:	cf 93       	push	r28
    1262:	0f 92       	push	r0
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
	for(uint8 i=0;i<5;i++)
    1268:	19 82       	std	Y+1, r1	; 0x01
    126a:	13 c0       	rjmp	.+38     	; 0x1292 <MC2_GET_exeeprom+0x34>
	{
		EEPROM_readByte(0x0311+i,ex_eeprom+i);
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	88 2f       	mov	r24, r24
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	8f 5e       	subi	r24, 0xEF	; 239
    1274:	9c 4f       	sbci	r25, 0xFC	; 252
    1276:	ac 01       	movw	r20, r24
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	88 2f       	mov	r24, r24
    127c:	90 e0       	ldi	r25, 0x00	; 0
    127e:	9c 01       	movw	r18, r24
    1280:	2d 56       	subi	r18, 0x6D	; 109
    1282:	3e 4f       	sbci	r19, 0xFE	; 254
    1284:	ca 01       	movw	r24, r20
    1286:	b9 01       	movw	r22, r18
    1288:	0e 94 b2 07 	call	0xf64	; 0xf64 <EEPROM_readByte>
	}
}

void MC2_GET_exeeprom()
{
	for(uint8 i=0;i<5;i++)
    128c:	89 81       	ldd	r24, Y+1	; 0x01
    128e:	8f 5f       	subi	r24, 0xFF	; 255
    1290:	89 83       	std	Y+1, r24	; 0x01
    1292:	89 81       	ldd	r24, Y+1	; 0x01
    1294:	85 30       	cpi	r24, 0x05	; 5
    1296:	50 f3       	brcs	.-44     	; 0x126c <MC2_GET_exeeprom+0xe>
	{
		EEPROM_readByte(0x0311+i,ex_eeprom+i);
	}
}
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <MC2_check_ineeprom>:

uint8 MC2_check_ineeprom()
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	cd b7       	in	r28, 0x3d	; 61
    12a6:	de b7       	in	r29, 0x3e	; 62
	while(UART_receiveByte()!=check);
    12a8:	0e 94 b7 10 	call	0x216e	; 0x216e <UART_receiveByte>
    12ac:	85 30       	cpi	r24, 0x05	; 5
    12ae:	e1 f7       	brne	.-8      	; 0x12a8 <MC2_check_ineeprom+0x8>
	UART_sendByte(check);
    12b0:	85 e0       	ldi	r24, 0x05	; 5
    12b2:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_sendByte>
	MC2_Receive_pass(PasswordCheck);
    12b6:	89 e8       	ldi	r24, 0x89	; 137
    12b8:	91 e0       	ldi	r25, 0x01	; 1
    12ba:	0e 94 12 08 	call	0x1024	; 0x1024 <MC2_Receive_pass>

	MC2_GET_exeeprom();
    12be:	0e 94 2f 09 	call	0x125e	; 0x125e <MC2_GET_exeeprom>

	Check_var=MC2_CheckPassword(PasswordCheck,ex_eeprom);
    12c2:	89 e8       	ldi	r24, 0x89	; 137
    12c4:	91 e0       	ldi	r25, 0x01	; 1
    12c6:	23 e9       	ldi	r18, 0x93	; 147
    12c8:	31 e0       	ldi	r19, 0x01	; 1
    12ca:	b9 01       	movw	r22, r18
    12cc:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <MC2_CheckPassword>
    12d0:	80 93 7c 01 	sts	0x017C, r24
	UART_sendByte(result);
    12d4:	86 e0       	ldi	r24, 0x06	; 6
    12d6:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_sendByte>
	while(UART_receiveByte()!=result);
    12da:	0e 94 b7 10 	call	0x216e	; 0x216e <UART_receiveByte>
    12de:	86 30       	cpi	r24, 0x06	; 6
    12e0:	e1 f7       	brne	.-8      	; 0x12da <MC2_check_ineeprom+0x3a>

	UART_sendByte(Check_var);
    12e2:	80 91 7c 01 	lds	r24, 0x017C
    12e6:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_sendByte>
	return Check_var;
    12ea:	80 91 7c 01 	lds	r24, 0x017C
}
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <MC2_mainOptions>:


void MC2_mainOptions()
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
	while(UART_receiveByte()!=start);
    12fc:	0e 94 b7 10 	call	0x216e	; 0x216e <UART_receiveByte>
    1300:	81 31       	cpi	r24, 0x11	; 17
    1302:	e1 f7       	brne	.-8      	; 0x12fc <MC2_mainOptions+0x8>
	UART_sendByte(start);
    1304:	81 e1       	ldi	r24, 0x11	; 17
    1306:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_sendByte>

	while(UART_receiveByte()!=send);
    130a:	0e 94 b7 10 	call	0x216e	; 0x216e <UART_receiveByte>
    130e:	83 30       	cpi	r24, 0x03	; 3
    1310:	e1 f7       	brne	.-8      	; 0x130a <MC2_mainOptions+0x16>

	choice=UART_receiveByte();
    1312:	0e 94 b7 10 	call	0x216e	; 0x216e <UART_receiveByte>
    1316:	80 93 a7 01 	sts	0x01A7, r24
	MC2_check_ineeprom();
    131a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <MC2_check_ineeprom>
	return_flag=0;
    131e:	10 92 68 01 	sts	0x0168, r1
	if (Check_var==1)
    1322:	80 91 7c 01 	lds	r24, 0x017C
    1326:	81 30       	cpi	r24, 0x01	; 1
    1328:	99 f4       	brne	.+38     	; 0x1350 <MC2_mainOptions+0x5c>
	{
		if(choice==plus)
    132a:	80 91 a7 01 	lds	r24, 0x01A7
    132e:	8e 30       	cpi	r24, 0x0E	; 14
    1330:	19 f4       	brne	.+6      	; 0x1338 <MC2_mainOptions+0x44>
		{
			MC2_openDoor();
    1332:	0e 94 ac 0a 	call	0x1558	; 0x1558 <MC2_openDoor>
    1336:	09 c0       	rjmp	.+18     	; 0x134a <MC2_mainOptions+0x56>
		}
		else if (choice==minus)
    1338:	80 91 a7 01 	lds	r24, 0x01A7
    133c:	8f 30       	cpi	r24, 0x0F	; 15
    133e:	29 f4       	brne	.+10     	; 0x134a <MC2_mainOptions+0x56>
		{

			NewPassMC2();
    1340:	0e 94 00 0b 	call	0x1600	; 0x1600 <NewPassMC2>
			return_flag=1;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	80 93 68 01 	sts	0x0168, r24
		}
		Check_var=0;
    134a:	10 92 7c 01 	sts	0x017C, r1
    134e:	35 c0       	rjmp	.+106    	; 0x13ba <MC2_mainOptions+0xc6>
	}
	else
	{
		Error_num++;
    1350:	80 91 81 01 	lds	r24, 0x0181
    1354:	8f 5f       	subi	r24, 0xFF	; 255
    1356:	80 93 81 01 	sts	0x0181, r24
		while(UART_receiveByte()!=error);
    135a:	0e 94 b7 10 	call	0x216e	; 0x216e <UART_receiveByte>
    135e:	8d 30       	cpi	r24, 0x0D	; 13
    1360:	e1 f7       	brne	.-8      	; 0x135a <MC2_mainOptions+0x66>
		UART_sendByte(error);
    1362:	8d e0       	ldi	r24, 0x0D	; 13
    1364:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_sendByte>
    1368:	1c c0       	rjmp	.+56     	; 0x13a2 <MC2_mainOptions+0xae>

		while(Error_num<3)
		{
			if(MC2_check_ineeprom()==1)
    136a:	0e 94 50 09 	call	0x12a0	; 0x12a0 <MC2_check_ineeprom>
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	99 f4       	brne	.+38     	; 0x1398 <MC2_mainOptions+0xa4>
			{
				if(choice==plus)
    1372:	80 91 a7 01 	lds	r24, 0x01A7
    1376:	8e 30       	cpi	r24, 0x0E	; 14
    1378:	19 f4       	brne	.+6      	; 0x1380 <MC2_mainOptions+0x8c>
				{
					MC2_openDoor();
    137a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <MC2_openDoor>
    137e:	06 c0       	rjmp	.+12     	; 0x138c <MC2_mainOptions+0x98>
				}
				else if (choice==minus)
    1380:	80 91 a7 01 	lds	r24, 0x01A7
    1384:	8f 30       	cpi	r24, 0x0F	; 15
    1386:	11 f4       	brne	.+4      	; 0x138c <MC2_mainOptions+0x98>
				{
					NewPassMC2();
    1388:	0e 94 00 0b 	call	0x1600	; 0x1600 <NewPassMC2>
				}
				Check_var=0;
    138c:	10 92 7c 01 	sts	0x017C, r1
				return_flag=1;
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	80 93 68 01 	sts	0x0168, r24
    1396:	09 c0       	rjmp	.+18     	; 0x13aa <MC2_mainOptions+0xb6>
				break;
			}
			else
			{
				Error_num++;
    1398:	80 91 81 01 	lds	r24, 0x0181
    139c:	8f 5f       	subi	r24, 0xFF	; 255
    139e:	80 93 81 01 	sts	0x0181, r24
	{
		Error_num++;
		while(UART_receiveByte()!=error);
		UART_sendByte(error);

		while(Error_num<3)
    13a2:	80 91 81 01 	lds	r24, 0x0181
    13a6:	83 30       	cpi	r24, 0x03	; 3
    13a8:	00 f3       	brcs	.-64     	; 0x136a <MC2_mainOptions+0x76>
			else
			{
				Error_num++;
			}
		}
		if(Error_num==3)
    13aa:	80 91 81 01 	lds	r24, 0x0181
    13ae:	83 30       	cpi	r24, 0x03	; 3
    13b0:	11 f4       	brne	.+4      	; 0x13b6 <MC2_mainOptions+0xc2>
		{
			MC2_error_buzzer();
    13b2:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <MC2_error_buzzer>
		}
		Error_num=0;
    13b6:	10 92 81 01 	sts	0x0181, r1
	}
}
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <MC2_error_buzzer>:

// buzzer sound in error pass
void MC2_error_buzzer()
{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
	while(UART_receiveByte()!=error);
    13c8:	0e 94 b7 10 	call	0x216e	; 0x216e <UART_receiveByte>
    13cc:	8d 30       	cpi	r24, 0x0D	; 13
    13ce:	e1 f7       	brne	.-8      	; 0x13c8 <MC2_error_buzzer+0x8>
	UART_sendByte(error);
    13d0:	8d e0       	ldi	r24, 0x0D	; 13
    13d2:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_sendByte>
	MC2_Buzzer_trigger();
    13d6:	0e 94 29 0a 	call	0x1452	; 0x1452 <MC2_Buzzer_trigger>
}
    13da:	cf 91       	pop	r28
    13dc:	df 91       	pop	r29
    13de:	08 95       	ret

000013e0 <BuzzerCallBack>:

// call back function for buzzer

void BuzzerCallBack()
{
    13e0:	df 93       	push	r29
    13e2:	cf 93       	push	r28
    13e4:	cd b7       	in	r28, 0x3d	; 61
    13e6:	de b7       	in	r29, 0x3e	; 62
	Ticks_Num++;
    13e8:	80 91 7d 01 	lds	r24, 0x017D
    13ec:	90 91 7e 01 	lds	r25, 0x017E
    13f0:	a0 91 7f 01 	lds	r26, 0x017F
    13f4:	b0 91 80 01 	lds	r27, 0x0180
    13f8:	01 96       	adiw	r24, 0x01	; 1
    13fa:	a1 1d       	adc	r26, r1
    13fc:	b1 1d       	adc	r27, r1
    13fe:	80 93 7d 01 	sts	0x017D, r24
    1402:	90 93 7e 01 	sts	0x017E, r25
    1406:	a0 93 7f 01 	sts	0x017F, r26
    140a:	b0 93 80 01 	sts	0x0180, r27
	if(Ticks_Num>1831)
    140e:	80 91 7d 01 	lds	r24, 0x017D
    1412:	90 91 7e 01 	lds	r25, 0x017E
    1416:	a0 91 7f 01 	lds	r26, 0x017F
    141a:	b0 91 80 01 	lds	r27, 0x0180
    141e:	88 32       	cpi	r24, 0x28	; 40
    1420:	27 e0       	ldi	r18, 0x07	; 7
    1422:	92 07       	cpc	r25, r18
    1424:	20 e0       	ldi	r18, 0x00	; 0
    1426:	a2 07       	cpc	r26, r18
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	b2 07       	cpc	r27, r18
    142c:	78 f0       	brcs	.+30     	; 0x144c <BuzzerCallBack+0x6c>
	{
		Ticks_Num=0;
    142e:	10 92 7d 01 	sts	0x017D, r1
    1432:	10 92 7e 01 	sts	0x017E, r1
    1436:	10 92 7f 01 	sts	0x017F, r1
    143a:	10 92 80 01 	sts	0x0180, r1
		Timer0_DeInit();
    143e:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <Timer0_DeInit>
		BUZZER_off();
    1442:	0e 94 88 06 	call	0xd10	; 0xd10 <BUZZER_off>
		return_flag=1;
    1446:	81 e0       	ldi	r24, 0x01	; 1
    1448:	80 93 68 01 	sts	0x0168, r24
	}
}
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <MC2_Buzzer_trigger>:

// function to trigger buzzer

void MC2_Buzzer_trigger()
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
	while(UART_receiveByte()!=Timer_start);
    145a:	0e 94 b7 10 	call	0x216e	; 0x216e <UART_receiveByte>
    145e:	88 30       	cpi	r24, 0x08	; 8
    1460:	e1 f7       	brne	.-8      	; 0x145a <MC2_Buzzer_trigger+0x8>
	UART_sendByte(Timer_start);
    1462:	88 e0       	ldi	r24, 0x08	; 8
    1464:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_sendByte>
	Timer0_Ovf_setCallBack(BuzzerCallBack);
    1468:	80 ef       	ldi	r24, 0xF0	; 240
    146a:	99 e0       	ldi	r25, 0x09	; 9
    146c:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <Timer0_Ovf_setCallBack>
	BUZZER_on();
    1470:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <BUZZER_on>
	MC2_Timer0_start();
    1474:	0e 94 c9 0a 	call	0x1592	; 0x1592 <MC2_Timer0_start>

}
    1478:	cf 91       	pop	r28
    147a:	df 91       	pop	r29
    147c:	08 95       	ret

0000147e <MC2_Door_opening>:
// door opening function
void MC2_Door_opening()
{
    147e:	df 93       	push	r29
    1480:	cf 93       	push	r28
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
	Ticks_Num++;
    1486:	80 91 7d 01 	lds	r24, 0x017D
    148a:	90 91 7e 01 	lds	r25, 0x017E
    148e:	a0 91 7f 01 	lds	r26, 0x017F
    1492:	b0 91 80 01 	lds	r27, 0x0180
    1496:	01 96       	adiw	r24, 0x01	; 1
    1498:	a1 1d       	adc	r26, r1
    149a:	b1 1d       	adc	r27, r1
    149c:	80 93 7d 01 	sts	0x017D, r24
    14a0:	90 93 7e 01 	sts	0x017E, r25
    14a4:	a0 93 7f 01 	sts	0x017F, r26
    14a8:	b0 93 80 01 	sts	0x0180, r27
	if(Ticks_Num==458)
    14ac:	80 91 7d 01 	lds	r24, 0x017D
    14b0:	90 91 7e 01 	lds	r25, 0x017E
    14b4:	a0 91 7f 01 	lds	r26, 0x017F
    14b8:	b0 91 80 01 	lds	r27, 0x0180
    14bc:	8a 3c       	cpi	r24, 0xCA	; 202
    14be:	21 e0       	ldi	r18, 0x01	; 1
    14c0:	92 07       	cpc	r25, r18
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	a2 07       	cpc	r26, r18
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	b2 07       	cpc	r27, r18
    14ca:	51 f4       	brne	.+20     	; 0x14e0 <MC2_Door_opening+0x62>
	{
		while(UART_receiveByte()!=HoldDoor);
    14cc:	0e 94 b7 10 	call	0x216e	; 0x216e <UART_receiveByte>
    14d0:	8c 30       	cpi	r24, 0x0C	; 12
    14d2:	e1 f7       	brne	.-8      	; 0x14cc <MC2_Door_opening+0x4e>
		UART_sendByte(HoldDoor);
    14d4:	8c e0       	ldi	r24, 0x0C	; 12
    14d6:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_sendByte>
		MOTOR_STOP();
    14da:	0e 94 e5 06 	call	0xdca	; 0xdca <MOTOR_STOP>
    14de:	39 c0       	rjmp	.+114    	; 0x1552 <MC2_Door_opening+0xd4>
	}

	else if(Ticks_Num==550)
    14e0:	80 91 7d 01 	lds	r24, 0x017D
    14e4:	90 91 7e 01 	lds	r25, 0x017E
    14e8:	a0 91 7f 01 	lds	r26, 0x017F
    14ec:	b0 91 80 01 	lds	r27, 0x0180
    14f0:	86 32       	cpi	r24, 0x26	; 38
    14f2:	22 e0       	ldi	r18, 0x02	; 2
    14f4:	92 07       	cpc	r25, r18
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	a2 07       	cpc	r26, r18
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	b2 07       	cpc	r27, r18
    14fe:	51 f4       	brne	.+20     	; 0x1514 <MC2_Door_opening+0x96>
	{
		while(UART_receiveByte()!=ClosingDoor);
    1500:	0e 94 b7 10 	call	0x216e	; 0x216e <UART_receiveByte>
    1504:	8a 30       	cpi	r24, 0x0A	; 10
    1506:	e1 f7       	brne	.-8      	; 0x1500 <MC2_Door_opening+0x82>
		UART_sendByte(ClosingDoor);
    1508:	8a e0       	ldi	r24, 0x0A	; 10
    150a:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_sendByte>
		Rotate_Anticlockwise();
    150e:	0e 94 cf 06 	call	0xd9e	; 0xd9e <Rotate_Anticlockwise>
    1512:	1f c0       	rjmp	.+62     	; 0x1552 <MC2_Door_opening+0xd4>
	}

	else if(Ticks_Num==1008)
    1514:	80 91 7d 01 	lds	r24, 0x017D
    1518:	90 91 7e 01 	lds	r25, 0x017E
    151c:	a0 91 7f 01 	lds	r26, 0x017F
    1520:	b0 91 80 01 	lds	r27, 0x0180
    1524:	80 3f       	cpi	r24, 0xF0	; 240
    1526:	23 e0       	ldi	r18, 0x03	; 3
    1528:	92 07       	cpc	r25, r18
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	a2 07       	cpc	r26, r18
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	b2 07       	cpc	r27, r18
    1532:	79 f4       	brne	.+30     	; 0x1552 <MC2_Door_opening+0xd4>
	{
		Timer0_DeInit();
    1534:	0e 94 92 0f 	call	0x1f24	; 0x1f24 <Timer0_DeInit>
		Ticks_Num=0;
    1538:	10 92 7d 01 	sts	0x017D, r1
    153c:	10 92 7e 01 	sts	0x017E, r1
    1540:	10 92 7f 01 	sts	0x017F, r1
    1544:	10 92 80 01 	sts	0x0180, r1
		MOTOR_STOP();
    1548:	0e 94 e5 06 	call	0xdca	; 0xdca <MOTOR_STOP>
		return_flag=1;
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	80 93 68 01 	sts	0x0168, r24
	}
}
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <MC2_openDoor>:

// func to open door

void MC2_openDoor()
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
	while(UART_receiveByte()!=Timer_start);
    1560:	0e 94 b7 10 	call	0x216e	; 0x216e <UART_receiveByte>
    1564:	88 30       	cpi	r24, 0x08	; 8
    1566:	e1 f7       	brne	.-8      	; 0x1560 <MC2_openDoor+0x8>
	UART_sendByte(Timer_start);
    1568:	88 e0       	ldi	r24, 0x08	; 8
    156a:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_sendByte>
	Timer0_Ovf_setCallBack(MC2_Door_opening);
    156e:	8f e3       	ldi	r24, 0x3F	; 63
    1570:	9a e0       	ldi	r25, 0x0A	; 10
    1572:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <Timer0_Ovf_setCallBack>
	MC2_Timer0_start();
    1576:	0e 94 c9 0a 	call	0x1592	; 0x1592 <MC2_Timer0_start>
	UART_sendByte(OpeningDoor);
    157a:	89 e0       	ldi	r24, 0x09	; 9
    157c:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_sendByte>
	while(UART_receiveByte()!=OpeningDoor);
    1580:	0e 94 b7 10 	call	0x216e	; 0x216e <UART_receiveByte>
    1584:	89 30       	cpi	r24, 0x09	; 9
    1586:	e1 f7       	brne	.-8      	; 0x1580 <MC2_openDoor+0x28>
	Rotate_clockwise();
    1588:	0e 94 b9 06 	call	0xd72	; 0xd72 <Rotate_clockwise>
}
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <MC2_Timer0_start>:

//timer0 initialization

void MC2_Timer0_start()
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	2b 97       	sbiw	r28, 0x0b	; 11
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
	Timer_Config config_t={NORMAL,F_CPU_1024,0,0,ENABLE_N,DISABLE};
    15a6:	ce 01       	movw	r24, r28
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	98 87       	std	Y+8, r25	; 0x08
    15ac:	8f 83       	std	Y+7, r24	; 0x07
    15ae:	e5 e7       	ldi	r30, 0x75	; 117
    15b0:	f1 e0       	ldi	r31, 0x01	; 1
    15b2:	fa 87       	std	Y+10, r31	; 0x0a
    15b4:	e9 87       	std	Y+9, r30	; 0x09
    15b6:	f6 e0       	ldi	r31, 0x06	; 6
    15b8:	fb 87       	std	Y+11, r31	; 0x0b
    15ba:	e9 85       	ldd	r30, Y+9	; 0x09
    15bc:	fa 85       	ldd	r31, Y+10	; 0x0a
    15be:	00 80       	ld	r0, Z
    15c0:	89 85       	ldd	r24, Y+9	; 0x09
    15c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	9a 87       	std	Y+10, r25	; 0x0a
    15c8:	89 87       	std	Y+9, r24	; 0x09
    15ca:	ef 81       	ldd	r30, Y+7	; 0x07
    15cc:	f8 85       	ldd	r31, Y+8	; 0x08
    15ce:	00 82       	st	Z, r0
    15d0:	8f 81       	ldd	r24, Y+7	; 0x07
    15d2:	98 85       	ldd	r25, Y+8	; 0x08
    15d4:	01 96       	adiw	r24, 0x01	; 1
    15d6:	98 87       	std	Y+8, r25	; 0x08
    15d8:	8f 83       	std	Y+7, r24	; 0x07
    15da:	9b 85       	ldd	r25, Y+11	; 0x0b
    15dc:	91 50       	subi	r25, 0x01	; 1
    15de:	9b 87       	std	Y+11, r25	; 0x0b
    15e0:	eb 85       	ldd	r30, Y+11	; 0x0b
    15e2:	ee 23       	and	r30, r30
    15e4:	51 f7       	brne	.-44     	; 0x15ba <MC2_Timer0_start+0x28>
	Timer0_init(&config_t);
    15e6:	ce 01       	movw	r24, r28
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <Timer0_init>
}
    15ee:	2b 96       	adiw	r28, 0x0b	; 11
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	de bf       	out	0x3e, r29	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	cd bf       	out	0x3d, r28	; 61
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <NewPassMC2>:

// function to ceate new pass for mc2

void NewPassMC2()
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
	do
	{
		MC2_Pass_create();
    1608:	0e 94 38 08 	call	0x1070	; 0x1070 <MC2_Pass_create>
		checked_var=MC2_CheckPassword(Fisrt_pass,Second_pass);
    160c:	88 ea       	ldi	r24, 0xA8	; 168
    160e:	91 e0       	ldi	r25, 0x01	; 1
    1610:	2d e9       	ldi	r18, 0x9D	; 157
    1612:	31 e0       	ldi	r19, 0x01	; 1
    1614:	b9 01       	movw	r22, r18
    1616:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <MC2_CheckPassword>
    161a:	80 93 82 01 	sts	0x0182, r24
		UART_sendByte(send);
    161e:	83 e0       	ldi	r24, 0x03	; 3
    1620:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_sendByte>

		while(UART_receiveByte()!=send);
    1624:	0e 94 b7 10 	call	0x216e	; 0x216e <UART_receiveByte>
    1628:	83 30       	cpi	r24, 0x03	; 3
    162a:	e1 f7       	brne	.-8      	; 0x1624 <NewPassMC2+0x24>

		UART_sendByte(checked_var);
    162c:	80 91 82 01 	lds	r24, 0x0182
    1630:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_sendByte>

	}while(checked_var==0);
    1634:	80 91 82 01 	lds	r24, 0x0182
    1638:	88 23       	and	r24, r24
    163a:	31 f3       	breq	.-52     	; 0x1608 <NewPassMC2+0x8>
	MC2_Save_exeeprom();
    163c:	0e 94 90 08 	call	0x1120	; 0x1120 <MC2_Save_exeeprom>
}
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	00 d0       	rcall	.+0      	; 0x164c <GPIO_setupPinDirection+0x6>
    164c:	00 d0       	rcall	.+0      	; 0x164e <GPIO_setupPinDirection+0x8>
    164e:	0f 92       	push	r0
    1650:	cd b7       	in	r28, 0x3d	; 61
    1652:	de b7       	in	r29, 0x3e	; 62
    1654:	89 83       	std	Y+1, r24	; 0x01
    1656:	6a 83       	std	Y+2, r22	; 0x02
    1658:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	88 30       	cpi	r24, 0x08	; 8
    165e:	08 f0       	brcs	.+2      	; 0x1662 <GPIO_setupPinDirection+0x1c>
    1660:	d5 c0       	rjmp	.+426    	; 0x180c <GPIO_setupPinDirection+0x1c6>
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	84 30       	cpi	r24, 0x04	; 4
    1666:	08 f0       	brcs	.+2      	; 0x166a <GPIO_setupPinDirection+0x24>
    1668:	d1 c0       	rjmp	.+418    	; 0x180c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	28 2f       	mov	r18, r24
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	3d 83       	std	Y+5, r19	; 0x05
    1672:	2c 83       	std	Y+4, r18	; 0x04
    1674:	8c 81       	ldd	r24, Y+4	; 0x04
    1676:	9d 81       	ldd	r25, Y+5	; 0x05
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	91 05       	cpc	r25, r1
    167c:	09 f4       	brne	.+2      	; 0x1680 <GPIO_setupPinDirection+0x3a>
    167e:	43 c0       	rjmp	.+134    	; 0x1706 <GPIO_setupPinDirection+0xc0>
    1680:	2c 81       	ldd	r18, Y+4	; 0x04
    1682:	3d 81       	ldd	r19, Y+5	; 0x05
    1684:	22 30       	cpi	r18, 0x02	; 2
    1686:	31 05       	cpc	r19, r1
    1688:	2c f4       	brge	.+10     	; 0x1694 <GPIO_setupPinDirection+0x4e>
    168a:	8c 81       	ldd	r24, Y+4	; 0x04
    168c:	9d 81       	ldd	r25, Y+5	; 0x05
    168e:	00 97       	sbiw	r24, 0x00	; 0
    1690:	71 f0       	breq	.+28     	; 0x16ae <GPIO_setupPinDirection+0x68>
    1692:	bc c0       	rjmp	.+376    	; 0x180c <GPIO_setupPinDirection+0x1c6>
    1694:	2c 81       	ldd	r18, Y+4	; 0x04
    1696:	3d 81       	ldd	r19, Y+5	; 0x05
    1698:	22 30       	cpi	r18, 0x02	; 2
    169a:	31 05       	cpc	r19, r1
    169c:	09 f4       	brne	.+2      	; 0x16a0 <GPIO_setupPinDirection+0x5a>
    169e:	5f c0       	rjmp	.+190    	; 0x175e <GPIO_setupPinDirection+0x118>
    16a0:	8c 81       	ldd	r24, Y+4	; 0x04
    16a2:	9d 81       	ldd	r25, Y+5	; 0x05
    16a4:	83 30       	cpi	r24, 0x03	; 3
    16a6:	91 05       	cpc	r25, r1
    16a8:	09 f4       	brne	.+2      	; 0x16ac <GPIO_setupPinDirection+0x66>
    16aa:	85 c0       	rjmp	.+266    	; 0x17b6 <GPIO_setupPinDirection+0x170>
    16ac:	af c0       	rjmp	.+350    	; 0x180c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	a1 f4       	brne	.+40     	; 0x16dc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    16b4:	aa e3       	ldi	r26, 0x3A	; 58
    16b6:	b0 e0       	ldi	r27, 0x00	; 0
    16b8:	ea e3       	ldi	r30, 0x3A	; 58
    16ba:	f0 e0       	ldi	r31, 0x00	; 0
    16bc:	80 81       	ld	r24, Z
    16be:	48 2f       	mov	r20, r24
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	28 2f       	mov	r18, r24
    16c4:	30 e0       	ldi	r19, 0x00	; 0
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	02 2e       	mov	r0, r18
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <GPIO_setupPinDirection+0x8c>
    16ce:	88 0f       	add	r24, r24
    16d0:	99 1f       	adc	r25, r25
    16d2:	0a 94       	dec	r0
    16d4:	e2 f7       	brpl	.-8      	; 0x16ce <GPIO_setupPinDirection+0x88>
    16d6:	84 2b       	or	r24, r20
    16d8:	8c 93       	st	X, r24
    16da:	98 c0       	rjmp	.+304    	; 0x180c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    16dc:	aa e3       	ldi	r26, 0x3A	; 58
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	ea e3       	ldi	r30, 0x3A	; 58
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	48 2f       	mov	r20, r24
    16e8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	02 2e       	mov	r0, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <GPIO_setupPinDirection+0xb4>
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	0a 94       	dec	r0
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <GPIO_setupPinDirection+0xb0>
    16fe:	80 95       	com	r24
    1700:	84 23       	and	r24, r20
    1702:	8c 93       	st	X, r24
    1704:	83 c0       	rjmp	.+262    	; 0x180c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	81 30       	cpi	r24, 0x01	; 1
    170a:	a1 f4       	brne	.+40     	; 0x1734 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    170c:	a7 e3       	ldi	r26, 0x37	; 55
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e7 e3       	ldi	r30, 0x37	; 55
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	48 2f       	mov	r20, r24
    1718:	8a 81       	ldd	r24, Y+2	; 0x02
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 2e       	mov	r0, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <GPIO_setupPinDirection+0xe4>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	0a 94       	dec	r0
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <GPIO_setupPinDirection+0xe0>
    172e:	84 2b       	or	r24, r20
    1730:	8c 93       	st	X, r24
    1732:	6c c0       	rjmp	.+216    	; 0x180c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1734:	a7 e3       	ldi	r26, 0x37	; 55
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e7 e3       	ldi	r30, 0x37	; 55
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	48 2f       	mov	r20, r24
    1740:	8a 81       	ldd	r24, Y+2	; 0x02
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	02 2e       	mov	r0, r18
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <GPIO_setupPinDirection+0x10c>
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	0a 94       	dec	r0
    1754:	e2 f7       	brpl	.-8      	; 0x174e <GPIO_setupPinDirection+0x108>
    1756:	80 95       	com	r24
    1758:	84 23       	and	r24, r20
    175a:	8c 93       	st	X, r24
    175c:	57 c0       	rjmp	.+174    	; 0x180c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    175e:	8b 81       	ldd	r24, Y+3	; 0x03
    1760:	81 30       	cpi	r24, 0x01	; 1
    1762:	a1 f4       	brne	.+40     	; 0x178c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1764:	a4 e3       	ldi	r26, 0x34	; 52
    1766:	b0 e0       	ldi	r27, 0x00	; 0
    1768:	e4 e3       	ldi	r30, 0x34	; 52
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	80 81       	ld	r24, Z
    176e:	48 2f       	mov	r20, r24
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	28 2f       	mov	r18, r24
    1774:	30 e0       	ldi	r19, 0x00	; 0
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	02 2e       	mov	r0, r18
    177c:	02 c0       	rjmp	.+4      	; 0x1782 <GPIO_setupPinDirection+0x13c>
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	0a 94       	dec	r0
    1784:	e2 f7       	brpl	.-8      	; 0x177e <GPIO_setupPinDirection+0x138>
    1786:	84 2b       	or	r24, r20
    1788:	8c 93       	st	X, r24
    178a:	40 c0       	rjmp	.+128    	; 0x180c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    178c:	a4 e3       	ldi	r26, 0x34	; 52
    178e:	b0 e0       	ldi	r27, 0x00	; 0
    1790:	e4 e3       	ldi	r30, 0x34	; 52
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	80 81       	ld	r24, Z
    1796:	48 2f       	mov	r20, r24
    1798:	8a 81       	ldd	r24, Y+2	; 0x02
    179a:	28 2f       	mov	r18, r24
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	02 2e       	mov	r0, r18
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <GPIO_setupPinDirection+0x164>
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	0a 94       	dec	r0
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <GPIO_setupPinDirection+0x160>
    17ae:	80 95       	com	r24
    17b0:	84 23       	and	r24, r20
    17b2:	8c 93       	st	X, r24
    17b4:	2b c0       	rjmp	.+86     	; 0x180c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	81 30       	cpi	r24, 0x01	; 1
    17ba:	a1 f4       	brne	.+40     	; 0x17e4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    17bc:	a1 e3       	ldi	r26, 0x31	; 49
    17be:	b0 e0       	ldi	r27, 0x00	; 0
    17c0:	e1 e3       	ldi	r30, 0x31	; 49
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	48 2f       	mov	r20, r24
    17c8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	81 e0       	ldi	r24, 0x01	; 1
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	02 2e       	mov	r0, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <GPIO_setupPinDirection+0x194>
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	0a 94       	dec	r0
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <GPIO_setupPinDirection+0x190>
    17de:	84 2b       	or	r24, r20
    17e0:	8c 93       	st	X, r24
    17e2:	14 c0       	rjmp	.+40     	; 0x180c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    17e4:	a1 e3       	ldi	r26, 0x31	; 49
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e1 e3       	ldi	r30, 0x31	; 49
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	48 2f       	mov	r20, r24
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	02 2e       	mov	r0, r18
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <GPIO_setupPinDirection+0x1bc>
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	0a 94       	dec	r0
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <GPIO_setupPinDirection+0x1b8>
    1806:	80 95       	com	r24
    1808:	84 23       	and	r24, r20
    180a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    180c:	0f 90       	pop	r0
    180e:	0f 90       	pop	r0
    1810:	0f 90       	pop	r0
    1812:	0f 90       	pop	r0
    1814:	0f 90       	pop	r0
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	08 95       	ret

0000181c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    181c:	df 93       	push	r29
    181e:	cf 93       	push	r28
    1820:	00 d0       	rcall	.+0      	; 0x1822 <GPIO_writePin+0x6>
    1822:	00 d0       	rcall	.+0      	; 0x1824 <GPIO_writePin+0x8>
    1824:	0f 92       	push	r0
    1826:	cd b7       	in	r28, 0x3d	; 61
    1828:	de b7       	in	r29, 0x3e	; 62
    182a:	89 83       	std	Y+1, r24	; 0x01
    182c:	6a 83       	std	Y+2, r22	; 0x02
    182e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1830:	8a 81       	ldd	r24, Y+2	; 0x02
    1832:	88 30       	cpi	r24, 0x08	; 8
    1834:	08 f0       	brcs	.+2      	; 0x1838 <GPIO_writePin+0x1c>
    1836:	d5 c0       	rjmp	.+426    	; 0x19e2 <GPIO_writePin+0x1c6>
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	84 30       	cpi	r24, 0x04	; 4
    183c:	08 f0       	brcs	.+2      	; 0x1840 <GPIO_writePin+0x24>
    183e:	d1 c0       	rjmp	.+418    	; 0x19e2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	3d 83       	std	Y+5, r19	; 0x05
    1848:	2c 83       	std	Y+4, r18	; 0x04
    184a:	8c 81       	ldd	r24, Y+4	; 0x04
    184c:	9d 81       	ldd	r25, Y+5	; 0x05
    184e:	81 30       	cpi	r24, 0x01	; 1
    1850:	91 05       	cpc	r25, r1
    1852:	09 f4       	brne	.+2      	; 0x1856 <GPIO_writePin+0x3a>
    1854:	43 c0       	rjmp	.+134    	; 0x18dc <GPIO_writePin+0xc0>
    1856:	2c 81       	ldd	r18, Y+4	; 0x04
    1858:	3d 81       	ldd	r19, Y+5	; 0x05
    185a:	22 30       	cpi	r18, 0x02	; 2
    185c:	31 05       	cpc	r19, r1
    185e:	2c f4       	brge	.+10     	; 0x186a <GPIO_writePin+0x4e>
    1860:	8c 81       	ldd	r24, Y+4	; 0x04
    1862:	9d 81       	ldd	r25, Y+5	; 0x05
    1864:	00 97       	sbiw	r24, 0x00	; 0
    1866:	71 f0       	breq	.+28     	; 0x1884 <GPIO_writePin+0x68>
    1868:	bc c0       	rjmp	.+376    	; 0x19e2 <GPIO_writePin+0x1c6>
    186a:	2c 81       	ldd	r18, Y+4	; 0x04
    186c:	3d 81       	ldd	r19, Y+5	; 0x05
    186e:	22 30       	cpi	r18, 0x02	; 2
    1870:	31 05       	cpc	r19, r1
    1872:	09 f4       	brne	.+2      	; 0x1876 <GPIO_writePin+0x5a>
    1874:	5f c0       	rjmp	.+190    	; 0x1934 <GPIO_writePin+0x118>
    1876:	8c 81       	ldd	r24, Y+4	; 0x04
    1878:	9d 81       	ldd	r25, Y+5	; 0x05
    187a:	83 30       	cpi	r24, 0x03	; 3
    187c:	91 05       	cpc	r25, r1
    187e:	09 f4       	brne	.+2      	; 0x1882 <GPIO_writePin+0x66>
    1880:	85 c0       	rjmp	.+266    	; 0x198c <GPIO_writePin+0x170>
    1882:	af c0       	rjmp	.+350    	; 0x19e2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	81 30       	cpi	r24, 0x01	; 1
    1888:	a1 f4       	brne	.+40     	; 0x18b2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    188a:	ab e3       	ldi	r26, 0x3B	; 59
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	eb e3       	ldi	r30, 0x3B	; 59
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	48 2f       	mov	r20, r24
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	28 2f       	mov	r18, r24
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	81 e0       	ldi	r24, 0x01	; 1
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	02 2e       	mov	r0, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <GPIO_writePin+0x8c>
    18a4:	88 0f       	add	r24, r24
    18a6:	99 1f       	adc	r25, r25
    18a8:	0a 94       	dec	r0
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <GPIO_writePin+0x88>
    18ac:	84 2b       	or	r24, r20
    18ae:	8c 93       	st	X, r24
    18b0:	98 c0       	rjmp	.+304    	; 0x19e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    18b2:	ab e3       	ldi	r26, 0x3B	; 59
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	eb e3       	ldi	r30, 0x3B	; 59
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	48 2f       	mov	r20, r24
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	81 e0       	ldi	r24, 0x01	; 1
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	02 2e       	mov	r0, r18
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <GPIO_writePin+0xb4>
    18cc:	88 0f       	add	r24, r24
    18ce:	99 1f       	adc	r25, r25
    18d0:	0a 94       	dec	r0
    18d2:	e2 f7       	brpl	.-8      	; 0x18cc <GPIO_writePin+0xb0>
    18d4:	80 95       	com	r24
    18d6:	84 23       	and	r24, r20
    18d8:	8c 93       	st	X, r24
    18da:	83 c0       	rjmp	.+262    	; 0x19e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	81 30       	cpi	r24, 0x01	; 1
    18e0:	a1 f4       	brne	.+40     	; 0x190a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    18e2:	a8 e3       	ldi	r26, 0x38	; 56
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	e8 e3       	ldi	r30, 0x38	; 56
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	48 2f       	mov	r20, r24
    18ee:	8a 81       	ldd	r24, Y+2	; 0x02
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	02 2e       	mov	r0, r18
    18fa:	02 c0       	rjmp	.+4      	; 0x1900 <GPIO_writePin+0xe4>
    18fc:	88 0f       	add	r24, r24
    18fe:	99 1f       	adc	r25, r25
    1900:	0a 94       	dec	r0
    1902:	e2 f7       	brpl	.-8      	; 0x18fc <GPIO_writePin+0xe0>
    1904:	84 2b       	or	r24, r20
    1906:	8c 93       	st	X, r24
    1908:	6c c0       	rjmp	.+216    	; 0x19e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    190a:	a8 e3       	ldi	r26, 0x38	; 56
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e8 e3       	ldi	r30, 0x38	; 56
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	48 2f       	mov	r20, r24
    1916:	8a 81       	ldd	r24, Y+2	; 0x02
    1918:	28 2f       	mov	r18, r24
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	02 2e       	mov	r0, r18
    1922:	02 c0       	rjmp	.+4      	; 0x1928 <GPIO_writePin+0x10c>
    1924:	88 0f       	add	r24, r24
    1926:	99 1f       	adc	r25, r25
    1928:	0a 94       	dec	r0
    192a:	e2 f7       	brpl	.-8      	; 0x1924 <GPIO_writePin+0x108>
    192c:	80 95       	com	r24
    192e:	84 23       	and	r24, r20
    1930:	8c 93       	st	X, r24
    1932:	57 c0       	rjmp	.+174    	; 0x19e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1934:	8b 81       	ldd	r24, Y+3	; 0x03
    1936:	81 30       	cpi	r24, 0x01	; 1
    1938:	a1 f4       	brne	.+40     	; 0x1962 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    193a:	a5 e3       	ldi	r26, 0x35	; 53
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e5 e3       	ldi	r30, 0x35	; 53
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	48 2f       	mov	r20, r24
    1946:	8a 81       	ldd	r24, Y+2	; 0x02
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	81 e0       	ldi	r24, 0x01	; 1
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	02 2e       	mov	r0, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <GPIO_writePin+0x13c>
    1954:	88 0f       	add	r24, r24
    1956:	99 1f       	adc	r25, r25
    1958:	0a 94       	dec	r0
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <GPIO_writePin+0x138>
    195c:	84 2b       	or	r24, r20
    195e:	8c 93       	st	X, r24
    1960:	40 c0       	rjmp	.+128    	; 0x19e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1962:	a5 e3       	ldi	r26, 0x35	; 53
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e5 e3       	ldi	r30, 0x35	; 53
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	48 2f       	mov	r20, r24
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	02 2e       	mov	r0, r18
    197a:	02 c0       	rjmp	.+4      	; 0x1980 <GPIO_writePin+0x164>
    197c:	88 0f       	add	r24, r24
    197e:	99 1f       	adc	r25, r25
    1980:	0a 94       	dec	r0
    1982:	e2 f7       	brpl	.-8      	; 0x197c <GPIO_writePin+0x160>
    1984:	80 95       	com	r24
    1986:	84 23       	and	r24, r20
    1988:	8c 93       	st	X, r24
    198a:	2b c0       	rjmp	.+86     	; 0x19e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    198c:	8b 81       	ldd	r24, Y+3	; 0x03
    198e:	81 30       	cpi	r24, 0x01	; 1
    1990:	a1 f4       	brne	.+40     	; 0x19ba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1992:	a2 e3       	ldi	r26, 0x32	; 50
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e2 e3       	ldi	r30, 0x32	; 50
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	48 2f       	mov	r20, r24
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	02 2e       	mov	r0, r18
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <GPIO_writePin+0x194>
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	0a 94       	dec	r0
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <GPIO_writePin+0x190>
    19b4:	84 2b       	or	r24, r20
    19b6:	8c 93       	st	X, r24
    19b8:	14 c0       	rjmp	.+40     	; 0x19e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    19ba:	a2 e3       	ldi	r26, 0x32	; 50
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e2 e3       	ldi	r30, 0x32	; 50
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	48 2f       	mov	r20, r24
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 2e       	mov	r0, r18
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <GPIO_writePin+0x1bc>
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	0a 94       	dec	r0
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <GPIO_writePin+0x1b8>
    19dc:	80 95       	com	r24
    19de:	84 23       	and	r24, r20
    19e0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <GPIO_readPin+0x6>
    19f8:	00 d0       	rcall	.+0      	; 0x19fa <GPIO_readPin+0x8>
    19fa:	0f 92       	push	r0
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	8a 83       	std	Y+2, r24	; 0x02
    1a02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1a04:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	88 30       	cpi	r24, 0x08	; 8
    1a0a:	08 f0       	brcs	.+2      	; 0x1a0e <GPIO_readPin+0x1c>
    1a0c:	84 c0       	rjmp	.+264    	; 0x1b16 <GPIO_readPin+0x124>
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	84 30       	cpi	r24, 0x04	; 4
    1a12:	08 f0       	brcs	.+2      	; 0x1a16 <GPIO_readPin+0x24>
    1a14:	80 c0       	rjmp	.+256    	; 0x1b16 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1a16:	8a 81       	ldd	r24, Y+2	; 0x02
    1a18:	28 2f       	mov	r18, r24
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	3d 83       	std	Y+5, r19	; 0x05
    1a1e:	2c 83       	std	Y+4, r18	; 0x04
    1a20:	4c 81       	ldd	r20, Y+4	; 0x04
    1a22:	5d 81       	ldd	r21, Y+5	; 0x05
    1a24:	41 30       	cpi	r20, 0x01	; 1
    1a26:	51 05       	cpc	r21, r1
    1a28:	79 f1       	breq	.+94     	; 0x1a88 <GPIO_readPin+0x96>
    1a2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a2e:	82 30       	cpi	r24, 0x02	; 2
    1a30:	91 05       	cpc	r25, r1
    1a32:	34 f4       	brge	.+12     	; 0x1a40 <GPIO_readPin+0x4e>
    1a34:	2c 81       	ldd	r18, Y+4	; 0x04
    1a36:	3d 81       	ldd	r19, Y+5	; 0x05
    1a38:	21 15       	cp	r18, r1
    1a3a:	31 05       	cpc	r19, r1
    1a3c:	69 f0       	breq	.+26     	; 0x1a58 <GPIO_readPin+0x66>
    1a3e:	6b c0       	rjmp	.+214    	; 0x1b16 <GPIO_readPin+0x124>
    1a40:	4c 81       	ldd	r20, Y+4	; 0x04
    1a42:	5d 81       	ldd	r21, Y+5	; 0x05
    1a44:	42 30       	cpi	r20, 0x02	; 2
    1a46:	51 05       	cpc	r21, r1
    1a48:	b9 f1       	breq	.+110    	; 0x1ab8 <GPIO_readPin+0xc6>
    1a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a4e:	83 30       	cpi	r24, 0x03	; 3
    1a50:	91 05       	cpc	r25, r1
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <GPIO_readPin+0x64>
    1a54:	49 c0       	rjmp	.+146    	; 0x1ae8 <GPIO_readPin+0xf6>
    1a56:	5f c0       	rjmp	.+190    	; 0x1b16 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1a58:	e9 e3       	ldi	r30, 0x39	; 57
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	88 2f       	mov	r24, r24
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	a9 01       	movw	r20, r18
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <GPIO_readPin+0x7e>
    1a6c:	55 95       	asr	r21
    1a6e:	47 95       	ror	r20
    1a70:	8a 95       	dec	r24
    1a72:	e2 f7       	brpl	.-8      	; 0x1a6c <GPIO_readPin+0x7a>
    1a74:	ca 01       	movw	r24, r20
    1a76:	81 70       	andi	r24, 0x01	; 1
    1a78:	90 70       	andi	r25, 0x00	; 0
    1a7a:	88 23       	and	r24, r24
    1a7c:	19 f0       	breq	.+6      	; 0x1a84 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	89 83       	std	Y+1, r24	; 0x01
    1a82:	49 c0       	rjmp	.+146    	; 0x1b16 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a84:	19 82       	std	Y+1, r1	; 0x01
    1a86:	47 c0       	rjmp	.+142    	; 0x1b16 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a88:	e6 e3       	ldi	r30, 0x36	; 54
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	88 2f       	mov	r24, r24
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a9 01       	movw	r20, r18
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <GPIO_readPin+0xae>
    1a9c:	55 95       	asr	r21
    1a9e:	47 95       	ror	r20
    1aa0:	8a 95       	dec	r24
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <GPIO_readPin+0xaa>
    1aa4:	ca 01       	movw	r24, r20
    1aa6:	81 70       	andi	r24, 0x01	; 1
    1aa8:	90 70       	andi	r25, 0x00	; 0
    1aaa:	88 23       	and	r24, r24
    1aac:	19 f0       	breq	.+6      	; 0x1ab4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	31 c0       	rjmp	.+98     	; 0x1b16 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ab4:	19 82       	std	Y+1, r1	; 0x01
    1ab6:	2f c0       	rjmp	.+94     	; 0x1b16 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1ab8:	e3 e3       	ldi	r30, 0x33	; 51
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	88 2f       	mov	r24, r24
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	a9 01       	movw	r20, r18
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <GPIO_readPin+0xde>
    1acc:	55 95       	asr	r21
    1ace:	47 95       	ror	r20
    1ad0:	8a 95       	dec	r24
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <GPIO_readPin+0xda>
    1ad4:	ca 01       	movw	r24, r20
    1ad6:	81 70       	andi	r24, 0x01	; 1
    1ad8:	90 70       	andi	r25, 0x00	; 0
    1ada:	88 23       	and	r24, r24
    1adc:	19 f0       	breq	.+6      	; 0x1ae4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	19 c0       	rjmp	.+50     	; 0x1b16 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ae4:	19 82       	std	Y+1, r1	; 0x01
    1ae6:	17 c0       	rjmp	.+46     	; 0x1b16 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1ae8:	e0 e3       	ldi	r30, 0x30	; 48
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	28 2f       	mov	r18, r24
    1af0:	30 e0       	ldi	r19, 0x00	; 0
    1af2:	8b 81       	ldd	r24, Y+3	; 0x03
    1af4:	88 2f       	mov	r24, r24
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	a9 01       	movw	r20, r18
    1afa:	02 c0       	rjmp	.+4      	; 0x1b00 <GPIO_readPin+0x10e>
    1afc:	55 95       	asr	r21
    1afe:	47 95       	ror	r20
    1b00:	8a 95       	dec	r24
    1b02:	e2 f7       	brpl	.-8      	; 0x1afc <GPIO_readPin+0x10a>
    1b04:	ca 01       	movw	r24, r20
    1b06:	81 70       	andi	r24, 0x01	; 1
    1b08:	90 70       	andi	r25, 0x00	; 0
    1b0a:	88 23       	and	r24, r24
    1b0c:	19 f0       	breq	.+6      	; 0x1b14 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1b0e:	81 e0       	ldi	r24, 0x01	; 1
    1b10:	89 83       	std	Y+1, r24	; 0x01
    1b12:	01 c0       	rjmp	.+2      	; 0x1b16 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b14:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1b16:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	cf 91       	pop	r28
    1b24:	df 91       	pop	r29
    1b26:	08 95       	ret

00001b28 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1b28:	df 93       	push	r29
    1b2a:	cf 93       	push	r28
    1b2c:	00 d0       	rcall	.+0      	; 0x1b2e <GPIO_setupPortDirection+0x6>
    1b2e:	00 d0       	rcall	.+0      	; 0x1b30 <GPIO_setupPortDirection+0x8>
    1b30:	cd b7       	in	r28, 0x3d	; 61
    1b32:	de b7       	in	r29, 0x3e	; 62
    1b34:	89 83       	std	Y+1, r24	; 0x01
    1b36:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	84 30       	cpi	r24, 0x04	; 4
    1b3c:	90 f5       	brcc	.+100    	; 0x1ba2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	3c 83       	std	Y+4, r19	; 0x04
    1b46:	2b 83       	std	Y+3, r18	; 0x03
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4c:	81 30       	cpi	r24, 0x01	; 1
    1b4e:	91 05       	cpc	r25, r1
    1b50:	d1 f0       	breq	.+52     	; 0x1b86 <GPIO_setupPortDirection+0x5e>
    1b52:	2b 81       	ldd	r18, Y+3	; 0x03
    1b54:	3c 81       	ldd	r19, Y+4	; 0x04
    1b56:	22 30       	cpi	r18, 0x02	; 2
    1b58:	31 05       	cpc	r19, r1
    1b5a:	2c f4       	brge	.+10     	; 0x1b66 <GPIO_setupPortDirection+0x3e>
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	61 f0       	breq	.+24     	; 0x1b7c <GPIO_setupPortDirection+0x54>
    1b64:	1e c0       	rjmp	.+60     	; 0x1ba2 <GPIO_setupPortDirection+0x7a>
    1b66:	2b 81       	ldd	r18, Y+3	; 0x03
    1b68:	3c 81       	ldd	r19, Y+4	; 0x04
    1b6a:	22 30       	cpi	r18, 0x02	; 2
    1b6c:	31 05       	cpc	r19, r1
    1b6e:	81 f0       	breq	.+32     	; 0x1b90 <GPIO_setupPortDirection+0x68>
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	9c 81       	ldd	r25, Y+4	; 0x04
    1b74:	83 30       	cpi	r24, 0x03	; 3
    1b76:	91 05       	cpc	r25, r1
    1b78:	81 f0       	breq	.+32     	; 0x1b9a <GPIO_setupPortDirection+0x72>
    1b7a:	13 c0       	rjmp	.+38     	; 0x1ba2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b7c:	ea e3       	ldi	r30, 0x3A	; 58
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	80 83       	st	Z, r24
    1b84:	0e c0       	rjmp	.+28     	; 0x1ba2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1b86:	e7 e3       	ldi	r30, 0x37	; 55
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	80 83       	st	Z, r24
    1b8e:	09 c0       	rjmp	.+18     	; 0x1ba2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b90:	e4 e3       	ldi	r30, 0x34	; 52
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	8a 81       	ldd	r24, Y+2	; 0x02
    1b96:	80 83       	st	Z, r24
    1b98:	04 c0       	rjmp	.+8      	; 0x1ba2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b9a:	e1 e3       	ldi	r30, 0x31	; 49
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ba2:	0f 90       	pop	r0
    1ba4:	0f 90       	pop	r0
    1ba6:	0f 90       	pop	r0
    1ba8:	0f 90       	pop	r0
    1baa:	cf 91       	pop	r28
    1bac:	df 91       	pop	r29
    1bae:	08 95       	ret

00001bb0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <GPIO_writePort+0x6>
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <GPIO_writePort+0x8>
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	89 83       	std	Y+1, r24	; 0x01
    1bbe:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	84 30       	cpi	r24, 0x04	; 4
    1bc4:	90 f5       	brcc	.+100    	; 0x1c2a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	28 2f       	mov	r18, r24
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	3c 83       	std	Y+4, r19	; 0x04
    1bce:	2b 83       	std	Y+3, r18	; 0x03
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd4:	81 30       	cpi	r24, 0x01	; 1
    1bd6:	91 05       	cpc	r25, r1
    1bd8:	d1 f0       	breq	.+52     	; 0x1c0e <GPIO_writePort+0x5e>
    1bda:	2b 81       	ldd	r18, Y+3	; 0x03
    1bdc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bde:	22 30       	cpi	r18, 0x02	; 2
    1be0:	31 05       	cpc	r19, r1
    1be2:	2c f4       	brge	.+10     	; 0x1bee <GPIO_writePort+0x3e>
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	9c 81       	ldd	r25, Y+4	; 0x04
    1be8:	00 97       	sbiw	r24, 0x00	; 0
    1bea:	61 f0       	breq	.+24     	; 0x1c04 <GPIO_writePort+0x54>
    1bec:	1e c0       	rjmp	.+60     	; 0x1c2a <GPIO_writePort+0x7a>
    1bee:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf0:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf2:	22 30       	cpi	r18, 0x02	; 2
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	81 f0       	breq	.+32     	; 0x1c18 <GPIO_writePort+0x68>
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	83 30       	cpi	r24, 0x03	; 3
    1bfe:	91 05       	cpc	r25, r1
    1c00:	81 f0       	breq	.+32     	; 0x1c22 <GPIO_writePort+0x72>
    1c02:	13 c0       	rjmp	.+38     	; 0x1c2a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1c04:	eb e3       	ldi	r30, 0x3B	; 59
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	80 83       	st	Z, r24
    1c0c:	0e c0       	rjmp	.+28     	; 0x1c2a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1c0e:	e8 e3       	ldi	r30, 0x38	; 56
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	80 83       	st	Z, r24
    1c16:	09 c0       	rjmp	.+18     	; 0x1c2a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1c18:	e5 e3       	ldi	r30, 0x35	; 53
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1e:	80 83       	st	Z, r24
    1c20:	04 c0       	rjmp	.+8      	; 0x1c2a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1c22:	e2 e3       	ldi	r30, 0x32	; 50
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <GPIO_readPort+0x6>
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <GPIO_readPort+0x8>
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1c46:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	84 30       	cpi	r24, 0x04	; 4
    1c4c:	90 f5       	brcc	.+100    	; 0x1cb2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c50:	28 2f       	mov	r18, r24
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	3c 83       	std	Y+4, r19	; 0x04
    1c56:	2b 83       	std	Y+3, r18	; 0x03
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	81 30       	cpi	r24, 0x01	; 1
    1c5e:	91 05       	cpc	r25, r1
    1c60:	d1 f0       	breq	.+52     	; 0x1c96 <GPIO_readPort+0x5e>
    1c62:	2b 81       	ldd	r18, Y+3	; 0x03
    1c64:	3c 81       	ldd	r19, Y+4	; 0x04
    1c66:	22 30       	cpi	r18, 0x02	; 2
    1c68:	31 05       	cpc	r19, r1
    1c6a:	2c f4       	brge	.+10     	; 0x1c76 <GPIO_readPort+0x3e>
    1c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	61 f0       	breq	.+24     	; 0x1c8c <GPIO_readPort+0x54>
    1c74:	1e c0       	rjmp	.+60     	; 0x1cb2 <GPIO_readPort+0x7a>
    1c76:	2b 81       	ldd	r18, Y+3	; 0x03
    1c78:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7a:	22 30       	cpi	r18, 0x02	; 2
    1c7c:	31 05       	cpc	r19, r1
    1c7e:	81 f0       	breq	.+32     	; 0x1ca0 <GPIO_readPort+0x68>
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	9c 81       	ldd	r25, Y+4	; 0x04
    1c84:	83 30       	cpi	r24, 0x03	; 3
    1c86:	91 05       	cpc	r25, r1
    1c88:	81 f0       	breq	.+32     	; 0x1caa <GPIO_readPort+0x72>
    1c8a:	13 c0       	rjmp	.+38     	; 0x1cb2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1c8c:	e9 e3       	ldi	r30, 0x39	; 57
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	80 81       	ld	r24, Z
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	0e c0       	rjmp	.+28     	; 0x1cb2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1c96:	e6 e3       	ldi	r30, 0x36	; 54
    1c98:	f0 e0       	ldi	r31, 0x00	; 0
    1c9a:	80 81       	ld	r24, Z
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	09 c0       	rjmp	.+18     	; 0x1cb2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1ca0:	e3 e3       	ldi	r30, 0x33	; 51
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	04 c0       	rjmp	.+8      	; 0x1cb2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1caa:	e0 e3       	ldi	r30, 0x30	; 48
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cb4:	0f 90       	pop	r0
    1cb6:	0f 90       	pop	r0
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	cf 91       	pop	r28
    1cbe:	df 91       	pop	r29
    1cc0:	08 95       	ret

00001cc2 <TWI_init>:
#include "i2c.h"
/****************************************************************************
 * 							Function Definitions
 ****************************************************************************/
void TWI_init(TWI_CONFIG* config)
{
    1cc2:	0f 93       	push	r16
    1cc4:	1f 93       	push	r17
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <TWI_init+0xa>
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	9a 83       	std	Y+2, r25	; 0x02
    1cd2:	89 83       	std	Y+1, r24	; 0x01

	TWBR = (((F_CPU)/(config->bit_rate))-16)*(0.5);
    1cd4:	00 e2       	ldi	r16, 0x20	; 32
    1cd6:	10 e0       	ldi	r17, 0x00	; 0
    1cd8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cda:	fa 81       	ldd	r31, Y+2	; 0x02
    1cdc:	21 81       	ldd	r18, Z+1	; 0x01
    1cde:	32 81       	ldd	r19, Z+2	; 0x02
    1ce0:	43 81       	ldd	r20, Z+3	; 0x03
    1ce2:	54 81       	ldd	r21, Z+4	; 0x04
    1ce4:	80 e4       	ldi	r24, 0x40	; 64
    1ce6:	92 e4       	ldi	r25, 0x42	; 66
    1ce8:	af e0       	ldi	r26, 0x0F	; 15
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	bc 01       	movw	r22, r24
    1cee:	cd 01       	movw	r24, r26
    1cf0:	0e 94 32 11 	call	0x2264	; 0x2264 <__udivmodsi4>
    1cf4:	da 01       	movw	r26, r20
    1cf6:	c9 01       	movw	r24, r18
    1cf8:	40 97       	sbiw	r24, 0x10	; 16
    1cfa:	a1 09       	sbc	r26, r1
    1cfc:	b1 09       	sbc	r27, r1
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	bc 01       	movw	r22, r24
    1d0c:	cd 01       	movw	r24, r26
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e0       	ldi	r20, 0x00	; 0
    1d14:	5f e3       	ldi	r21, 0x3F	; 63
    1d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	bc 01       	movw	r22, r24
    1d20:	cd 01       	movw	r24, r26
    1d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	f8 01       	movw	r30, r16
    1d2c:	80 83       	st	Z, r24
	TWSR = 0x00;
    1d2e:	e1 e2       	ldi	r30, 0x21	; 33
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	10 82       	st	Z, r1
	TWAR = config->address<<1;
    1d34:	a2 e2       	ldi	r26, 0x22	; 34
    1d36:	b0 e0       	ldi	r27, 0x00	; 0
    1d38:	e9 81       	ldd	r30, Y+1	; 0x01
    1d3a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d3c:	80 81       	ld	r24, Z
    1d3e:	88 0f       	add	r24, r24
    1d40:	8c 93       	st	X, r24
	TWCR=(1<<TWEN);
    1d42:	e6 e5       	ldi	r30, 0x56	; 86
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	84 e0       	ldi	r24, 0x04	; 4
    1d48:	80 83       	st	Z, r24
}
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	cf 91       	pop	r28
    1d50:	df 91       	pop	r29
    1d52:	1f 91       	pop	r17
    1d54:	0f 91       	pop	r16
    1d56:	08 95       	ret

00001d58 <TWI_start>:

void TWI_start()
{
    1d58:	df 93       	push	r29
    1d5a:	cf 93       	push	r28
    1d5c:	cd b7       	in	r28, 0x3d	; 61
    1d5e:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    1d60:	e6 e5       	ldi	r30, 0x56	; 86
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	84 ea       	ldi	r24, 0xA4	; 164
    1d66:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1d68:	e6 e5       	ldi	r30, 0x56	; 86
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	88 23       	and	r24, r24
    1d70:	dc f7       	brge	.-10     	; 0x1d68 <TWI_start+0x10>
}
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	08 95       	ret

00001d78 <TWI_stop>:

void TWI_stop()
{
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    1d80:	e6 e5       	ldi	r30, 0x56	; 86
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	84 e9       	ldi	r24, 0x94	; 148
    1d86:	80 83       	st	Z, r24
}
    1d88:	cf 91       	pop	r28
    1d8a:	df 91       	pop	r29
    1d8c:	08 95       	ret

00001d8e <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1d8e:	df 93       	push	r29
    1d90:	cf 93       	push	r28
    1d92:	0f 92       	push	r0
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	89 83       	std	Y+1, r24	; 0x01
	TWDR=data;
    1d9a:	e3 e2       	ldi	r30, 0x23	; 35
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	89 81       	ldd	r24, Y+1	; 0x01
    1da0:	80 83       	st	Z, r24
	TWCR=(1<<TWINT)|(1<<TWEN);
    1da2:	e6 e5       	ldi	r30, 0x56	; 86
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	84 e8       	ldi	r24, 0x84	; 132
    1da8:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1daa:	e6 e5       	ldi	r30, 0x56	; 86
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	80 81       	ld	r24, Z
    1db0:	88 23       	and	r24, r24
    1db2:	dc f7       	brge	.-10     	; 0x1daa <TWI_writeByte+0x1c>
}
    1db4:	0f 90       	pop	r0
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	08 95       	ret

00001dbc <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK()
{
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	cd b7       	in	r28, 0x3d	; 61
    1dc2:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    1dc4:	e6 e5       	ldi	r30, 0x56	; 86
    1dc6:	f0 e0       	ldi	r31, 0x00	; 0
    1dc8:	84 ec       	ldi	r24, 0xC4	; 196
    1dca:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1dcc:	e6 e5       	ldi	r30, 0x56	; 86
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	88 23       	and	r24, r24
    1dd4:	dc f7       	brge	.-10     	; 0x1dcc <TWI_readByteWithACK+0x10>
	return TWDR;
    1dd6:	e3 e2       	ldi	r30, 0x23	; 35
    1dd8:	f0 e0       	ldi	r31, 0x00	; 0
    1dda:	80 81       	ld	r24, Z
}
    1ddc:	cf 91       	pop	r28
    1dde:	df 91       	pop	r29
    1de0:	08 95       	ret

00001de2 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK()
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
	TWCR=(1<<TWINT)|(1<<TWEN);
    1dea:	e6 e5       	ldi	r30, 0x56	; 86
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	84 e8       	ldi	r24, 0x84	; 132
    1df0:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1df2:	e6 e5       	ldi	r30, 0x56	; 86
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	88 23       	and	r24, r24
    1dfa:	dc f7       	brge	.-10     	; 0x1df2 <TWI_readByteWithNACK+0x10>
	return TWDR;
    1dfc:	e3 e2       	ldi	r30, 0x23	; 35
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
}
    1e02:	cf 91       	pop	r28
    1e04:	df 91       	pop	r29
    1e06:	08 95       	ret

00001e08 <TWI_getStatus>:

uint8 TWI_getStatus()
{
    1e08:	df 93       	push	r29
    1e0a:	cf 93       	push	r28
    1e0c:	0f 92       	push	r0
    1e0e:	cd b7       	in	r28, 0x3d	; 61
    1e10:	de b7       	in	r29, 0x3e	; 62
	uint8 status=0;
    1e12:	19 82       	std	Y+1, r1	; 0x01
	status=TWSR & 0xF8;
    1e14:	e1 e2       	ldi	r30, 0x21	; 33
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	80 81       	ld	r24, Z
    1e1a:	88 7f       	andi	r24, 0xF8	; 248
    1e1c:	89 83       	std	Y+1, r24	; 0x01
	return status;
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e20:	0f 90       	pop	r0
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <Timer0_init>:

static volatile void (*g_t_0_ovf_callBackPtr)(void) = NULL_PTR; /*Timer0,overflow mode*/
static volatile void (*g_t_0_ctc_callBackPtr)(void) = NULL_PTR; /*Timer0,compare mode*/

void Timer0_init(Timer_Config* config)
{
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	00 d0       	rcall	.+0      	; 0x1e2e <Timer0_init+0x6>
    1e2e:	cd b7       	in	r28, 0x3d	; 61
    1e30:	de b7       	in	r29, 0x3e	; 62
    1e32:	9a 83       	std	Y+2, r25	; 0x02
    1e34:	89 83       	std	Y+1, r24	; 0x01
	/*Configure the timer to work in a non-PWM mode*/
	TCCR0=(1<<FOC0);
    1e36:	e3 e5       	ldi	r30, 0x53	; 83
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 e8       	ldi	r24, 0x80	; 128
    1e3c:	80 83       	st	Z, r24

	/*Configure the timer clock prescaler*/
	TCCR0=(TCCR0 & 0xF8) | (config->prescaler & 0x07);
    1e3e:	a3 e5       	ldi	r26, 0x53	; 83
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e3 e5       	ldi	r30, 0x53	; 83
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	98 2f       	mov	r25, r24
    1e4a:	98 7f       	andi	r25, 0xF8	; 248
    1e4c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e4e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e50:	81 81       	ldd	r24, Z+1	; 0x01
    1e52:	87 70       	andi	r24, 0x07	; 7
    1e54:	89 2b       	or	r24, r25
    1e56:	8c 93       	st	X, r24

	/*Set timer initial value*/
	TCNT0=config->Initial_value;
    1e58:	a2 e5       	ldi	r26, 0x52	; 82
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e60:	82 81       	ldd	r24, Z+2	; 0x02
    1e62:	8c 93       	st	X, r24
	/*Configure the timer to work in the Normal mode:
	 * WGM00=0 & WGM01=0
	 * COM00=0 & COM01=0
	 * Enable Timer Overflow Interrupt TOIE0=1
	 */
	TIMSK|=config->N_INT & 0x01;
    1e64:	a9 e5       	ldi	r26, 0x59	; 89
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	e9 e5       	ldi	r30, 0x59	; 89
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	98 2f       	mov	r25, r24
    1e70:	e9 81       	ldd	r30, Y+1	; 0x01
    1e72:	fa 81       	ldd	r31, Y+2	; 0x02
    1e74:	84 81       	ldd	r24, Z+4	; 0x04
    1e76:	81 70       	andi	r24, 0x01	; 1
    1e78:	89 2b       	or	r24, r25
    1e7a:	8c 93       	st	X, r24
	 * WGM00=0 & WGM01=1
	 * COM00=0 & COM01=0
	 * Set timer compare match value OCR0
	 * Enable Timer output compare match Interrupt OCIE0=1
	 */
	TCCR0=(TCCR0 & 0xF7)|((config->mode & 0x02)<<2);
    1e7c:	a3 e5       	ldi	r26, 0x53	; 83
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e3 e5       	ldi	r30, 0x53	; 83
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	28 2f       	mov	r18, r24
    1e88:	27 7f       	andi	r18, 0xF7	; 247
    1e8a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e8c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e8e:	80 81       	ld	r24, Z
    1e90:	88 2f       	mov	r24, r24
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	82 70       	andi	r24, 0x02	; 2
    1e96:	90 70       	andi	r25, 0x00	; 0
    1e98:	88 0f       	add	r24, r24
    1e9a:	99 1f       	adc	r25, r25
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	82 2b       	or	r24, r18
    1ea2:	8c 93       	st	X, r24
	OCR0=config->Compare_value;
    1ea4:	ac e5       	ldi	r26, 0x5C	; 92
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e9 81       	ldd	r30, Y+1	; 0x01
    1eaa:	fa 81       	ldd	r31, Y+2	; 0x02
    1eac:	83 81       	ldd	r24, Z+3	; 0x03
    1eae:	8c 93       	st	X, r24
	TIMSK|=(config->CTC_INT & 0x01)<<1;
    1eb0:	a9 e5       	ldi	r26, 0x59	; 89
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e9 e5       	ldi	r30, 0x59	; 89
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	28 2f       	mov	r18, r24
    1ebc:	e9 81       	ldd	r30, Y+1	; 0x01
    1ebe:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec0:	85 81       	ldd	r24, Z+5	; 0x05
    1ec2:	88 2f       	mov	r24, r24
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	81 70       	andi	r24, 0x01	; 1
    1ec8:	90 70       	andi	r25, 0x00	; 0
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	82 2b       	or	r24, r18
    1ed0:	8c 93       	st	X, r24
}
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <Timer0_Ovf_setCallBack>:

void Timer0_Ovf_setCallBack(void(*a_t0_ovf_ptr)(void))
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <Timer0_Ovf_setCallBack+0x6>
    1ee2:	cd b7       	in	r28, 0x3d	; 61
    1ee4:	de b7       	in	r29, 0x3e	; 62
    1ee6:	9a 83       	std	Y+2, r25	; 0x02
    1ee8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_t_0_ovf_callBackPtr = a_t0_ovf_ptr;
    1eea:	89 81       	ldd	r24, Y+1	; 0x01
    1eec:	9a 81       	ldd	r25, Y+2	; 0x02
    1eee:	90 93 85 01 	sts	0x0185, r25
    1ef2:	80 93 84 01 	sts	0x0184, r24
}
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <Timer0_CTC_setCallBack>:

/*Function to set the Call Back function address for Timer0, compare mode*/
void Timer0_CTC_setCallBack(void(*a_t0_ctc_ptr)(void))
{
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <Timer0_CTC_setCallBack+0x6>
    1f06:	cd b7       	in	r28, 0x3d	; 61
    1f08:	de b7       	in	r29, 0x3e	; 62
    1f0a:	9a 83       	std	Y+2, r25	; 0x02
    1f0c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_t_0_ctc_callBackPtr = a_t0_ctc_ptr;
    1f0e:	89 81       	ldd	r24, Y+1	; 0x01
    1f10:	9a 81       	ldd	r25, Y+2	; 0x02
    1f12:	90 93 87 01 	sts	0x0187, r25
    1f16:	80 93 86 01 	sts	0x0186, r24
}
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	cf 91       	pop	r28
    1f20:	df 91       	pop	r29
    1f22:	08 95       	ret

00001f24 <Timer0_DeInit>:
void Timer0_DeInit()
{
    1f24:	df 93       	push	r29
    1f26:	cf 93       	push	r28
    1f28:	cd b7       	in	r28, 0x3d	; 61
    1f2a:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    1f2c:	e3 e5       	ldi	r30, 0x53	; 83
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	10 82       	st	Z, r1
	TCNT0=0;
    1f32:	e2 e5       	ldi	r30, 0x52	; 82
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	10 82       	st	Z, r1
}
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <__vector_9>:
/******************************************************************************
 * 							Interrupt service routines
 ******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    1f3e:	1f 92       	push	r1
    1f40:	0f 92       	push	r0
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	0f 92       	push	r0
    1f46:	11 24       	eor	r1, r1
    1f48:	2f 93       	push	r18
    1f4a:	3f 93       	push	r19
    1f4c:	4f 93       	push	r20
    1f4e:	5f 93       	push	r21
    1f50:	6f 93       	push	r22
    1f52:	7f 93       	push	r23
    1f54:	8f 93       	push	r24
    1f56:	9f 93       	push	r25
    1f58:	af 93       	push	r26
    1f5a:	bf 93       	push	r27
    1f5c:	ef 93       	push	r30
    1f5e:	ff 93       	push	r31
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
	if(g_t_0_ovf_callBackPtr != NULL_PTR)
    1f68:	80 91 84 01 	lds	r24, 0x0184
    1f6c:	90 91 85 01 	lds	r25, 0x0185
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	29 f0       	breq	.+10     	; 0x1f7e <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after each overflow */
		(*g_t_0_ovf_callBackPtr)();
    1f74:	e0 91 84 01 	lds	r30, 0x0184
    1f78:	f0 91 85 01 	lds	r31, 0x0185
    1f7c:	09 95       	icall
		/* another method to call the function using pointer to function t_0_ovf_callBackPtr(); */
	}
}
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	ff 91       	pop	r31
    1f84:	ef 91       	pop	r30
    1f86:	bf 91       	pop	r27
    1f88:	af 91       	pop	r26
    1f8a:	9f 91       	pop	r25
    1f8c:	8f 91       	pop	r24
    1f8e:	7f 91       	pop	r23
    1f90:	6f 91       	pop	r22
    1f92:	5f 91       	pop	r21
    1f94:	4f 91       	pop	r20
    1f96:	3f 91       	pop	r19
    1f98:	2f 91       	pop	r18
    1f9a:	0f 90       	pop	r0
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	0f 90       	pop	r0
    1fa0:	1f 90       	pop	r1
    1fa2:	18 95       	reti

00001fa4 <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    1fa4:	1f 92       	push	r1
    1fa6:	0f 92       	push	r0
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	0f 92       	push	r0
    1fac:	11 24       	eor	r1, r1
    1fae:	2f 93       	push	r18
    1fb0:	3f 93       	push	r19
    1fb2:	4f 93       	push	r20
    1fb4:	5f 93       	push	r21
    1fb6:	6f 93       	push	r22
    1fb8:	7f 93       	push	r23
    1fba:	8f 93       	push	r24
    1fbc:	9f 93       	push	r25
    1fbe:	af 93       	push	r26
    1fc0:	bf 93       	push	r27
    1fc2:	ef 93       	push	r30
    1fc4:	ff 93       	push	r31
    1fc6:	df 93       	push	r29
    1fc8:	cf 93       	push	r28
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
	if(g_t_0_ctc_callBackPtr != NULL_PTR)
    1fce:	80 91 86 01 	lds	r24, 0x0186
    1fd2:	90 91 87 01 	lds	r25, 0x0187
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	29 f0       	breq	.+10     	; 0x1fe4 <__vector_19+0x40>
	{
		/* Call the Call Back function in the application
		 * after the timer reach the compare value
		 */
		(*g_t_0_ctc_callBackPtr)();
    1fda:	e0 91 86 01 	lds	r30, 0x0186
    1fde:	f0 91 87 01 	lds	r31, 0x0187
    1fe2:	09 95       	icall
		/* another method to call the function using pointer to function t_0_ctc_callBackPtr(); */
	}
}
    1fe4:	cf 91       	pop	r28
    1fe6:	df 91       	pop	r29
    1fe8:	ff 91       	pop	r31
    1fea:	ef 91       	pop	r30
    1fec:	bf 91       	pop	r27
    1fee:	af 91       	pop	r26
    1ff0:	9f 91       	pop	r25
    1ff2:	8f 91       	pop	r24
    1ff4:	7f 91       	pop	r23
    1ff6:	6f 91       	pop	r22
    1ff8:	5f 91       	pop	r21
    1ffa:	4f 91       	pop	r20
    1ffc:	3f 91       	pop	r19
    1ffe:	2f 91       	pop	r18
    2000:	0f 90       	pop	r0
    2002:	0f be       	out	0x3f, r0	; 63
    2004:	0f 90       	pop	r0
    2006:	1f 90       	pop	r1
    2008:	18 95       	reti

0000200a <UART_init>:
 * 2. Set the required stop bits
 * 3. Set the required number of bits
 * 4. Set the required baudrate
 */
void UART_init(Uart_ConfigType * config)
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	00 d0       	rcall	.+0      	; 0x2010 <UART_init+0x6>
    2010:	00 d0       	rcall	.+0      	; 0x2012 <UART_init+0x8>
    2012:	cd b7       	in	r28, 0x3d	; 61
    2014:	de b7       	in	r29, 0x3e	; 62
    2016:	9c 83       	std	Y+4, r25	; 0x04
    2018:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    201a:	1a 82       	std	Y+2, r1	; 0x02
    201c:	19 82       	std	Y+1, r1	; 0x01
	/*U2X=1 for double speed*/
	UCSRA=(1<<U2X);
    201e:	eb e2       	ldi	r30, 0x2B	; 43
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	82 e0       	ldi	r24, 0x02	; 2
    2024:	80 83       	st	Z, r24
	 * TXEN=1 transmit enable
	 * UDRIE=0 to Disable USART Data Register Empty Interrupt Enable
	 * RXB8 not used for 8-bit data mode
	 * TXB8 not used for 8-bit data mode
	 */
	UCSRB=(1<<RXEN)|(1<<TXEN);
    2026:	ea e2       	ldi	r30, 0x2A	; 42
    2028:	f0 e0       	ldi	r31, 0x00	; 0
    202a:	88 e1       	ldi	r24, 0x18	; 24
    202c:	80 83       	st	Z, r24
	/*Setup UCSZ2 for the number of bits*/
	UCSRB=(UCSRB & 0xFB)|(config->bits & 0x04);
    202e:	aa e2       	ldi	r26, 0x2A	; 42
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	ea e2       	ldi	r30, 0x2A	; 42
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	98 2f       	mov	r25, r24
    203a:	9b 7f       	andi	r25, 0xFB	; 251
    203c:	eb 81       	ldd	r30, Y+3	; 0x03
    203e:	fc 81       	ldd	r31, Y+4	; 0x04
    2040:	80 81       	ld	r24, Z
    2042:	84 70       	andi	r24, 0x04	; 4
    2044:	89 2b       	or	r24, r25
    2046:	8c 93       	st	X, r24
	 * Configuring the UCSRC register:
	 * URSEL=1 to enable writing in the UCSRC register
	 * UMSEL=0 for asynchronous mode
	 * UCPOL not used for asynchronous mode
	 */
	UCSRC=(1<<URSEL);
    2048:	e0 e4       	ldi	r30, 0x40	; 64
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 e8       	ldi	r24, 0x80	; 128
    204e:	80 83       	st	Z, r24
	/*Setup the parity bits : UPM1 & UPM0 bits*/
	UCSRC=(UCSRC & 0xCF)|((config->parity & 0x03)<<4);
    2050:	a0 e4       	ldi	r26, 0x40	; 64
    2052:	b0 e0       	ldi	r27, 0x00	; 0
    2054:	e0 e4       	ldi	r30, 0x40	; 64
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	80 81       	ld	r24, Z
    205a:	28 2f       	mov	r18, r24
    205c:	2f 7c       	andi	r18, 0xCF	; 207
    205e:	eb 81       	ldd	r30, Y+3	; 0x03
    2060:	fc 81       	ldd	r31, Y+4	; 0x04
    2062:	81 81       	ldd	r24, Z+1	; 0x01
    2064:	88 2f       	mov	r24, r24
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	83 70       	andi	r24, 0x03	; 3
    206a:	90 70       	andi	r25, 0x00	; 0
    206c:	82 95       	swap	r24
    206e:	92 95       	swap	r25
    2070:	90 7f       	andi	r25, 0xF0	; 240
    2072:	98 27       	eor	r25, r24
    2074:	80 7f       	andi	r24, 0xF0	; 240
    2076:	98 27       	eor	r25, r24
    2078:	82 2b       	or	r24, r18
    207a:	8c 93       	st	X, r24
	/*Setup the number of stop-bits : USBS bit*/
	UCSRC=(UCSRC & 0xF7)|((config->stop & 0x01)<<3);
    207c:	a0 e4       	ldi	r26, 0x40	; 64
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e0 e4       	ldi	r30, 0x40	; 64
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	28 2f       	mov	r18, r24
    2088:	27 7f       	andi	r18, 0xF7	; 247
    208a:	eb 81       	ldd	r30, Y+3	; 0x03
    208c:	fc 81       	ldd	r31, Y+4	; 0x04
    208e:	82 81       	ldd	r24, Z+2	; 0x02
    2090:	88 2f       	mov	r24, r24
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	81 70       	andi	r24, 0x01	; 1
    2096:	90 70       	andi	r25, 0x00	; 0
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	88 0f       	add	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	82 2b       	or	r24, r18
    20a6:	8c 93       	st	X, r24
	/*Setup the number of bits : UCSZ1 & UCSZ0 bits*/
	UCSRC=(UCSRC & 0xF9)|((config->bits & 0x03)<<1);
    20a8:	a0 e4       	ldi	r26, 0x40	; 64
    20aa:	b0 e0       	ldi	r27, 0x00	; 0
    20ac:	e0 e4       	ldi	r30, 0x40	; 64
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	28 2f       	mov	r18, r24
    20b4:	29 7f       	andi	r18, 0xF9	; 249
    20b6:	eb 81       	ldd	r30, Y+3	; 0x03
    20b8:	fc 81       	ldd	r31, Y+4	; 0x04
    20ba:	80 81       	ld	r24, Z
    20bc:	88 2f       	mov	r24, r24
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	83 70       	andi	r24, 0x03	; 3
    20c2:	90 70       	andi	r25, 0x00	; 0
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	82 2b       	or	r24, r18
    20ca:	8c 93       	st	X, r24

	/*Calculating the UBRR register value*/
	ubrr_value = (uint16)(((F_CPU / (config->BaudRate * 8UL))) - 1);
    20cc:	eb 81       	ldd	r30, Y+3	; 0x03
    20ce:	fc 81       	ldd	r31, Y+4	; 0x04
    20d0:	83 81       	ldd	r24, Z+3	; 0x03
    20d2:	94 81       	ldd	r25, Z+4	; 0x04
    20d4:	a5 81       	ldd	r26, Z+5	; 0x05
    20d6:	b6 81       	ldd	r27, Z+6	; 0x06
    20d8:	88 0f       	add	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	aa 1f       	adc	r26, r26
    20de:	bb 1f       	adc	r27, r27
    20e0:	88 0f       	add	r24, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	aa 1f       	adc	r26, r26
    20e6:	bb 1f       	adc	r27, r27
    20e8:	88 0f       	add	r24, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	aa 1f       	adc	r26, r26
    20ee:	bb 1f       	adc	r27, r27
    20f0:	9c 01       	movw	r18, r24
    20f2:	ad 01       	movw	r20, r26
    20f4:	80 e4       	ldi	r24, 0x40	; 64
    20f6:	92 e4       	ldi	r25, 0x42	; 66
    20f8:	af e0       	ldi	r26, 0x0F	; 15
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	bc 01       	movw	r22, r24
    20fe:	cd 01       	movw	r24, r26
    2100:	0e 94 32 11 	call	0x2264	; 0x2264 <__udivmodsi4>
    2104:	da 01       	movw	r26, r20
    2106:	c9 01       	movw	r24, r18
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	9a 83       	std	Y+2, r25	; 0x02
    210c:	89 83       	std	Y+1, r24	; 0x01

	UBRRH=ubrr_value>>8;
    210e:	e0 e4       	ldi	r30, 0x40	; 64
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	9a 81       	ldd	r25, Y+2	; 0x02
    2116:	89 2f       	mov	r24, r25
    2118:	99 27       	eor	r25, r25
    211a:	80 83       	st	Z, r24
	UBRRL=ubrr_value;
    211c:	e9 e2       	ldi	r30, 0x29	; 41
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	80 83       	st	Z, r24
}
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <UART_sendByte>:
/*Function responsible for sending the given data*/
void UART_sendByte(uint8 data)
{
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	0f 92       	push	r0
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
    213e:	ec e2       	ldi	r30, 0x2C	; 44
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	89 81       	ldd	r24, Y+1	; 0x01
    2144:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(UCSRA,TXC));
    2146:	eb e2       	ldi	r30, 0x2B	; 43
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	88 2f       	mov	r24, r24
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	80 74       	andi	r24, 0x40	; 64
    2152:	90 70       	andi	r25, 0x00	; 0
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	b9 f3       	breq	.-18     	; 0x2146 <UART_sendByte+0x14>
	SET_BIT(UCSRA,TXC);
    2158:	ab e2       	ldi	r26, 0x2B	; 43
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	eb e2       	ldi	r30, 0x2B	; 43
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	80 64       	ori	r24, 0x40	; 64
    2164:	8c 93       	st	X, r24
}
    2166:	0f 90       	pop	r0
    2168:	cf 91       	pop	r28
    216a:	df 91       	pop	r29
    216c:	08 95       	ret

0000216e <UART_receiveByte>:

/*Function responsible for receiving the data*/
uint8 UART_receiveByte(void)
{
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
    2176:	eb e2       	ldi	r30, 0x2B	; 43
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	88 23       	and	r24, r24
    217e:	dc f7       	brge	.-10     	; 0x2176 <UART_receiveByte+0x8>
	return UDR;
    2180:	ec e2       	ldi	r30, 0x2C	; 44
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
}
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <UART_sendString>:


/*Function responsible for sending a string*/
void UART_sendString(uint8 *str)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	00 d0       	rcall	.+0      	; 0x2192 <UART_sendString+0x6>
    2192:	0f 92       	push	r0
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	9b 83       	std	Y+3, r25	; 0x03
    219a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    219c:	19 82       	std	Y+1, r1	; 0x01
    219e:	0e c0       	rjmp	.+28     	; 0x21bc <UART_sendString+0x30>
	while(str[i]!='\0')
	{
		UART_sendByte(str[i]);
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	28 2f       	mov	r18, r24
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	8a 81       	ldd	r24, Y+2	; 0x02
    21a8:	9b 81       	ldd	r25, Y+3	; 0x03
    21aa:	fc 01       	movw	r30, r24
    21ac:	e2 0f       	add	r30, r18
    21ae:	f3 1f       	adc	r31, r19
    21b0:	80 81       	ld	r24, Z
    21b2:	0e 94 99 10 	call	0x2132	; 0x2132 <UART_sendByte>
		i++;
    21b6:	89 81       	ldd	r24, Y+1	; 0x01
    21b8:	8f 5f       	subi	r24, 0xFF	; 255
    21ba:	89 83       	std	Y+1, r24	; 0x01

/*Function responsible for sending a string*/
void UART_sendString(uint8 *str)
{
	uint8 i=0;
	while(str[i]!='\0')
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	28 2f       	mov	r18, r24
    21c0:	30 e0       	ldi	r19, 0x00	; 0
    21c2:	8a 81       	ldd	r24, Y+2	; 0x02
    21c4:	9b 81       	ldd	r25, Y+3	; 0x03
    21c6:	fc 01       	movw	r30, r24
    21c8:	e2 0f       	add	r30, r18
    21ca:	f3 1f       	adc	r31, r19
    21cc:	80 81       	ld	r24, Z
    21ce:	88 23       	and	r24, r24
    21d0:	39 f7       	brne	.-50     	; 0x21a0 <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}
}
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	cf 91       	pop	r28
    21da:	df 91       	pop	r29
    21dc:	08 95       	ret

000021de <UART_receiveString>:

/*Function responsible for receiving a string*/
void UART_receiveString(uint8 *str)
{
    21de:	0f 93       	push	r16
    21e0:	1f 93       	push	r17
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <UART_receiveString+0xa>
    21e8:	0f 92       	push	r0
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	9b 83       	std	Y+3, r25	; 0x03
    21f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    21f2:	19 82       	std	Y+1, r1	; 0x01
	/*Receive the first byte*/
	str[i]=UART_receiveByte();
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
    21fc:	9b 81       	ldd	r25, Y+3	; 0x03
    21fe:	8c 01       	movw	r16, r24
    2200:	02 0f       	add	r16, r18
    2202:	13 1f       	adc	r17, r19
    2204:	0e 94 b7 10 	call	0x216e	; 0x216e <UART_receiveByte>
    2208:	f8 01       	movw	r30, r16
    220a:	80 83       	st	Z, r24
    220c:	0f c0       	rjmp	.+30     	; 0x222c <UART_receiveString+0x4e>
	while(str[i]!='#')
	{
		i++;
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	8f 5f       	subi	r24, 0xFF	; 255
    2212:	89 83       	std	Y+1, r24	; 0x01
		str[i]=UART_receiveByte();
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	28 2f       	mov	r18, r24
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	9b 81       	ldd	r25, Y+3	; 0x03
    221e:	8c 01       	movw	r16, r24
    2220:	02 0f       	add	r16, r18
    2222:	13 1f       	adc	r17, r19
    2224:	0e 94 b7 10 	call	0x216e	; 0x216e <UART_receiveByte>
    2228:	f8 01       	movw	r30, r16
    222a:	80 83       	st	Z, r24
void UART_receiveString(uint8 *str)
{
	uint8 i=0;
	/*Receive the first byte*/
	str[i]=UART_receiveByte();
	while(str[i]!='#')
    222c:	89 81       	ldd	r24, Y+1	; 0x01
    222e:	28 2f       	mov	r18, r24
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	8a 81       	ldd	r24, Y+2	; 0x02
    2234:	9b 81       	ldd	r25, Y+3	; 0x03
    2236:	fc 01       	movw	r30, r24
    2238:	e2 0f       	add	r30, r18
    223a:	f3 1f       	adc	r31, r19
    223c:	80 81       	ld	r24, Z
    223e:	83 32       	cpi	r24, 0x23	; 35
    2240:	31 f7       	brne	.-52     	; 0x220e <UART_receiveString+0x30>
	{
		i++;
		str[i]=UART_receiveByte();
	}
	str[i]='\0';
    2242:	89 81       	ldd	r24, Y+1	; 0x01
    2244:	28 2f       	mov	r18, r24
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	8a 81       	ldd	r24, Y+2	; 0x02
    224a:	9b 81       	ldd	r25, Y+3	; 0x03
    224c:	fc 01       	movw	r30, r24
    224e:	e2 0f       	add	r30, r18
    2250:	f3 1f       	adc	r31, r19
    2252:	10 82       	st	Z, r1
}
    2254:	0f 90       	pop	r0
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	1f 91       	pop	r17
    2260:	0f 91       	pop	r16
    2262:	08 95       	ret

00002264 <__udivmodsi4>:
    2264:	a1 e2       	ldi	r26, 0x21	; 33
    2266:	1a 2e       	mov	r1, r26
    2268:	aa 1b       	sub	r26, r26
    226a:	bb 1b       	sub	r27, r27
    226c:	fd 01       	movw	r30, r26
    226e:	0d c0       	rjmp	.+26     	; 0x228a <__udivmodsi4_ep>

00002270 <__udivmodsi4_loop>:
    2270:	aa 1f       	adc	r26, r26
    2272:	bb 1f       	adc	r27, r27
    2274:	ee 1f       	adc	r30, r30
    2276:	ff 1f       	adc	r31, r31
    2278:	a2 17       	cp	r26, r18
    227a:	b3 07       	cpc	r27, r19
    227c:	e4 07       	cpc	r30, r20
    227e:	f5 07       	cpc	r31, r21
    2280:	20 f0       	brcs	.+8      	; 0x228a <__udivmodsi4_ep>
    2282:	a2 1b       	sub	r26, r18
    2284:	b3 0b       	sbc	r27, r19
    2286:	e4 0b       	sbc	r30, r20
    2288:	f5 0b       	sbc	r31, r21

0000228a <__udivmodsi4_ep>:
    228a:	66 1f       	adc	r22, r22
    228c:	77 1f       	adc	r23, r23
    228e:	88 1f       	adc	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	1a 94       	dec	r1
    2294:	69 f7       	brne	.-38     	; 0x2270 <__udivmodsi4_loop>
    2296:	60 95       	com	r22
    2298:	70 95       	com	r23
    229a:	80 95       	com	r24
    229c:	90 95       	com	r25
    229e:	9b 01       	movw	r18, r22
    22a0:	ac 01       	movw	r20, r24
    22a2:	bd 01       	movw	r22, r26
    22a4:	cf 01       	movw	r24, r30
    22a6:	08 95       	ret

000022a8 <__prologue_saves__>:
    22a8:	2f 92       	push	r2
    22aa:	3f 92       	push	r3
    22ac:	4f 92       	push	r4
    22ae:	5f 92       	push	r5
    22b0:	6f 92       	push	r6
    22b2:	7f 92       	push	r7
    22b4:	8f 92       	push	r8
    22b6:	9f 92       	push	r9
    22b8:	af 92       	push	r10
    22ba:	bf 92       	push	r11
    22bc:	cf 92       	push	r12
    22be:	df 92       	push	r13
    22c0:	ef 92       	push	r14
    22c2:	ff 92       	push	r15
    22c4:	0f 93       	push	r16
    22c6:	1f 93       	push	r17
    22c8:	cf 93       	push	r28
    22ca:	df 93       	push	r29
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	ca 1b       	sub	r28, r26
    22d2:	db 0b       	sbc	r29, r27
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	de bf       	out	0x3e, r29	; 62
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	cd bf       	out	0x3d, r28	; 61
    22de:	09 94       	ijmp

000022e0 <__epilogue_restores__>:
    22e0:	2a 88       	ldd	r2, Y+18	; 0x12
    22e2:	39 88       	ldd	r3, Y+17	; 0x11
    22e4:	48 88       	ldd	r4, Y+16	; 0x10
    22e6:	5f 84       	ldd	r5, Y+15	; 0x0f
    22e8:	6e 84       	ldd	r6, Y+14	; 0x0e
    22ea:	7d 84       	ldd	r7, Y+13	; 0x0d
    22ec:	8c 84       	ldd	r8, Y+12	; 0x0c
    22ee:	9b 84       	ldd	r9, Y+11	; 0x0b
    22f0:	aa 84       	ldd	r10, Y+10	; 0x0a
    22f2:	b9 84       	ldd	r11, Y+9	; 0x09
    22f4:	c8 84       	ldd	r12, Y+8	; 0x08
    22f6:	df 80       	ldd	r13, Y+7	; 0x07
    22f8:	ee 80       	ldd	r14, Y+6	; 0x06
    22fa:	fd 80       	ldd	r15, Y+5	; 0x05
    22fc:	0c 81       	ldd	r16, Y+4	; 0x04
    22fe:	1b 81       	ldd	r17, Y+3	; 0x03
    2300:	aa 81       	ldd	r26, Y+2	; 0x02
    2302:	b9 81       	ldd	r27, Y+1	; 0x01
    2304:	ce 0f       	add	r28, r30
    2306:	d1 1d       	adc	r29, r1
    2308:	0f b6       	in	r0, 0x3f	; 63
    230a:	f8 94       	cli
    230c:	de bf       	out	0x3e, r29	; 62
    230e:	0f be       	out	0x3f, r0	; 63
    2310:	cd bf       	out	0x3d, r28	; 61
    2312:	ed 01       	movw	r28, r26
    2314:	08 95       	ret

00002316 <_exit>:
    2316:	f8 94       	cli

00002318 <__stop_program>:
    2318:	ff cf       	rjmp	.-2      	; 0x2318 <__stop_program>
