
MC_UI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  00002c2e  00002cc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800108  00800108  00002d6a  2**0
                  ALLOC
  3 .stab         00002c58  00000000  00000000  00002d6c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013df  00000000  00000000  000059c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007053  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a934  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000aa94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ad21  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b4ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 17 14 	jmp	0x282e	; 0x282e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e2       	ldi	r30, 0x2E	; 46
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e0       	ldi	r26, 0x08	; 8
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 33       	cpi	r26, 0x34	; 52
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <main>
      8a:	0c 94 15 16 	jmp	0x2c2a	; 0x2c2a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 ef       	ldi	r26, 0xF1	; 241
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	81 ef       	ldi	r24, 0xF1	; 241
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 a5 15 	jmp	0x2b4a	; 0x2b4a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a9 15 	jmp	0x2b52	; 0x2b52 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 c5 15 	jmp	0x2b8a	; 0x2b8a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     b4e:	83 e0       	ldi	r24, 0x03	; 3
     b50:	62 e0       	ldi	r22, 0x02	; 2
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
     b58:	83 e0       	ldi	r24, 0x03	; 3
     b5a:	63 e0       	ldi	r22, 0x03	; 3
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     b62:	83 e0       	ldi	r24, 0x03	; 3
     b64:	64 e0       	ldi	r22, 0x04	; 4
     b66:	41 e0       	ldi	r20, 0x01	; 1
     b68:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
     b6c:	82 e0       	ldi	r24, 0x02	; 2
     b6e:	6f ef       	ldi	r22, 0xFF	; 255
     b70:	0e 94 94 11 	call	0x2328	; 0x2328 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
     b74:	88 e3       	ldi	r24, 0x38	; 56
     b76:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
     b7a:	8c e0       	ldi	r24, 0x0C	; 12
     b7c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_sendCommand>
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	ea 97       	sbiw	r28, 0x3a	; 58
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
     ba2:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
     ba4:	83 e0       	ldi	r24, 0x03	; 3
     ba6:	62 e0       	ldi	r22, 0x02	; 2
     ba8:	40 e0       	ldi	r20, 0x00	; 0
     baa:	0e 94 0e 10 	call	0x201c	; 0x201c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
     bae:	83 e0       	ldi	r24, 0x03	; 3
     bb0:	63 e0       	ldi	r22, 0x03	; 3
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	0e 94 0e 10 	call	0x201c	; 0x201c <GPIO_writePin>
     bb8:	80 e0       	ldi	r24, 0x00	; 0
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	a0 e8       	ldi	r26, 0x80	; 128
     bbe:	bf e3       	ldi	r27, 0x3F	; 63
     bc0:	8d ab       	std	Y+53, r24	; 0x35
     bc2:	9e ab       	std	Y+54, r25	; 0x36
     bc4:	af ab       	std	Y+55, r26	; 0x37
     bc6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc8:	6d a9       	ldd	r22, Y+53	; 0x35
     bca:	7e a9       	ldd	r23, Y+54	; 0x36
     bcc:	8f a9       	ldd	r24, Y+55	; 0x37
     bce:	98 ad       	ldd	r25, Y+56	; 0x38
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	4a e7       	ldi	r20, 0x7A	; 122
     bd6:	53 e4       	ldi	r21, 0x43	; 67
     bd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bdc:	dc 01       	movw	r26, r24
     bde:	cb 01       	movw	r24, r22
     be0:	89 ab       	std	Y+49, r24	; 0x31
     be2:	9a ab       	std	Y+50, r25	; 0x32
     be4:	ab ab       	std	Y+51, r26	; 0x33
     be6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     be8:	69 a9       	ldd	r22, Y+49	; 0x31
     bea:	7a a9       	ldd	r23, Y+50	; 0x32
     bec:	8b a9       	ldd	r24, Y+51	; 0x33
     bee:	9c a9       	ldd	r25, Y+52	; 0x34
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	40 e8       	ldi	r20, 0x80	; 128
     bf6:	5f e3       	ldi	r21, 0x3F	; 63
     bf8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bfc:	88 23       	and	r24, r24
     bfe:	2c f4       	brge	.+10     	; 0xc0a <LCD_sendCommand+0x7e>
		__ticks = 1;
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	98 ab       	std	Y+48, r25	; 0x30
     c06:	8f a7       	std	Y+47, r24	; 0x2f
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
     c0a:	69 a9       	ldd	r22, Y+49	; 0x31
     c0c:	7a a9       	ldd	r23, Y+50	; 0x32
     c0e:	8b a9       	ldd	r24, Y+51	; 0x33
     c10:	9c a9       	ldd	r25, Y+52	; 0x34
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	3f ef       	ldi	r19, 0xFF	; 255
     c16:	4f e7       	ldi	r20, 0x7F	; 127
     c18:	57 e4       	ldi	r21, 0x47	; 71
     c1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c1e:	18 16       	cp	r1, r24
     c20:	4c f5       	brge	.+82     	; 0xc74 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c22:	6d a9       	ldd	r22, Y+53	; 0x35
     c24:	7e a9       	ldd	r23, Y+54	; 0x36
     c26:	8f a9       	ldd	r24, Y+55	; 0x37
     c28:	98 ad       	ldd	r25, Y+56	; 0x38
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	40 e2       	ldi	r20, 0x20	; 32
     c30:	51 e4       	ldi	r21, 0x41	; 65
     c32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c36:	dc 01       	movw	r26, r24
     c38:	cb 01       	movw	r24, r22
     c3a:	bc 01       	movw	r22, r24
     c3c:	cd 01       	movw	r24, r26
     c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c42:	dc 01       	movw	r26, r24
     c44:	cb 01       	movw	r24, r22
     c46:	98 ab       	std	Y+48, r25	; 0x30
     c48:	8f a7       	std	Y+47, r24	; 0x2f
     c4a:	0f c0       	rjmp	.+30     	; 0xc6a <LCD_sendCommand+0xde>
     c4c:	89 e1       	ldi	r24, 0x19	; 25
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	9e a7       	std	Y+46, r25	; 0x2e
     c52:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c54:	8d a5       	ldd	r24, Y+45	; 0x2d
     c56:	9e a5       	ldd	r25, Y+46	; 0x2e
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	f1 f7       	brne	.-4      	; 0xc58 <LCD_sendCommand+0xcc>
     c5c:	9e a7       	std	Y+46, r25	; 0x2e
     c5e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c60:	8f a5       	ldd	r24, Y+47	; 0x2f
     c62:	98 a9       	ldd	r25, Y+48	; 0x30
     c64:	01 97       	sbiw	r24, 0x01	; 1
     c66:	98 ab       	std	Y+48, r25	; 0x30
     c68:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c6a:	8f a5       	ldd	r24, Y+47	; 0x2f
     c6c:	98 a9       	ldd	r25, Y+48	; 0x30
     c6e:	00 97       	sbiw	r24, 0x00	; 0
     c70:	69 f7       	brne	.-38     	; 0xc4c <LCD_sendCommand+0xc0>
     c72:	14 c0       	rjmp	.+40     	; 0xc9c <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c74:	69 a9       	ldd	r22, Y+49	; 0x31
     c76:	7a a9       	ldd	r23, Y+50	; 0x32
     c78:	8b a9       	ldd	r24, Y+51	; 0x33
     c7a:	9c a9       	ldd	r25, Y+52	; 0x34
     c7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c80:	dc 01       	movw	r26, r24
     c82:	cb 01       	movw	r24, r22
     c84:	98 ab       	std	Y+48, r25	; 0x30
     c86:	8f a7       	std	Y+47, r24	; 0x2f
     c88:	8f a5       	ldd	r24, Y+47	; 0x2f
     c8a:	98 a9       	ldd	r25, Y+48	; 0x30
     c8c:	9c a7       	std	Y+44, r25	; 0x2c
     c8e:	8b a7       	std	Y+43, r24	; 0x2b
     c90:	8b a5       	ldd	r24, Y+43	; 0x2b
     c92:	9c a5       	ldd	r25, Y+44	; 0x2c
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	f1 f7       	brne	.-4      	; 0xc94 <LCD_sendCommand+0x108>
     c98:	9c a7       	std	Y+44, r25	; 0x2c
     c9a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     c9c:	83 e0       	ldi	r24, 0x03	; 3
     c9e:	64 e0       	ldi	r22, 0x04	; 4
     ca0:	41 e0       	ldi	r20, 0x01	; 1
     ca2:	0e 94 0e 10 	call	0x201c	; 0x201c <GPIO_writePin>
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	a0 e8       	ldi	r26, 0x80	; 128
     cac:	bf e3       	ldi	r27, 0x3F	; 63
     cae:	8f a3       	std	Y+39, r24	; 0x27
     cb0:	98 a7       	std	Y+40, r25	; 0x28
     cb2:	a9 a7       	std	Y+41, r26	; 0x29
     cb4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb6:	6f a1       	ldd	r22, Y+39	; 0x27
     cb8:	78 a5       	ldd	r23, Y+40	; 0x28
     cba:	89 a5       	ldd	r24, Y+41	; 0x29
     cbc:	9a a5       	ldd	r25, Y+42	; 0x2a
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	4a e7       	ldi	r20, 0x7A	; 122
     cc4:	53 e4       	ldi	r21, 0x43	; 67
     cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cca:	dc 01       	movw	r26, r24
     ccc:	cb 01       	movw	r24, r22
     cce:	8b a3       	std	Y+35, r24	; 0x23
     cd0:	9c a3       	std	Y+36, r25	; 0x24
     cd2:	ad a3       	std	Y+37, r26	; 0x25
     cd4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     cd6:	6b a1       	ldd	r22, Y+35	; 0x23
     cd8:	7c a1       	ldd	r23, Y+36	; 0x24
     cda:	8d a1       	ldd	r24, Y+37	; 0x25
     cdc:	9e a1       	ldd	r25, Y+38	; 0x26
     cde:	20 e0       	ldi	r18, 0x00	; 0
     ce0:	30 e0       	ldi	r19, 0x00	; 0
     ce2:	40 e8       	ldi	r20, 0x80	; 128
     ce4:	5f e3       	ldi	r21, 0x3F	; 63
     ce6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cea:	88 23       	and	r24, r24
     cec:	2c f4       	brge	.+10     	; 0xcf8 <LCD_sendCommand+0x16c>
		__ticks = 1;
     cee:	81 e0       	ldi	r24, 0x01	; 1
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	9a a3       	std	Y+34, r25	; 0x22
     cf4:	89 a3       	std	Y+33, r24	; 0x21
     cf6:	3f c0       	rjmp	.+126    	; 0xd76 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
     cf8:	6b a1       	ldd	r22, Y+35	; 0x23
     cfa:	7c a1       	ldd	r23, Y+36	; 0x24
     cfc:	8d a1       	ldd	r24, Y+37	; 0x25
     cfe:	9e a1       	ldd	r25, Y+38	; 0x26
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	3f ef       	ldi	r19, 0xFF	; 255
     d04:	4f e7       	ldi	r20, 0x7F	; 127
     d06:	57 e4       	ldi	r21, 0x47	; 71
     d08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d0c:	18 16       	cp	r1, r24
     d0e:	4c f5       	brge	.+82     	; 0xd62 <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d10:	6f a1       	ldd	r22, Y+39	; 0x27
     d12:	78 a5       	ldd	r23, Y+40	; 0x28
     d14:	89 a5       	ldd	r24, Y+41	; 0x29
     d16:	9a a5       	ldd	r25, Y+42	; 0x2a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	30 e0       	ldi	r19, 0x00	; 0
     d1c:	40 e2       	ldi	r20, 0x20	; 32
     d1e:	51 e4       	ldi	r21, 0x41	; 65
     d20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d24:	dc 01       	movw	r26, r24
     d26:	cb 01       	movw	r24, r22
     d28:	bc 01       	movw	r22, r24
     d2a:	cd 01       	movw	r24, r26
     d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d30:	dc 01       	movw	r26, r24
     d32:	cb 01       	movw	r24, r22
     d34:	9a a3       	std	Y+34, r25	; 0x22
     d36:	89 a3       	std	Y+33, r24	; 0x21
     d38:	0f c0       	rjmp	.+30     	; 0xd58 <LCD_sendCommand+0x1cc>
     d3a:	89 e1       	ldi	r24, 0x19	; 25
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	98 a3       	std	Y+32, r25	; 0x20
     d40:	8f 8f       	std	Y+31, r24	; 0x1f
     d42:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d44:	98 a1       	ldd	r25, Y+32	; 0x20
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	f1 f7       	brne	.-4      	; 0xd46 <LCD_sendCommand+0x1ba>
     d4a:	98 a3       	std	Y+32, r25	; 0x20
     d4c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4e:	89 a1       	ldd	r24, Y+33	; 0x21
     d50:	9a a1       	ldd	r25, Y+34	; 0x22
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	9a a3       	std	Y+34, r25	; 0x22
     d56:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d58:	89 a1       	ldd	r24, Y+33	; 0x21
     d5a:	9a a1       	ldd	r25, Y+34	; 0x22
     d5c:	00 97       	sbiw	r24, 0x00	; 0
     d5e:	69 f7       	brne	.-38     	; 0xd3a <LCD_sendCommand+0x1ae>
     d60:	14 c0       	rjmp	.+40     	; 0xd8a <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d62:	6b a1       	ldd	r22, Y+35	; 0x23
     d64:	7c a1       	ldd	r23, Y+36	; 0x24
     d66:	8d a1       	ldd	r24, Y+37	; 0x25
     d68:	9e a1       	ldd	r25, Y+38	; 0x26
     d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6e:	dc 01       	movw	r26, r24
     d70:	cb 01       	movw	r24, r22
     d72:	9a a3       	std	Y+34, r25	; 0x22
     d74:	89 a3       	std	Y+33, r24	; 0x21
     d76:	89 a1       	ldd	r24, Y+33	; 0x21
     d78:	9a a1       	ldd	r25, Y+34	; 0x22
     d7a:	9e 8f       	std	Y+30, r25	; 0x1e
     d7c:	8d 8f       	std	Y+29, r24	; 0x1d
     d7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d80:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <LCD_sendCommand+0x1f6>
     d86:	9e 8f       	std	Y+30, r25	; 0x1e
     d88:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
     d8a:	82 e0       	ldi	r24, 0x02	; 2
     d8c:	6a ad       	ldd	r22, Y+58	; 0x3a
     d8e:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <GPIO_writePort>
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	a0 e8       	ldi	r26, 0x80	; 128
     d98:	bf e3       	ldi	r27, 0x3F	; 63
     d9a:	89 8f       	std	Y+25, r24	; 0x19
     d9c:	9a 8f       	std	Y+26, r25	; 0x1a
     d9e:	ab 8f       	std	Y+27, r26	; 0x1b
     da0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da2:	69 8d       	ldd	r22, Y+25	; 0x19
     da4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     da6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     da8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	4a e7       	ldi	r20, 0x7A	; 122
     db0:	53 e4       	ldi	r21, 0x43	; 67
     db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     db6:	dc 01       	movw	r26, r24
     db8:	cb 01       	movw	r24, r22
     dba:	8d 8b       	std	Y+21, r24	; 0x15
     dbc:	9e 8b       	std	Y+22, r25	; 0x16
     dbe:	af 8b       	std	Y+23, r26	; 0x17
     dc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     dc2:	6d 89       	ldd	r22, Y+21	; 0x15
     dc4:	7e 89       	ldd	r23, Y+22	; 0x16
     dc6:	8f 89       	ldd	r24, Y+23	; 0x17
     dc8:	98 8d       	ldd	r25, Y+24	; 0x18
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e8       	ldi	r20, 0x80	; 128
     dd0:	5f e3       	ldi	r21, 0x3F	; 63
     dd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dd6:	88 23       	and	r24, r24
     dd8:	2c f4       	brge	.+10     	; 0xde4 <LCD_sendCommand+0x258>
		__ticks = 1;
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	9c 8b       	std	Y+20, r25	; 0x14
     de0:	8b 8b       	std	Y+19, r24	; 0x13
     de2:	3f c0       	rjmp	.+126    	; 0xe62 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
     de4:	6d 89       	ldd	r22, Y+21	; 0x15
     de6:	7e 89       	ldd	r23, Y+22	; 0x16
     de8:	8f 89       	ldd	r24, Y+23	; 0x17
     dea:	98 8d       	ldd	r25, Y+24	; 0x18
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	3f ef       	ldi	r19, 0xFF	; 255
     df0:	4f e7       	ldi	r20, 0x7F	; 127
     df2:	57 e4       	ldi	r21, 0x47	; 71
     df4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     df8:	18 16       	cp	r1, r24
     dfa:	4c f5       	brge	.+82     	; 0xe4e <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dfc:	69 8d       	ldd	r22, Y+25	; 0x19
     dfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e00:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e02:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e2       	ldi	r20, 0x20	; 32
     e0a:	51 e4       	ldi	r21, 0x41	; 65
     e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	bc 01       	movw	r22, r24
     e16:	cd 01       	movw	r24, r26
     e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	9c 8b       	std	Y+20, r25	; 0x14
     e22:	8b 8b       	std	Y+19, r24	; 0x13
     e24:	0f c0       	rjmp	.+30     	; 0xe44 <LCD_sendCommand+0x2b8>
     e26:	89 e1       	ldi	r24, 0x19	; 25
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	9a 8b       	std	Y+18, r25	; 0x12
     e2c:	89 8b       	std	Y+17, r24	; 0x11
     e2e:	89 89       	ldd	r24, Y+17	; 0x11
     e30:	9a 89       	ldd	r25, Y+18	; 0x12
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <LCD_sendCommand+0x2a6>
     e36:	9a 8b       	std	Y+18, r25	; 0x12
     e38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3a:	8b 89       	ldd	r24, Y+19	; 0x13
     e3c:	9c 89       	ldd	r25, Y+20	; 0x14
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	9c 8b       	std	Y+20, r25	; 0x14
     e42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e44:	8b 89       	ldd	r24, Y+19	; 0x13
     e46:	9c 89       	ldd	r25, Y+20	; 0x14
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	69 f7       	brne	.-38     	; 0xe26 <LCD_sendCommand+0x29a>
     e4c:	14 c0       	rjmp	.+40     	; 0xe76 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e4e:	6d 89       	ldd	r22, Y+21	; 0x15
     e50:	7e 89       	ldd	r23, Y+22	; 0x16
     e52:	8f 89       	ldd	r24, Y+23	; 0x17
     e54:	98 8d       	ldd	r25, Y+24	; 0x18
     e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	9c 8b       	std	Y+20, r25	; 0x14
     e60:	8b 8b       	std	Y+19, r24	; 0x13
     e62:	8b 89       	ldd	r24, Y+19	; 0x13
     e64:	9c 89       	ldd	r25, Y+20	; 0x14
     e66:	98 8b       	std	Y+16, r25	; 0x10
     e68:	8f 87       	std	Y+15, r24	; 0x0f
     e6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e6c:	98 89       	ldd	r25, Y+16	; 0x10
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	f1 f7       	brne	.-4      	; 0xe6e <LCD_sendCommand+0x2e2>
     e72:	98 8b       	std	Y+16, r25	; 0x10
     e74:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	64 e0       	ldi	r22, 0x04	; 4
     e7a:	40 e0       	ldi	r20, 0x00	; 0
     e7c:	0e 94 0e 10 	call	0x201c	; 0x201c <GPIO_writePin>
     e80:	80 e0       	ldi	r24, 0x00	; 0
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	a0 e8       	ldi	r26, 0x80	; 128
     e86:	bf e3       	ldi	r27, 0x3F	; 63
     e88:	8b 87       	std	Y+11, r24	; 0x0b
     e8a:	9c 87       	std	Y+12, r25	; 0x0c
     e8c:	ad 87       	std	Y+13, r26	; 0x0d
     e8e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e90:	6b 85       	ldd	r22, Y+11	; 0x0b
     e92:	7c 85       	ldd	r23, Y+12	; 0x0c
     e94:	8d 85       	ldd	r24, Y+13	; 0x0d
     e96:	9e 85       	ldd	r25, Y+14	; 0x0e
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	4a e7       	ldi	r20, 0x7A	; 122
     e9e:	53 e4       	ldi	r21, 0x43	; 67
     ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	8f 83       	std	Y+7, r24	; 0x07
     eaa:	98 87       	std	Y+8, r25	; 0x08
     eac:	a9 87       	std	Y+9, r26	; 0x09
     eae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eb0:	6f 81       	ldd	r22, Y+7	; 0x07
     eb2:	78 85       	ldd	r23, Y+8	; 0x08
     eb4:	89 85       	ldd	r24, Y+9	; 0x09
     eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 e8       	ldi	r20, 0x80	; 128
     ebe:	5f e3       	ldi	r21, 0x3F	; 63
     ec0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ec4:	88 23       	and	r24, r24
     ec6:	2c f4       	brge	.+10     	; 0xed2 <LCD_sendCommand+0x346>
		__ticks = 1;
     ec8:	81 e0       	ldi	r24, 0x01	; 1
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	9e 83       	std	Y+6, r25	; 0x06
     ece:	8d 83       	std	Y+5, r24	; 0x05
     ed0:	3f c0       	rjmp	.+126    	; 0xf50 <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
     ed2:	6f 81       	ldd	r22, Y+7	; 0x07
     ed4:	78 85       	ldd	r23, Y+8	; 0x08
     ed6:	89 85       	ldd	r24, Y+9	; 0x09
     ed8:	9a 85       	ldd	r25, Y+10	; 0x0a
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	3f ef       	ldi	r19, 0xFF	; 255
     ede:	4f e7       	ldi	r20, 0x7F	; 127
     ee0:	57 e4       	ldi	r21, 0x47	; 71
     ee2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ee6:	18 16       	cp	r1, r24
     ee8:	4c f5       	brge	.+82     	; 0xf3c <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     eea:	6b 85       	ldd	r22, Y+11	; 0x0b
     eec:	7c 85       	ldd	r23, Y+12	; 0x0c
     eee:	8d 85       	ldd	r24, Y+13	; 0x0d
     ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e2       	ldi	r20, 0x20	; 32
     ef8:	51 e4       	ldi	r21, 0x41	; 65
     efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	bc 01       	movw	r22, r24
     f04:	cd 01       	movw	r24, r26
     f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	9e 83       	std	Y+6, r25	; 0x06
     f10:	8d 83       	std	Y+5, r24	; 0x05
     f12:	0f c0       	rjmp	.+30     	; 0xf32 <LCD_sendCommand+0x3a6>
     f14:	89 e1       	ldi	r24, 0x19	; 25
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	9c 83       	std	Y+4, r25	; 0x04
     f1a:	8b 83       	std	Y+3, r24	; 0x03
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	9c 81       	ldd	r25, Y+4	; 0x04
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	f1 f7       	brne	.-4      	; 0xf20 <LCD_sendCommand+0x394>
     f24:	9c 83       	std	Y+4, r25	; 0x04
     f26:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f28:	8d 81       	ldd	r24, Y+5	; 0x05
     f2a:	9e 81       	ldd	r25, Y+6	; 0x06
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	9e 83       	std	Y+6, r25	; 0x06
     f30:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f32:	8d 81       	ldd	r24, Y+5	; 0x05
     f34:	9e 81       	ldd	r25, Y+6	; 0x06
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	69 f7       	brne	.-38     	; 0xf14 <LCD_sendCommand+0x388>
     f3a:	14 c0       	rjmp	.+40     	; 0xf64 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3c:	6f 81       	ldd	r22, Y+7	; 0x07
     f3e:	78 85       	ldd	r23, Y+8	; 0x08
     f40:	89 85       	ldd	r24, Y+9	; 0x09
     f42:	9a 85       	ldd	r25, Y+10	; 0x0a
     f44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	9e 83       	std	Y+6, r25	; 0x06
     f4e:	8d 83       	std	Y+5, r24	; 0x05
     f50:	8d 81       	ldd	r24, Y+5	; 0x05
     f52:	9e 81       	ldd	r25, Y+6	; 0x06
     f54:	9a 83       	std	Y+2, r25	; 0x02
     f56:	89 83       	std	Y+1, r24	; 0x01
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <LCD_sendCommand+0x3d0>
     f60:	9a 83       	std	Y+2, r25	; 0x02
     f62:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
     f64:	ea 96       	adiw	r28, 0x3a	; 58
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	ea 97       	sbiw	r28, 0x3a	; 58
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	de bf       	out	0x3e, r29	; 62
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	cd bf       	out	0x3d, r28	; 61
     f8a:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
     f8c:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
     f8e:	83 e0       	ldi	r24, 0x03	; 3
     f90:	62 e0       	ldi	r22, 0x02	; 2
     f92:	41 e0       	ldi	r20, 0x01	; 1
     f94:	0e 94 0e 10 	call	0x201c	; 0x201c <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
     f98:	83 e0       	ldi	r24, 0x03	; 3
     f9a:	63 e0       	ldi	r22, 0x03	; 3
     f9c:	40 e0       	ldi	r20, 0x00	; 0
     f9e:	0e 94 0e 10 	call	0x201c	; 0x201c <GPIO_writePin>
     fa2:	80 e0       	ldi	r24, 0x00	; 0
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	a0 e8       	ldi	r26, 0x80	; 128
     fa8:	bf e3       	ldi	r27, 0x3F	; 63
     faa:	8d ab       	std	Y+53, r24	; 0x35
     fac:	9e ab       	std	Y+54, r25	; 0x36
     fae:	af ab       	std	Y+55, r26	; 0x37
     fb0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb2:	6d a9       	ldd	r22, Y+53	; 0x35
     fb4:	7e a9       	ldd	r23, Y+54	; 0x36
     fb6:	8f a9       	ldd	r24, Y+55	; 0x37
     fb8:	98 ad       	ldd	r25, Y+56	; 0x38
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	4a e7       	ldi	r20, 0x7A	; 122
     fc0:	53 e4       	ldi	r21, 0x43	; 67
     fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	89 ab       	std	Y+49, r24	; 0x31
     fcc:	9a ab       	std	Y+50, r25	; 0x32
     fce:	ab ab       	std	Y+51, r26	; 0x33
     fd0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     fd2:	69 a9       	ldd	r22, Y+49	; 0x31
     fd4:	7a a9       	ldd	r23, Y+50	; 0x32
     fd6:	8b a9       	ldd	r24, Y+51	; 0x33
     fd8:	9c a9       	ldd	r25, Y+52	; 0x34
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	30 e0       	ldi	r19, 0x00	; 0
     fde:	40 e8       	ldi	r20, 0x80	; 128
     fe0:	5f e3       	ldi	r21, 0x3F	; 63
     fe2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fe6:	88 23       	and	r24, r24
     fe8:	2c f4       	brge	.+10     	; 0xff4 <LCD_displayCharacter+0x7e>
		__ticks = 1;
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	98 ab       	std	Y+48, r25	; 0x30
     ff0:	8f a7       	std	Y+47, r24	; 0x2f
     ff2:	3f c0       	rjmp	.+126    	; 0x1072 <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
     ff4:	69 a9       	ldd	r22, Y+49	; 0x31
     ff6:	7a a9       	ldd	r23, Y+50	; 0x32
     ff8:	8b a9       	ldd	r24, Y+51	; 0x33
     ffa:	9c a9       	ldd	r25, Y+52	; 0x34
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	3f ef       	ldi	r19, 0xFF	; 255
    1000:	4f e7       	ldi	r20, 0x7F	; 127
    1002:	57 e4       	ldi	r21, 0x47	; 71
    1004:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1008:	18 16       	cp	r1, r24
    100a:	4c f5       	brge	.+82     	; 0x105e <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    100c:	6d a9       	ldd	r22, Y+53	; 0x35
    100e:	7e a9       	ldd	r23, Y+54	; 0x36
    1010:	8f a9       	ldd	r24, Y+55	; 0x37
    1012:	98 ad       	ldd	r25, Y+56	; 0x38
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	40 e2       	ldi	r20, 0x20	; 32
    101a:	51 e4       	ldi	r21, 0x41	; 65
    101c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	bc 01       	movw	r22, r24
    1026:	cd 01       	movw	r24, r26
    1028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	98 ab       	std	Y+48, r25	; 0x30
    1032:	8f a7       	std	Y+47, r24	; 0x2f
    1034:	0f c0       	rjmp	.+30     	; 0x1054 <LCD_displayCharacter+0xde>
    1036:	89 e1       	ldi	r24, 0x19	; 25
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	9e a7       	std	Y+46, r25	; 0x2e
    103c:	8d a7       	std	Y+45, r24	; 0x2d
    103e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1040:	9e a5       	ldd	r25, Y+46	; 0x2e
    1042:	01 97       	sbiw	r24, 0x01	; 1
    1044:	f1 f7       	brne	.-4      	; 0x1042 <LCD_displayCharacter+0xcc>
    1046:	9e a7       	std	Y+46, r25	; 0x2e
    1048:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104a:	8f a5       	ldd	r24, Y+47	; 0x2f
    104c:	98 a9       	ldd	r25, Y+48	; 0x30
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	98 ab       	std	Y+48, r25	; 0x30
    1052:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1054:	8f a5       	ldd	r24, Y+47	; 0x2f
    1056:	98 a9       	ldd	r25, Y+48	; 0x30
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	69 f7       	brne	.-38     	; 0x1036 <LCD_displayCharacter+0xc0>
    105c:	14 c0       	rjmp	.+40     	; 0x1086 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    105e:	69 a9       	ldd	r22, Y+49	; 0x31
    1060:	7a a9       	ldd	r23, Y+50	; 0x32
    1062:	8b a9       	ldd	r24, Y+51	; 0x33
    1064:	9c a9       	ldd	r25, Y+52	; 0x34
    1066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	98 ab       	std	Y+48, r25	; 0x30
    1070:	8f a7       	std	Y+47, r24	; 0x2f
    1072:	8f a5       	ldd	r24, Y+47	; 0x2f
    1074:	98 a9       	ldd	r25, Y+48	; 0x30
    1076:	9c a7       	std	Y+44, r25	; 0x2c
    1078:	8b a7       	std	Y+43, r24	; 0x2b
    107a:	8b a5       	ldd	r24, Y+43	; 0x2b
    107c:	9c a5       	ldd	r25, Y+44	; 0x2c
    107e:	01 97       	sbiw	r24, 0x01	; 1
    1080:	f1 f7       	brne	.-4      	; 0x107e <LCD_displayCharacter+0x108>
    1082:	9c a7       	std	Y+44, r25	; 0x2c
    1084:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1086:	83 e0       	ldi	r24, 0x03	; 3
    1088:	64 e0       	ldi	r22, 0x04	; 4
    108a:	41 e0       	ldi	r20, 0x01	; 1
    108c:	0e 94 0e 10 	call	0x201c	; 0x201c <GPIO_writePin>
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a0 e8       	ldi	r26, 0x80	; 128
    1096:	bf e3       	ldi	r27, 0x3F	; 63
    1098:	8f a3       	std	Y+39, r24	; 0x27
    109a:	98 a7       	std	Y+40, r25	; 0x28
    109c:	a9 a7       	std	Y+41, r26	; 0x29
    109e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a0:	6f a1       	ldd	r22, Y+39	; 0x27
    10a2:	78 a5       	ldd	r23, Y+40	; 0x28
    10a4:	89 a5       	ldd	r24, Y+41	; 0x29
    10a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	4a e7       	ldi	r20, 0x7A	; 122
    10ae:	53 e4       	ldi	r21, 0x43	; 67
    10b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	8b a3       	std	Y+35, r24	; 0x23
    10ba:	9c a3       	std	Y+36, r25	; 0x24
    10bc:	ad a3       	std	Y+37, r26	; 0x25
    10be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10c0:	6b a1       	ldd	r22, Y+35	; 0x23
    10c2:	7c a1       	ldd	r23, Y+36	; 0x24
    10c4:	8d a1       	ldd	r24, Y+37	; 0x25
    10c6:	9e a1       	ldd	r25, Y+38	; 0x26
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e8       	ldi	r20, 0x80	; 128
    10ce:	5f e3       	ldi	r21, 0x3F	; 63
    10d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10d4:	88 23       	and	r24, r24
    10d6:	2c f4       	brge	.+10     	; 0x10e2 <LCD_displayCharacter+0x16c>
		__ticks = 1;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	9a a3       	std	Y+34, r25	; 0x22
    10de:	89 a3       	std	Y+33, r24	; 0x21
    10e0:	3f c0       	rjmp	.+126    	; 0x1160 <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    10e2:	6b a1       	ldd	r22, Y+35	; 0x23
    10e4:	7c a1       	ldd	r23, Y+36	; 0x24
    10e6:	8d a1       	ldd	r24, Y+37	; 0x25
    10e8:	9e a1       	ldd	r25, Y+38	; 0x26
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	3f ef       	ldi	r19, 0xFF	; 255
    10ee:	4f e7       	ldi	r20, 0x7F	; 127
    10f0:	57 e4       	ldi	r21, 0x47	; 71
    10f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10f6:	18 16       	cp	r1, r24
    10f8:	4c f5       	brge	.+82     	; 0x114c <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10fa:	6f a1       	ldd	r22, Y+39	; 0x27
    10fc:	78 a5       	ldd	r23, Y+40	; 0x28
    10fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1100:	9a a5       	ldd	r25, Y+42	; 0x2a
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e2       	ldi	r20, 0x20	; 32
    1108:	51 e4       	ldi	r21, 0x41	; 65
    110a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	bc 01       	movw	r22, r24
    1114:	cd 01       	movw	r24, r26
    1116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	9a a3       	std	Y+34, r25	; 0x22
    1120:	89 a3       	std	Y+33, r24	; 0x21
    1122:	0f c0       	rjmp	.+30     	; 0x1142 <LCD_displayCharacter+0x1cc>
    1124:	89 e1       	ldi	r24, 0x19	; 25
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	98 a3       	std	Y+32, r25	; 0x20
    112a:	8f 8f       	std	Y+31, r24	; 0x1f
    112c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    112e:	98 a1       	ldd	r25, Y+32	; 0x20
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	f1 f7       	brne	.-4      	; 0x1130 <LCD_displayCharacter+0x1ba>
    1134:	98 a3       	std	Y+32, r25	; 0x20
    1136:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1138:	89 a1       	ldd	r24, Y+33	; 0x21
    113a:	9a a1       	ldd	r25, Y+34	; 0x22
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	9a a3       	std	Y+34, r25	; 0x22
    1140:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1142:	89 a1       	ldd	r24, Y+33	; 0x21
    1144:	9a a1       	ldd	r25, Y+34	; 0x22
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	69 f7       	brne	.-38     	; 0x1124 <LCD_displayCharacter+0x1ae>
    114a:	14 c0       	rjmp	.+40     	; 0x1174 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    114c:	6b a1       	ldd	r22, Y+35	; 0x23
    114e:	7c a1       	ldd	r23, Y+36	; 0x24
    1150:	8d a1       	ldd	r24, Y+37	; 0x25
    1152:	9e a1       	ldd	r25, Y+38	; 0x26
    1154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	9a a3       	std	Y+34, r25	; 0x22
    115e:	89 a3       	std	Y+33, r24	; 0x21
    1160:	89 a1       	ldd	r24, Y+33	; 0x21
    1162:	9a a1       	ldd	r25, Y+34	; 0x22
    1164:	9e 8f       	std	Y+30, r25	; 0x1e
    1166:	8d 8f       	std	Y+29, r24	; 0x1d
    1168:	8d 8d       	ldd	r24, Y+29	; 0x1d
    116a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <LCD_displayCharacter+0x1f6>
    1170:	9e 8f       	std	Y+30, r25	; 0x1e
    1172:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    1174:	82 e0       	ldi	r24, 0x02	; 2
    1176:	6a ad       	ldd	r22, Y+58	; 0x3a
    1178:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <GPIO_writePort>
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a0 e8       	ldi	r26, 0x80	; 128
    1182:	bf e3       	ldi	r27, 0x3F	; 63
    1184:	89 8f       	std	Y+25, r24	; 0x19
    1186:	9a 8f       	std	Y+26, r25	; 0x1a
    1188:	ab 8f       	std	Y+27, r26	; 0x1b
    118a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    118c:	69 8d       	ldd	r22, Y+25	; 0x19
    118e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1190:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1192:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	4a e7       	ldi	r20, 0x7A	; 122
    119a:	53 e4       	ldi	r21, 0x43	; 67
    119c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a0:	dc 01       	movw	r26, r24
    11a2:	cb 01       	movw	r24, r22
    11a4:	8d 8b       	std	Y+21, r24	; 0x15
    11a6:	9e 8b       	std	Y+22, r25	; 0x16
    11a8:	af 8b       	std	Y+23, r26	; 0x17
    11aa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11ac:	6d 89       	ldd	r22, Y+21	; 0x15
    11ae:	7e 89       	ldd	r23, Y+22	; 0x16
    11b0:	8f 89       	ldd	r24, Y+23	; 0x17
    11b2:	98 8d       	ldd	r25, Y+24	; 0x18
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e8       	ldi	r20, 0x80	; 128
    11ba:	5f e3       	ldi	r21, 0x3F	; 63
    11bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11c0:	88 23       	and	r24, r24
    11c2:	2c f4       	brge	.+10     	; 0x11ce <LCD_displayCharacter+0x258>
		__ticks = 1;
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	9c 8b       	std	Y+20, r25	; 0x14
    11ca:	8b 8b       	std	Y+19, r24	; 0x13
    11cc:	3f c0       	rjmp	.+126    	; 0x124c <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    11ce:	6d 89       	ldd	r22, Y+21	; 0x15
    11d0:	7e 89       	ldd	r23, Y+22	; 0x16
    11d2:	8f 89       	ldd	r24, Y+23	; 0x17
    11d4:	98 8d       	ldd	r25, Y+24	; 0x18
    11d6:	20 e0       	ldi	r18, 0x00	; 0
    11d8:	3f ef       	ldi	r19, 0xFF	; 255
    11da:	4f e7       	ldi	r20, 0x7F	; 127
    11dc:	57 e4       	ldi	r21, 0x47	; 71
    11de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11e2:	18 16       	cp	r1, r24
    11e4:	4c f5       	brge	.+82     	; 0x1238 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e6:	69 8d       	ldd	r22, Y+25	; 0x19
    11e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11ee:	20 e0       	ldi	r18, 0x00	; 0
    11f0:	30 e0       	ldi	r19, 0x00	; 0
    11f2:	40 e2       	ldi	r20, 0x20	; 32
    11f4:	51 e4       	ldi	r21, 0x41	; 65
    11f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fa:	dc 01       	movw	r26, r24
    11fc:	cb 01       	movw	r24, r22
    11fe:	bc 01       	movw	r22, r24
    1200:	cd 01       	movw	r24, r26
    1202:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	9c 8b       	std	Y+20, r25	; 0x14
    120c:	8b 8b       	std	Y+19, r24	; 0x13
    120e:	0f c0       	rjmp	.+30     	; 0x122e <LCD_displayCharacter+0x2b8>
    1210:	89 e1       	ldi	r24, 0x19	; 25
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	9a 8b       	std	Y+18, r25	; 0x12
    1216:	89 8b       	std	Y+17, r24	; 0x11
    1218:	89 89       	ldd	r24, Y+17	; 0x11
    121a:	9a 89       	ldd	r25, Y+18	; 0x12
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	f1 f7       	brne	.-4      	; 0x121c <LCD_displayCharacter+0x2a6>
    1220:	9a 8b       	std	Y+18, r25	; 0x12
    1222:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1224:	8b 89       	ldd	r24, Y+19	; 0x13
    1226:	9c 89       	ldd	r25, Y+20	; 0x14
    1228:	01 97       	sbiw	r24, 0x01	; 1
    122a:	9c 8b       	std	Y+20, r25	; 0x14
    122c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122e:	8b 89       	ldd	r24, Y+19	; 0x13
    1230:	9c 89       	ldd	r25, Y+20	; 0x14
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	69 f7       	brne	.-38     	; 0x1210 <LCD_displayCharacter+0x29a>
    1236:	14 c0       	rjmp	.+40     	; 0x1260 <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1238:	6d 89       	ldd	r22, Y+21	; 0x15
    123a:	7e 89       	ldd	r23, Y+22	; 0x16
    123c:	8f 89       	ldd	r24, Y+23	; 0x17
    123e:	98 8d       	ldd	r25, Y+24	; 0x18
    1240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	9c 8b       	std	Y+20, r25	; 0x14
    124a:	8b 8b       	std	Y+19, r24	; 0x13
    124c:	8b 89       	ldd	r24, Y+19	; 0x13
    124e:	9c 89       	ldd	r25, Y+20	; 0x14
    1250:	98 8b       	std	Y+16, r25	; 0x10
    1252:	8f 87       	std	Y+15, r24	; 0x0f
    1254:	8f 85       	ldd	r24, Y+15	; 0x0f
    1256:	98 89       	ldd	r25, Y+16	; 0x10
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	f1 f7       	brne	.-4      	; 0x1258 <LCD_displayCharacter+0x2e2>
    125c:	98 8b       	std	Y+16, r25	; 0x10
    125e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1260:	83 e0       	ldi	r24, 0x03	; 3
    1262:	64 e0       	ldi	r22, 0x04	; 4
    1264:	40 e0       	ldi	r20, 0x00	; 0
    1266:	0e 94 0e 10 	call	0x201c	; 0x201c <GPIO_writePin>
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	a0 e8       	ldi	r26, 0x80	; 128
    1270:	bf e3       	ldi	r27, 0x3F	; 63
    1272:	8b 87       	std	Y+11, r24	; 0x0b
    1274:	9c 87       	std	Y+12, r25	; 0x0c
    1276:	ad 87       	std	Y+13, r26	; 0x0d
    1278:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    127a:	6b 85       	ldd	r22, Y+11	; 0x0b
    127c:	7c 85       	ldd	r23, Y+12	; 0x0c
    127e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1280:	9e 85       	ldd	r25, Y+14	; 0x0e
    1282:	20 e0       	ldi	r18, 0x00	; 0
    1284:	30 e0       	ldi	r19, 0x00	; 0
    1286:	4a e7       	ldi	r20, 0x7A	; 122
    1288:	53 e4       	ldi	r21, 0x43	; 67
    128a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128e:	dc 01       	movw	r26, r24
    1290:	cb 01       	movw	r24, r22
    1292:	8f 83       	std	Y+7, r24	; 0x07
    1294:	98 87       	std	Y+8, r25	; 0x08
    1296:	a9 87       	std	Y+9, r26	; 0x09
    1298:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    129a:	6f 81       	ldd	r22, Y+7	; 0x07
    129c:	78 85       	ldd	r23, Y+8	; 0x08
    129e:	89 85       	ldd	r24, Y+9	; 0x09
    12a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	40 e8       	ldi	r20, 0x80	; 128
    12a8:	5f e3       	ldi	r21, 0x3F	; 63
    12aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ae:	88 23       	and	r24, r24
    12b0:	2c f4       	brge	.+10     	; 0x12bc <LCD_displayCharacter+0x346>
		__ticks = 1;
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9e 83       	std	Y+6, r25	; 0x06
    12b8:	8d 83       	std	Y+5, r24	; 0x05
    12ba:	3f c0       	rjmp	.+126    	; 0x133a <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    12bc:	6f 81       	ldd	r22, Y+7	; 0x07
    12be:	78 85       	ldd	r23, Y+8	; 0x08
    12c0:	89 85       	ldd	r24, Y+9	; 0x09
    12c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c4:	20 e0       	ldi	r18, 0x00	; 0
    12c6:	3f ef       	ldi	r19, 0xFF	; 255
    12c8:	4f e7       	ldi	r20, 0x7F	; 127
    12ca:	57 e4       	ldi	r21, 0x47	; 71
    12cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12d0:	18 16       	cp	r1, r24
    12d2:	4c f5       	brge	.+82     	; 0x1326 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12da:	9e 85       	ldd	r25, Y+14	; 0x0e
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e2       	ldi	r20, 0x20	; 32
    12e2:	51 e4       	ldi	r21, 0x41	; 65
    12e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	bc 01       	movw	r22, r24
    12ee:	cd 01       	movw	r24, r26
    12f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	9e 83       	std	Y+6, r25	; 0x06
    12fa:	8d 83       	std	Y+5, r24	; 0x05
    12fc:	0f c0       	rjmp	.+30     	; 0x131c <LCD_displayCharacter+0x3a6>
    12fe:	89 e1       	ldi	r24, 0x19	; 25
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	9c 83       	std	Y+4, r25	; 0x04
    1304:	8b 83       	std	Y+3, r24	; 0x03
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	9c 81       	ldd	r25, Y+4	; 0x04
    130a:	01 97       	sbiw	r24, 0x01	; 1
    130c:	f1 f7       	brne	.-4      	; 0x130a <LCD_displayCharacter+0x394>
    130e:	9c 83       	std	Y+4, r25	; 0x04
    1310:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	9e 81       	ldd	r25, Y+6	; 0x06
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	9e 83       	std	Y+6, r25	; 0x06
    131a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    131c:	8d 81       	ldd	r24, Y+5	; 0x05
    131e:	9e 81       	ldd	r25, Y+6	; 0x06
    1320:	00 97       	sbiw	r24, 0x00	; 0
    1322:	69 f7       	brne	.-38     	; 0x12fe <LCD_displayCharacter+0x388>
    1324:	14 c0       	rjmp	.+40     	; 0x134e <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1326:	6f 81       	ldd	r22, Y+7	; 0x07
    1328:	78 85       	ldd	r23, Y+8	; 0x08
    132a:	89 85       	ldd	r24, Y+9	; 0x09
    132c:	9a 85       	ldd	r25, Y+10	; 0x0a
    132e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	9e 83       	std	Y+6, r25	; 0x06
    1338:	8d 83       	std	Y+5, r24	; 0x05
    133a:	8d 81       	ldd	r24, Y+5	; 0x05
    133c:	9e 81       	ldd	r25, Y+6	; 0x06
    133e:	9a 83       	std	Y+2, r25	; 0x02
    1340:	89 83       	std	Y+1, r24	; 0x01
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	9a 81       	ldd	r25, Y+2	; 0x02
    1346:	01 97       	sbiw	r24, 0x01	; 1
    1348:	f1 f7       	brne	.-4      	; 0x1346 <LCD_displayCharacter+0x3d0>
    134a:	9a 83       	std	Y+2, r25	; 0x02
    134c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    134e:	ea 96       	adiw	r28, 0x3a	; 58
    1350:	0f b6       	in	r0, 0x3f	; 63
    1352:	f8 94       	cli
    1354:	de bf       	out	0x3e, r29	; 62
    1356:	0f be       	out	0x3f, r0	; 63
    1358:	cd bf       	out	0x3d, r28	; 61
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <LCD_displayString+0x6>
    1366:	0f 92       	push	r0
    1368:	cd b7       	in	r28, 0x3d	; 61
    136a:	de b7       	in	r29, 0x3e	; 62
    136c:	9b 83       	std	Y+3, r25	; 0x03
    136e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1370:	19 82       	std	Y+1, r1	; 0x01
    1372:	0e c0       	rjmp	.+28     	; 0x1390 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	8a 81       	ldd	r24, Y+2	; 0x02
    137c:	9b 81       	ldd	r25, Y+3	; 0x03
    137e:	fc 01       	movw	r30, r24
    1380:	e2 0f       	add	r30, r18
    1382:	f3 1f       	adc	r31, r19
    1384:	80 81       	ld	r24, Z
    1386:	0e 94 bb 07 	call	0xf76	; 0xf76 <LCD_displayCharacter>
		i++;
    138a:	89 81       	ldd	r24, Y+1	; 0x01
    138c:	8f 5f       	subi	r24, 0xFF	; 255
    138e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	28 2f       	mov	r18, r24
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	8a 81       	ldd	r24, Y+2	; 0x02
    1398:	9b 81       	ldd	r25, Y+3	; 0x03
    139a:	fc 01       	movw	r30, r24
    139c:	e2 0f       	add	r30, r18
    139e:	f3 1f       	adc	r31, r19
    13a0:	80 81       	ld	r24, Z
    13a2:	88 23       	and	r24, r24
    13a4:	39 f7       	brne	.-50     	; 0x1374 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	08 95       	ret

000013b2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <LCD_moveCursor+0x6>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <LCD_moveCursor+0x8>
    13ba:	0f 92       	push	r0
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	8a 83       	std	Y+2, r24	; 0x02
    13c2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	28 2f       	mov	r18, r24
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	3d 83       	std	Y+5, r19	; 0x05
    13cc:	2c 83       	std	Y+4, r18	; 0x04
    13ce:	8c 81       	ldd	r24, Y+4	; 0x04
    13d0:	9d 81       	ldd	r25, Y+5	; 0x05
    13d2:	81 30       	cpi	r24, 0x01	; 1
    13d4:	91 05       	cpc	r25, r1
    13d6:	c1 f0       	breq	.+48     	; 0x1408 <LCD_moveCursor+0x56>
    13d8:	2c 81       	ldd	r18, Y+4	; 0x04
    13da:	3d 81       	ldd	r19, Y+5	; 0x05
    13dc:	22 30       	cpi	r18, 0x02	; 2
    13de:	31 05       	cpc	r19, r1
    13e0:	2c f4       	brge	.+10     	; 0x13ec <LCD_moveCursor+0x3a>
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	9d 81       	ldd	r25, Y+5	; 0x05
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	61 f0       	breq	.+24     	; 0x1402 <LCD_moveCursor+0x50>
    13ea:	19 c0       	rjmp	.+50     	; 0x141e <LCD_moveCursor+0x6c>
    13ec:	2c 81       	ldd	r18, Y+4	; 0x04
    13ee:	3d 81       	ldd	r19, Y+5	; 0x05
    13f0:	22 30       	cpi	r18, 0x02	; 2
    13f2:	31 05       	cpc	r19, r1
    13f4:	69 f0       	breq	.+26     	; 0x1410 <LCD_moveCursor+0x5e>
    13f6:	8c 81       	ldd	r24, Y+4	; 0x04
    13f8:	9d 81       	ldd	r25, Y+5	; 0x05
    13fa:	83 30       	cpi	r24, 0x03	; 3
    13fc:	91 05       	cpc	r25, r1
    13fe:	61 f0       	breq	.+24     	; 0x1418 <LCD_moveCursor+0x66>
    1400:	0e c0       	rjmp	.+28     	; 0x141e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1402:	8b 81       	ldd	r24, Y+3	; 0x03
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	0b c0       	rjmp	.+22     	; 0x141e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	80 5c       	subi	r24, 0xC0	; 192
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	07 c0       	rjmp	.+14     	; 0x141e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	80 5f       	subi	r24, 0xF0	; 240
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	03 c0       	rjmp	.+6      	; 0x141e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	80 5b       	subi	r24, 0xB0	; 176
    141c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	80 68       	ori	r24, 0x80	; 128
    1422:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_sendCommand>
}
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	00 d0       	rcall	.+0      	; 0x143c <LCD_displayStringRowColumn+0x6>
    143c:	00 d0       	rcall	.+0      	; 0x143e <LCD_displayStringRowColumn+0x8>
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	89 83       	std	Y+1, r24	; 0x01
    1444:	6a 83       	std	Y+2, r22	; 0x02
    1446:	5c 83       	std	Y+4, r21	; 0x04
    1448:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	6a 81       	ldd	r22, Y+2	; 0x02
    144e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1452:	8b 81       	ldd	r24, Y+3	; 0x03
    1454:	9c 81       	ldd	r25, Y+4	; 0x04
    1456:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_displayString>
}
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	cd b7       	in	r28, 0x3d	; 61
    146e:	de b7       	in	r29, 0x3e	; 62
    1470:	62 97       	sbiw	r28, 0x12	; 18
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	9a 8b       	std	Y+18, r25	; 0x12
    147e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1480:	89 89       	ldd	r24, Y+17	; 0x11
    1482:	9a 89       	ldd	r25, Y+18	; 0x12
    1484:	9e 01       	movw	r18, r28
    1486:	2f 5f       	subi	r18, 0xFF	; 255
    1488:	3f 4f       	sbci	r19, 0xFF	; 255
    148a:	b9 01       	movw	r22, r18
    148c:	4a e0       	ldi	r20, 0x0A	; 10
    148e:	50 e0       	ldi	r21, 0x00	; 0
    1490:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <itoa>
   LCD_displayString(buff); /* Display the string */
    1494:	ce 01       	movw	r24, r28
    1496:	01 96       	adiw	r24, 0x01	; 1
    1498:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_displayString>
}
    149c:	62 96       	adiw	r28, 0x12	; 18
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
    14a8:	cf 91       	pop	r28
    14aa:	df 91       	pop	r29
    14ac:	08 95       	ret

000014ae <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	cd b7       	in	r28, 0x3d	; 61
    14b4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_sendCommand>
}
    14bc:	cf 91       	pop	r28
    14be:	df 91       	pop	r29
    14c0:	08 95       	ret

000014c2 <main>:
uint8 g_error=0;
uint8 checked=0;
uint8 g_check=0;

int main(void)
{
    14c2:	df 93       	push	r29
    14c4:	cf 93       	push	r28
    14c6:	cd b7       	in	r28, 0x3d	; 61
    14c8:	de b7       	in	r29, 0x3e	; 62
    14ca:	2c 97       	sbiw	r28, 0x0c	; 12
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
	//uart initialization

	Uart_ConfigType config={EIGHT_BIT,DISABLED,ONE_BIT,9600};
    14d6:	ce 01       	movw	r24, r28
    14d8:	01 96       	adiw	r24, 0x01	; 1
    14da:	99 87       	std	Y+9, r25	; 0x09
    14dc:	88 87       	std	Y+8, r24	; 0x08
    14de:	ea ef       	ldi	r30, 0xFA	; 250
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	fb 87       	std	Y+11, r31	; 0x0b
    14e4:	ea 87       	std	Y+10, r30	; 0x0a
    14e6:	f7 e0       	ldi	r31, 0x07	; 7
    14e8:	fc 87       	std	Y+12, r31	; 0x0c
    14ea:	ea 85       	ldd	r30, Y+10	; 0x0a
    14ec:	fb 85       	ldd	r31, Y+11	; 0x0b
    14ee:	00 80       	ld	r0, Z
    14f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    14f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    14f4:	01 96       	adiw	r24, 0x01	; 1
    14f6:	9b 87       	std	Y+11, r25	; 0x0b
    14f8:	8a 87       	std	Y+10, r24	; 0x0a
    14fa:	e8 85       	ldd	r30, Y+8	; 0x08
    14fc:	f9 85       	ldd	r31, Y+9	; 0x09
    14fe:	00 82       	st	Z, r0
    1500:	88 85       	ldd	r24, Y+8	; 0x08
    1502:	99 85       	ldd	r25, Y+9	; 0x09
    1504:	01 96       	adiw	r24, 0x01	; 1
    1506:	99 87       	std	Y+9, r25	; 0x09
    1508:	88 87       	std	Y+8, r24	; 0x08
    150a:	9c 85       	ldd	r25, Y+12	; 0x0c
    150c:	91 50       	subi	r25, 0x01	; 1
    150e:	9c 87       	std	Y+12, r25	; 0x0c
    1510:	ec 85       	ldd	r30, Y+12	; 0x0c
    1512:	ee 23       	and	r30, r30
    1514:	51 f7       	brne	.-44     	; 0x14ea <main+0x28>
	UART_init(&config);
    1516:	ce 01       	movw	r24, r28
    1518:	01 96       	adiw	r24, 0x01	; 1
    151a:	0e 94 4a 14 	call	0x2894	; 0x2894 <UART_init>

	// lcd initialization
	LCD_init();
    151e:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_init>

	SREG|=1<<7; // interrupt enable
    1522:	af e5       	ldi	r26, 0x5F	; 95
    1524:	b0 e0       	ldi	r27, 0x00	; 0
    1526:	ef e5       	ldi	r30, 0x5F	; 95
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	80 81       	ld	r24, Z
    152c:	80 68       	ori	r24, 0x80	; 128
    152e:	8c 93       	st	X, r24

	MC1_First_Run();
    1530:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <MC1_First_Run>
	while(1)
	{
		if(return_flag==FLAG_FIRSTRUN)
    1534:	80 91 f9 00 	lds	r24, 0x00F9
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	e1 f7       	brne	.-8      	; 0x1534 <main+0x72>
			MC1_Main_options();
    153c:	0e 94 b8 0c 	call	0x1970	; 0x1970 <MC1_Main_options>
    1540:	f9 cf       	rjmp	.-14     	; 0x1534 <main+0x72>

00001542 <MC1_Get_password>:
extern uint8 g_check;


// ******** functions **********
void MC1_Get_password(uint8* password)
{
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	cd b7       	in	r28, 0x3d	; 61
    1548:	de b7       	in	r29, 0x3e	; 62
    154a:	ae 97       	sbiw	r28, 0x2e	; 46
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	9e a7       	std	Y+46, r25	; 0x2e
    1558:	8d a7       	std	Y+45, r24	; 0x2d
	uint8 digit_count=0;
    155a:	1c a6       	std	Y+44, r1	; 0x2c
    155c:	73 c1       	rjmp	.+742    	; 0x1844 <MC1_Get_password+0x302>
	uint8 key;
	while(digit_count<6)
	{
		key=KEYPAD_getPressedKey(); //get the pressed key from keypad
    155e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <KEYPAD_getPressedKey>
    1562:	8b a7       	std	Y+43, r24	; 0x2b
    1564:	80 e0       	ldi	r24, 0x00	; 0
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	a8 e4       	ldi	r26, 0x48	; 72
    156a:	b4 e4       	ldi	r27, 0x44	; 68
    156c:	8f a3       	std	Y+39, r24	; 0x27
    156e:	98 a7       	std	Y+40, r25	; 0x28
    1570:	a9 a7       	std	Y+41, r26	; 0x29
    1572:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1574:	6f a1       	ldd	r22, Y+39	; 0x27
    1576:	78 a5       	ldd	r23, Y+40	; 0x28
    1578:	89 a5       	ldd	r24, Y+41	; 0x29
    157a:	9a a5       	ldd	r25, Y+42	; 0x2a
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	4a e7       	ldi	r20, 0x7A	; 122
    1582:	53 e4       	ldi	r21, 0x43	; 67
    1584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1588:	dc 01       	movw	r26, r24
    158a:	cb 01       	movw	r24, r22
    158c:	8b a3       	std	Y+35, r24	; 0x23
    158e:	9c a3       	std	Y+36, r25	; 0x24
    1590:	ad a3       	std	Y+37, r26	; 0x25
    1592:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1594:	6b a1       	ldd	r22, Y+35	; 0x23
    1596:	7c a1       	ldd	r23, Y+36	; 0x24
    1598:	8d a1       	ldd	r24, Y+37	; 0x25
    159a:	9e a1       	ldd	r25, Y+38	; 0x26
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	40 e8       	ldi	r20, 0x80	; 128
    15a2:	5f e3       	ldi	r21, 0x3F	; 63
    15a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15a8:	88 23       	and	r24, r24
    15aa:	2c f4       	brge	.+10     	; 0x15b6 <MC1_Get_password+0x74>
		__ticks = 1;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	9a a3       	std	Y+34, r25	; 0x22
    15b2:	89 a3       	std	Y+33, r24	; 0x21
    15b4:	3f c0       	rjmp	.+126    	; 0x1634 <MC1_Get_password+0xf2>
	else if (__tmp > 65535)
    15b6:	6b a1       	ldd	r22, Y+35	; 0x23
    15b8:	7c a1       	ldd	r23, Y+36	; 0x24
    15ba:	8d a1       	ldd	r24, Y+37	; 0x25
    15bc:	9e a1       	ldd	r25, Y+38	; 0x26
    15be:	20 e0       	ldi	r18, 0x00	; 0
    15c0:	3f ef       	ldi	r19, 0xFF	; 255
    15c2:	4f e7       	ldi	r20, 0x7F	; 127
    15c4:	57 e4       	ldi	r21, 0x47	; 71
    15c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ca:	18 16       	cp	r1, r24
    15cc:	4c f5       	brge	.+82     	; 0x1620 <MC1_Get_password+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ce:	6f a1       	ldd	r22, Y+39	; 0x27
    15d0:	78 a5       	ldd	r23, Y+40	; 0x28
    15d2:	89 a5       	ldd	r24, Y+41	; 0x29
    15d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	40 e2       	ldi	r20, 0x20	; 32
    15dc:	51 e4       	ldi	r21, 0x41	; 65
    15de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15e2:	dc 01       	movw	r26, r24
    15e4:	cb 01       	movw	r24, r22
    15e6:	bc 01       	movw	r22, r24
    15e8:	cd 01       	movw	r24, r26
    15ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ee:	dc 01       	movw	r26, r24
    15f0:	cb 01       	movw	r24, r22
    15f2:	9a a3       	std	Y+34, r25	; 0x22
    15f4:	89 a3       	std	Y+33, r24	; 0x21
    15f6:	0f c0       	rjmp	.+30     	; 0x1616 <MC1_Get_password+0xd4>
    15f8:	89 e1       	ldi	r24, 0x19	; 25
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	98 a3       	std	Y+32, r25	; 0x20
    15fe:	8f 8f       	std	Y+31, r24	; 0x1f
    1600:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1602:	98 a1       	ldd	r25, Y+32	; 0x20
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <MC1_Get_password+0xc2>
    1608:	98 a3       	std	Y+32, r25	; 0x20
    160a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    160c:	89 a1       	ldd	r24, Y+33	; 0x21
    160e:	9a a1       	ldd	r25, Y+34	; 0x22
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	9a a3       	std	Y+34, r25	; 0x22
    1614:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1616:	89 a1       	ldd	r24, Y+33	; 0x21
    1618:	9a a1       	ldd	r25, Y+34	; 0x22
    161a:	00 97       	sbiw	r24, 0x00	; 0
    161c:	69 f7       	brne	.-38     	; 0x15f8 <MC1_Get_password+0xb6>
    161e:	14 c0       	rjmp	.+40     	; 0x1648 <MC1_Get_password+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1620:	6b a1       	ldd	r22, Y+35	; 0x23
    1622:	7c a1       	ldd	r23, Y+36	; 0x24
    1624:	8d a1       	ldd	r24, Y+37	; 0x25
    1626:	9e a1       	ldd	r25, Y+38	; 0x26
    1628:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	9a a3       	std	Y+34, r25	; 0x22
    1632:	89 a3       	std	Y+33, r24	; 0x21
    1634:	89 a1       	ldd	r24, Y+33	; 0x21
    1636:	9a a1       	ldd	r25, Y+34	; 0x22
    1638:	9e 8f       	std	Y+30, r25	; 0x1e
    163a:	8d 8f       	std	Y+29, r24	; 0x1d
    163c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    163e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1640:	01 97       	sbiw	r24, 0x01	; 1
    1642:	f1 f7       	brne	.-4      	; 0x1640 <MC1_Get_password+0xfe>
    1644:	9e 8f       	std	Y+30, r25	; 0x1e
    1646:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(800);
		if(key >=0 && key<=9)
    1648:	8b a5       	ldd	r24, Y+43	; 0x2b
    164a:	8a 30       	cpi	r24, 0x0A	; 10
    164c:	08 f0       	brcs	.+2      	; 0x1650 <MC1_Get_password+0x10e>
    164e:	87 c0       	rjmp	.+270    	; 0x175e <MC1_Get_password+0x21c>
		{
			password[digit_count]=key;
    1650:	8c a5       	ldd	r24, Y+44	; 0x2c
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	8d a5       	ldd	r24, Y+45	; 0x2d
    1658:	9e a5       	ldd	r25, Y+46	; 0x2e
    165a:	fc 01       	movw	r30, r24
    165c:	e2 0f       	add	r30, r18
    165e:	f3 1f       	adc	r31, r19
    1660:	8b a5       	ldd	r24, Y+43	; 0x2b
    1662:	80 83       	st	Z, r24
			LCD_displayStringRowColumn(1, digit_count, "*");/* Display'*'to hide the password for security */
    1664:	20 e6       	ldi	r18, 0x60	; 96
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	81 e0       	ldi	r24, 0x01	; 1
    166a:	6c a5       	ldd	r22, Y+44	; 0x2c
    166c:	a9 01       	movw	r20, r18
    166e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	aa e7       	ldi	r26, 0x7A	; 122
    1678:	b4 e4       	ldi	r27, 0x44	; 68
    167a:	89 8f       	std	Y+25, r24	; 0x19
    167c:	9a 8f       	std	Y+26, r25	; 0x1a
    167e:	ab 8f       	std	Y+27, r26	; 0x1b
    1680:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1682:	69 8d       	ldd	r22, Y+25	; 0x19
    1684:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1686:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1688:	9c 8d       	ldd	r25, Y+28	; 0x1c
    168a:	20 e0       	ldi	r18, 0x00	; 0
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	4a e7       	ldi	r20, 0x7A	; 122
    1690:	53 e4       	ldi	r21, 0x43	; 67
    1692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1696:	dc 01       	movw	r26, r24
    1698:	cb 01       	movw	r24, r22
    169a:	8d 8b       	std	Y+21, r24	; 0x15
    169c:	9e 8b       	std	Y+22, r25	; 0x16
    169e:	af 8b       	std	Y+23, r26	; 0x17
    16a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16a2:	6d 89       	ldd	r22, Y+21	; 0x15
    16a4:	7e 89       	ldd	r23, Y+22	; 0x16
    16a6:	8f 89       	ldd	r24, Y+23	; 0x17
    16a8:	98 8d       	ldd	r25, Y+24	; 0x18
    16aa:	20 e0       	ldi	r18, 0x00	; 0
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	40 e8       	ldi	r20, 0x80	; 128
    16b0:	5f e3       	ldi	r21, 0x3F	; 63
    16b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16b6:	88 23       	and	r24, r24
    16b8:	2c f4       	brge	.+10     	; 0x16c4 <MC1_Get_password+0x182>
		__ticks = 1;
    16ba:	81 e0       	ldi	r24, 0x01	; 1
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	9c 8b       	std	Y+20, r25	; 0x14
    16c0:	8b 8b       	std	Y+19, r24	; 0x13
    16c2:	3f c0       	rjmp	.+126    	; 0x1742 <MC1_Get_password+0x200>
	else if (__tmp > 65535)
    16c4:	6d 89       	ldd	r22, Y+21	; 0x15
    16c6:	7e 89       	ldd	r23, Y+22	; 0x16
    16c8:	8f 89       	ldd	r24, Y+23	; 0x17
    16ca:	98 8d       	ldd	r25, Y+24	; 0x18
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	3f ef       	ldi	r19, 0xFF	; 255
    16d0:	4f e7       	ldi	r20, 0x7F	; 127
    16d2:	57 e4       	ldi	r21, 0x47	; 71
    16d4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16d8:	18 16       	cp	r1, r24
    16da:	4c f5       	brge	.+82     	; 0x172e <MC1_Get_password+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16dc:	69 8d       	ldd	r22, Y+25	; 0x19
    16de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e2       	ldi	r20, 0x20	; 32
    16ea:	51 e4       	ldi	r21, 0x41	; 65
    16ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	bc 01       	movw	r22, r24
    16f6:	cd 01       	movw	r24, r26
    16f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	9c 8b       	std	Y+20, r25	; 0x14
    1702:	8b 8b       	std	Y+19, r24	; 0x13
    1704:	0f c0       	rjmp	.+30     	; 0x1724 <MC1_Get_password+0x1e2>
    1706:	89 e1       	ldi	r24, 0x19	; 25
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	9a 8b       	std	Y+18, r25	; 0x12
    170c:	89 8b       	std	Y+17, r24	; 0x11
    170e:	89 89       	ldd	r24, Y+17	; 0x11
    1710:	9a 89       	ldd	r25, Y+18	; 0x12
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <MC1_Get_password+0x1d0>
    1716:	9a 8b       	std	Y+18, r25	; 0x12
    1718:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171a:	8b 89       	ldd	r24, Y+19	; 0x13
    171c:	9c 89       	ldd	r25, Y+20	; 0x14
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	9c 8b       	std	Y+20, r25	; 0x14
    1722:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1724:	8b 89       	ldd	r24, Y+19	; 0x13
    1726:	9c 89       	ldd	r25, Y+20	; 0x14
    1728:	00 97       	sbiw	r24, 0x00	; 0
    172a:	69 f7       	brne	.-38     	; 0x1706 <MC1_Get_password+0x1c4>
    172c:	14 c0       	rjmp	.+40     	; 0x1756 <MC1_Get_password+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    172e:	6d 89       	ldd	r22, Y+21	; 0x15
    1730:	7e 89       	ldd	r23, Y+22	; 0x16
    1732:	8f 89       	ldd	r24, Y+23	; 0x17
    1734:	98 8d       	ldd	r25, Y+24	; 0x18
    1736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    173a:	dc 01       	movw	r26, r24
    173c:	cb 01       	movw	r24, r22
    173e:	9c 8b       	std	Y+20, r25	; 0x14
    1740:	8b 8b       	std	Y+19, r24	; 0x13
    1742:	8b 89       	ldd	r24, Y+19	; 0x13
    1744:	9c 89       	ldd	r25, Y+20	; 0x14
    1746:	98 8b       	std	Y+16, r25	; 0x10
    1748:	8f 87       	std	Y+15, r24	; 0x0f
    174a:	8f 85       	ldd	r24, Y+15	; 0x0f
    174c:	98 89       	ldd	r25, Y+16	; 0x10
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	f1 f7       	brne	.-4      	; 0x174e <MC1_Get_password+0x20c>
    1752:	98 8b       	std	Y+16, r25	; 0x10
    1754:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(1000);
			break;
		}
		_delay_ms(1000);
		digit_count++;
    1756:	8c a5       	ldd	r24, Y+44	; 0x2c
    1758:	8f 5f       	subi	r24, 0xFF	; 255
    175a:	8c a7       	std	Y+44, r24	; 0x2c
    175c:	73 c0       	rjmp	.+230    	; 0x1844 <MC1_Get_password+0x302>
    175e:	80 e0       	ldi	r24, 0x00	; 0
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	aa e7       	ldi	r26, 0x7A	; 122
    1764:	b4 e4       	ldi	r27, 0x44	; 68
    1766:	8b 87       	std	Y+11, r24	; 0x0b
    1768:	9c 87       	std	Y+12, r25	; 0x0c
    176a:	ad 87       	std	Y+13, r26	; 0x0d
    176c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1770:	7c 85       	ldd	r23, Y+12	; 0x0c
    1772:	8d 85       	ldd	r24, Y+13	; 0x0d
    1774:	9e 85       	ldd	r25, Y+14	; 0x0e
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	4a e7       	ldi	r20, 0x7A	; 122
    177c:	53 e4       	ldi	r21, 0x43	; 67
    177e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	8f 83       	std	Y+7, r24	; 0x07
    1788:	98 87       	std	Y+8, r25	; 0x08
    178a:	a9 87       	std	Y+9, r26	; 0x09
    178c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    178e:	6f 81       	ldd	r22, Y+7	; 0x07
    1790:	78 85       	ldd	r23, Y+8	; 0x08
    1792:	89 85       	ldd	r24, Y+9	; 0x09
    1794:	9a 85       	ldd	r25, Y+10	; 0x0a
    1796:	20 e0       	ldi	r18, 0x00	; 0
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	40 e8       	ldi	r20, 0x80	; 128
    179c:	5f e3       	ldi	r21, 0x3F	; 63
    179e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17a2:	88 23       	and	r24, r24
    17a4:	2c f4       	brge	.+10     	; 0x17b0 <MC1_Get_password+0x26e>
		__ticks = 1;
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	9e 83       	std	Y+6, r25	; 0x06
    17ac:	8d 83       	std	Y+5, r24	; 0x05
    17ae:	3f c0       	rjmp	.+126    	; 0x182e <MC1_Get_password+0x2ec>
	else if (__tmp > 65535)
    17b0:	6f 81       	ldd	r22, Y+7	; 0x07
    17b2:	78 85       	ldd	r23, Y+8	; 0x08
    17b4:	89 85       	ldd	r24, Y+9	; 0x09
    17b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	3f ef       	ldi	r19, 0xFF	; 255
    17bc:	4f e7       	ldi	r20, 0x7F	; 127
    17be:	57 e4       	ldi	r21, 0x47	; 71
    17c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17c4:	18 16       	cp	r1, r24
    17c6:	4c f5       	brge	.+82     	; 0x181a <MC1_Get_password+0x2d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    17cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e2       	ldi	r20, 0x20	; 32
    17d6:	51 e4       	ldi	r21, 0x41	; 65
    17d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	bc 01       	movw	r22, r24
    17e2:	cd 01       	movw	r24, r26
    17e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17e8:	dc 01       	movw	r26, r24
    17ea:	cb 01       	movw	r24, r22
    17ec:	9e 83       	std	Y+6, r25	; 0x06
    17ee:	8d 83       	std	Y+5, r24	; 0x05
    17f0:	0f c0       	rjmp	.+30     	; 0x1810 <MC1_Get_password+0x2ce>
    17f2:	89 e1       	ldi	r24, 0x19	; 25
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	9c 83       	std	Y+4, r25	; 0x04
    17f8:	8b 83       	std	Y+3, r24	; 0x03
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	9c 81       	ldd	r25, Y+4	; 0x04
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	f1 f7       	brne	.-4      	; 0x17fe <MC1_Get_password+0x2bc>
    1802:	9c 83       	std	Y+4, r25	; 0x04
    1804:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1806:	8d 81       	ldd	r24, Y+5	; 0x05
    1808:	9e 81       	ldd	r25, Y+6	; 0x06
    180a:	01 97       	sbiw	r24, 0x01	; 1
    180c:	9e 83       	std	Y+6, r25	; 0x06
    180e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1810:	8d 81       	ldd	r24, Y+5	; 0x05
    1812:	9e 81       	ldd	r25, Y+6	; 0x06
    1814:	00 97       	sbiw	r24, 0x00	; 0
    1816:	69 f7       	brne	.-38     	; 0x17f2 <MC1_Get_password+0x2b0>
    1818:	19 c0       	rjmp	.+50     	; 0x184c <MC1_Get_password+0x30a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181a:	6f 81       	ldd	r22, Y+7	; 0x07
    181c:	78 85       	ldd	r23, Y+8	; 0x08
    181e:	89 85       	ldd	r24, Y+9	; 0x09
    1820:	9a 85       	ldd	r25, Y+10	; 0x0a
    1822:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1826:	dc 01       	movw	r26, r24
    1828:	cb 01       	movw	r24, r22
    182a:	9e 83       	std	Y+6, r25	; 0x06
    182c:	8d 83       	std	Y+5, r24	; 0x05
    182e:	8d 81       	ldd	r24, Y+5	; 0x05
    1830:	9e 81       	ldd	r25, Y+6	; 0x06
    1832:	9a 83       	std	Y+2, r25	; 0x02
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	89 81       	ldd	r24, Y+1	; 0x01
    1838:	9a 81       	ldd	r25, Y+2	; 0x02
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	f1 f7       	brne	.-4      	; 0x183a <MC1_Get_password+0x2f8>
    183e:	9a 83       	std	Y+2, r25	; 0x02
    1840:	89 83       	std	Y+1, r24	; 0x01
    1842:	04 c0       	rjmp	.+8      	; 0x184c <MC1_Get_password+0x30a>
// ******** functions **********
void MC1_Get_password(uint8* password)
{
	uint8 digit_count=0;
	uint8 key;
	while(digit_count<6)
    1844:	8c a5       	ldd	r24, Y+44	; 0x2c
    1846:	86 30       	cpi	r24, 0x06	; 6
    1848:	08 f4       	brcc	.+2      	; 0x184c <MC1_Get_password+0x30a>
    184a:	89 ce       	rjmp	.-750    	; 0x155e <MC1_Get_password+0x1c>
			break;
		}
		_delay_ms(1000);
		digit_count++;
	}
}
    184c:	ae 96       	adiw	r28, 0x2e	; 46
    184e:	0f b6       	in	r0, 0x3f	; 63
    1850:	f8 94       	cli
    1852:	de bf       	out	0x3e, r29	; 62
    1854:	0f be       	out	0x3f, r0	; 63
    1856:	cd bf       	out	0x3d, r28	; 61
    1858:	cf 91       	pop	r28
    185a:	df 91       	pop	r29
    185c:	08 95       	ret

0000185e <MC1_pass_creating>:

void MC1_pass_creating()
{
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen(); //first clear screen
    1866:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Enter new Pass:");
    186a:	22 e6       	ldi	r18, 0x62	; 98
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	60 e0       	ldi	r22, 0x00	; 0
    1872:	a9 01       	movw	r20, r18
    1874:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
	MC1_Get_password(Fisrt_pass);
    1878:	8a e2       	ldi	r24, 0x2A	; 42
    187a:	91 e0       	ldi	r25, 0x01	; 1
    187c:	0e 94 a1 0a 	call	0x1542	; 0x1542 <MC1_Get_password>
	UART_sendByte(ready);
    1880:	82 e0       	ldi	r24, 0x02	; 2
    1882:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
	while(UART_receiveByte() != MC2_READY){};
    1886:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    188a:	80 31       	cpi	r24, 0x10	; 16
    188c:	e1 f7       	brne	.-8      	; 0x1886 <MC1_pass_creating+0x28>

	MC1_send_password(Fisrt_pass);
    188e:	8a e2       	ldi	r24, 0x2A	; 42
    1890:	91 e0       	ldi	r25, 0x01	; 1
    1892:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <MC1_send_password>

	while(UART_receiveByte() != received){};
    1896:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	e1 f7       	brne	.-8      	; 0x1896 <MC1_pass_creating+0x38>
	LCD_clearScreen();        //clear screen
    189e:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"re_Enter the Pass:");
    18a2:	22 e7       	ldi	r18, 0x72	; 114
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	a9 01       	movw	r20, r18
    18ac:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
	MC1_Get_password(Second_pass);
    18b0:	80 e2       	ldi	r24, 0x20	; 32
    18b2:	91 e0       	ldi	r25, 0x01	; 1
    18b4:	0e 94 a1 0a 	call	0x1542	; 0x1542 <MC1_Get_password>
	UART_sendByte(REPASSWORD);
    18b8:	84 e0       	ldi	r24, 0x04	; 4
    18ba:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
	while(UART_receiveByte() != send){};
    18be:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    18c2:	83 30       	cpi	r24, 0x03	; 3
    18c4:	e1 f7       	brne	.-8      	; 0x18be <MC1_pass_creating+0x60>
	MC1_send_password(Second_pass);
    18c6:	80 e2       	ldi	r24, 0x20	; 32
    18c8:	91 e0       	ldi	r25, 0x01	; 1
    18ca:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <MC1_send_password>

	while(UART_receiveByte() != received){};
    18ce:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    18d2:	81 30       	cpi	r24, 0x01	; 1
    18d4:	e1 f7       	brne	.-8      	; 0x18ce <MC1_pass_creating+0x70>
}
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <MC1_send_password>:

void MC1_send_password(const uint8 *array)
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <MC1_send_password+0x6>
    18e2:	0f 92       	push	r0
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	9b 83       	std	Y+3, r25	; 0x03
    18ea:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 digit_count=0;digit_count<5;digit_count++)
    18ec:	19 82       	std	Y+1, r1	; 0x01
    18ee:	0e c0       	rjmp	.+28     	; 0x190c <MC1_send_password+0x30>
	{
		UART_sendByte(array[digit_count]);
    18f0:	89 81       	ldd	r24, Y+1	; 0x01
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	9b 81       	ldd	r25, Y+3	; 0x03
    18fa:	fc 01       	movw	r30, r24
    18fc:	e2 0f       	add	r30, r18
    18fe:	f3 1f       	adc	r31, r19
    1900:	80 81       	ld	r24, Z
    1902:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
	while(UART_receiveByte() != received){};
}

void MC1_send_password(const uint8 *array)
{
	for(uint8 digit_count=0;digit_count<5;digit_count++)
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	8f 5f       	subi	r24, 0xFF	; 255
    190a:	89 83       	std	Y+1, r24	; 0x01
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	85 30       	cpi	r24, 0x05	; 5
    1910:	78 f3       	brcs	.-34     	; 0x18f0 <MC1_send_password+0x14>
	{
		UART_sendByte(array[digit_count]);
	}
}
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <Check_pass>:


uint8 Check_pass()
{
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1926:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
	LCD_displayString("Please Enter pass:");
    192a:	85 e8       	ldi	r24, 0x85	; 133
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_displayString>
	MC1_Get_password(PasswordCheck);
    1932:	86 e1       	ldi	r24, 0x16	; 22
    1934:	91 e0       	ldi	r25, 0x01	; 1
    1936:	0e 94 a1 0a 	call	0x1542	; 0x1542 <MC1_Get_password>
	UART_sendByte(CHECK_PASS);
    193a:	85 e0       	ldi	r24, 0x05	; 5
    193c:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
	while(UART_receiveByte()!=CHECK_PASS);
    1940:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    1944:	85 30       	cpi	r24, 0x05	; 5
    1946:	e1 f7       	brne	.-8      	; 0x1940 <Check_pass+0x22>
	MC1_send_password(PasswordCheck);
    1948:	86 e1       	ldi	r24, 0x16	; 22
    194a:	91 e0       	ldi	r25, 0x01	; 1
    194c:	0e 94 6e 0c 	call	0x18dc	; 0x18dc <MC1_send_password>
	while(UART_receiveByte()!=result);
    1950:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    1954:	86 30       	cpi	r24, 0x06	; 6
    1956:	e1 f7       	brne	.-8      	; 0x1950 <Check_pass+0x32>
	UART_sendByte(result);
    1958:	86 e0       	ldi	r24, 0x06	; 6
    195a:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
	g_check=UART_receiveByte();
    195e:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    1962:	80 93 10 01 	sts	0x0110, r24
	return g_check;
    1966:	80 91 10 01 	lds	r24, 0x0110
}
    196a:	cf 91       	pop	r28
    196c:	df 91       	pop	r29
    196e:	08 95       	ret

00001970 <MC1_Main_options>:


void MC1_Main_options()
{
    1970:	df 93       	push	r29
    1972:	cf 93       	push	r28
    1974:	cd b7       	in	r28, 0x3d	; 61
    1976:	de b7       	in	r29, 0x3e	; 62
    1978:	2e 97       	sbiw	r28, 0x0e	; 14
    197a:	0f b6       	in	r0, 0x3f	; 63
    197c:	f8 94       	cli
    197e:	de bf       	out	0x3e, r29	; 62
    1980:	0f be       	out	0x3f, r0	; 63
    1982:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(start);
    1984:	81 e1       	ldi	r24, 0x11	; 17
    1986:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
	while(UART_receiveByte()!=start);
    198a:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    198e:	81 31       	cpi	r24, 0x11	; 17
    1990:	e1 f7       	brne	.-8      	; 0x198a <MC1_Main_options+0x1a>

	LCD_clearScreen(); //clear lcd
    1992:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>

	// display options

	LCD_displayStringRowColumn(0,0,"+:Open door");
    1996:	28 e9       	ldi	r18, 0x98	; 152
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	80 e0       	ldi	r24, 0x00	; 0
    199c:	60 e0       	ldi	r22, 0x00	; 0
    199e:	a9 01       	movw	r20, r18
    19a0:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1,0,"- :change password");
    19a4:	24 ea       	ldi	r18, 0xA4	; 164
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	81 e0       	ldi	r24, 0x01	; 1
    19aa:	60 e0       	ldi	r22, 0x00	; 0
    19ac:	a9 01       	movw	r20, r18
    19ae:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
	key=KEYPAD_getPressedKey();
    19b2:	0e 94 61 12 	call	0x24c2	; 0x24c2 <KEYPAD_getPressedKey>
    19b6:	80 93 0d 01 	sts	0x010D, r24
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	aa e7       	ldi	r26, 0x7A	; 122
    19c0:	b4 e4       	ldi	r27, 0x44	; 68
    19c2:	8b 87       	std	Y+11, r24	; 0x0b
    19c4:	9c 87       	std	Y+12, r25	; 0x0c
    19c6:	ad 87       	std	Y+13, r26	; 0x0d
    19c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    19cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	4a e7       	ldi	r20, 0x7A	; 122
    19d8:	53 e4       	ldi	r21, 0x43	; 67
    19da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	8f 83       	std	Y+7, r24	; 0x07
    19e4:	98 87       	std	Y+8, r25	; 0x08
    19e6:	a9 87       	std	Y+9, r26	; 0x09
    19e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ea:	6f 81       	ldd	r22, Y+7	; 0x07
    19ec:	78 85       	ldd	r23, Y+8	; 0x08
    19ee:	89 85       	ldd	r24, Y+9	; 0x09
    19f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e8       	ldi	r20, 0x80	; 128
    19f8:	5f e3       	ldi	r21, 0x3F	; 63
    19fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19fe:	88 23       	and	r24, r24
    1a00:	2c f4       	brge	.+10     	; 0x1a0c <MC1_Main_options+0x9c>
		__ticks = 1;
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	9e 83       	std	Y+6, r25	; 0x06
    1a08:	8d 83       	std	Y+5, r24	; 0x05
    1a0a:	3f c0       	rjmp	.+126    	; 0x1a8a <MC1_Main_options+0x11a>
	else if (__tmp > 65535)
    1a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0e:	78 85       	ldd	r23, Y+8	; 0x08
    1a10:	89 85       	ldd	r24, Y+9	; 0x09
    1a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	3f ef       	ldi	r19, 0xFF	; 255
    1a18:	4f e7       	ldi	r20, 0x7F	; 127
    1a1a:	57 e4       	ldi	r21, 0x47	; 71
    1a1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a20:	18 16       	cp	r1, r24
    1a22:	4c f5       	brge	.+82     	; 0x1a76 <MC1_Main_options+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e2       	ldi	r20, 0x20	; 32
    1a32:	51 e4       	ldi	r21, 0x41	; 65
    1a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	bc 01       	movw	r22, r24
    1a3e:	cd 01       	movw	r24, r26
    1a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	9e 83       	std	Y+6, r25	; 0x06
    1a4a:	8d 83       	std	Y+5, r24	; 0x05
    1a4c:	0f c0       	rjmp	.+30     	; 0x1a6c <MC1_Main_options+0xfc>
    1a4e:	89 e1       	ldi	r24, 0x19	; 25
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	9c 83       	std	Y+4, r25	; 0x04
    1a54:	8b 83       	std	Y+3, r24	; 0x03
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <MC1_Main_options+0xea>
    1a5e:	9c 83       	std	Y+4, r25	; 0x04
    1a60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a62:	8d 81       	ldd	r24, Y+5	; 0x05
    1a64:	9e 81       	ldd	r25, Y+6	; 0x06
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	9e 83       	std	Y+6, r25	; 0x06
    1a6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	69 f7       	brne	.-38     	; 0x1a4e <MC1_Main_options+0xde>
    1a74:	14 c0       	rjmp	.+40     	; 0x1a9e <MC1_Main_options+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a76:	6f 81       	ldd	r22, Y+7	; 0x07
    1a78:	78 85       	ldd	r23, Y+8	; 0x08
    1a7a:	89 85       	ldd	r24, Y+9	; 0x09
    1a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
    1a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8e:	9a 83       	std	Y+2, r25	; 0x02
    1a90:	89 83       	std	Y+1, r24	; 0x01
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	9a 81       	ldd	r25, Y+2	; 0x02
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <MC1_Main_options+0x126>
    1a9a:	9a 83       	std	Y+2, r25	; 0x02
    1a9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	if(key=='+')
    1a9e:	80 91 0d 01 	lds	r24, 0x010D
    1aa2:	8b 32       	cpi	r24, 0x2B	; 43
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <MC1_Main_options+0x138>
    1aa6:	40 c0       	rjmp	.+128    	; 0x1b28 <MC1_Main_options+0x1b8>
	{
		UART_sendByte(send);
    1aa8:	83 e0       	ldi	r24, 0x03	; 3
    1aaa:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
		UART_sendByte(plus);
    1aae:	8e e0       	ldi	r24, 0x0E	; 14
    1ab0:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
		return_flag=0;
    1ab4:	10 92 f9 00 	sts	0x00F9, r1
		if(Check_pass()==1)
    1ab8:	0e 94 8f 0c 	call	0x191e	; 0x191e <Check_pass>
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	29 f4       	brne	.+10     	; 0x1aca <MC1_Main_options+0x15a>
		{
			MC1_First_open();
    1ac0:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <MC1_First_open>
			g_check=0;
    1ac4:	10 92 10 01 	sts	0x0110, r1
    1ac8:	79 c0       	rjmp	.+242    	; 0x1bbc <MC1_Main_options+0x24c>
		}
		else
		{
			g_error++;
    1aca:	80 91 0e 01 	lds	r24, 0x010E
    1ace:	8f 5f       	subi	r24, 0xFF	; 255
    1ad0:	80 93 0e 01 	sts	0x010E, r24
			UART_sendByte(ERROR_inPass);
    1ad4:	8d e0       	ldi	r24, 0x0D	; 13
    1ad6:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
			while(UART_receiveByte()!=ERROR_inPass);
    1ada:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    1ade:	8d 30       	cpi	r24, 0x0D	; 13
    1ae0:	e1 f7       	brne	.-8      	; 0x1ada <MC1_Main_options+0x16a>
    1ae2:	0e c0       	rjmp	.+28     	; 0x1b00 <MC1_Main_options+0x190>
			while(g_error<3)
			{
				if(Check_pass()==1)
    1ae4:	0e 94 8f 0c 	call	0x191e	; 0x191e <Check_pass>
    1ae8:	81 30       	cpi	r24, 0x01	; 1
    1aea:	29 f4       	brne	.+10     	; 0x1af6 <MC1_Main_options+0x186>
				{
					MC1_First_open();
    1aec:	0e 94 5d 0e 	call	0x1cba	; 0x1cba <MC1_First_open>
					g_check=0;
    1af0:	10 92 10 01 	sts	0x0110, r1
    1af4:	09 c0       	rjmp	.+18     	; 0x1b08 <MC1_Main_options+0x198>
					break;
				}
				else
				{
					g_error++;
    1af6:	80 91 0e 01 	lds	r24, 0x010E
    1afa:	8f 5f       	subi	r24, 0xFF	; 255
    1afc:	80 93 0e 01 	sts	0x010E, r24
		else
		{
			g_error++;
			UART_sendByte(ERROR_inPass);
			while(UART_receiveByte()!=ERROR_inPass);
			while(g_error<3)
    1b00:	80 91 0e 01 	lds	r24, 0x010E
    1b04:	83 30       	cpi	r24, 0x03	; 3
    1b06:	70 f3       	brcs	.-36     	; 0x1ae4 <MC1_Main_options+0x174>
				else
				{
					g_error++;
				}
			}
			if(g_error==3)
    1b08:	80 91 0e 01 	lds	r24, 0x010E
    1b0c:	83 30       	cpi	r24, 0x03	; 3
    1b0e:	49 f4       	brne	.+18     	; 0x1b22 <MC1_Main_options+0x1b2>
			{
				UART_sendByte(ERROR_inPass);
    1b10:	8d e0       	ldi	r24, 0x0D	; 13
    1b12:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
				while(UART_receiveByte()!=ERROR_inPass);
    1b16:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    1b1a:	8d 30       	cpi	r24, 0x0D	; 13
    1b1c:	e1 f7       	brne	.-8      	; 0x1b16 <MC1_Main_options+0x1a6>
				MC1_error_msgDisplay();
    1b1e:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <MC1_error_msgDisplay>
			}
			g_error=0;
    1b22:	10 92 0e 01 	sts	0x010E, r1
    1b26:	4a c0       	rjmp	.+148    	; 0x1bbc <MC1_Main_options+0x24c>
		}
	}
	else if(key=='-')
    1b28:	80 91 0d 01 	lds	r24, 0x010D
    1b2c:	8d 32       	cpi	r24, 0x2D	; 45
    1b2e:	09 f0       	breq	.+2      	; 0x1b32 <MC1_Main_options+0x1c2>
    1b30:	45 c0       	rjmp	.+138    	; 0x1bbc <MC1_Main_options+0x24c>
	{
		return_flag=0;
    1b32:	10 92 f9 00 	sts	0x00F9, r1
		UART_sendByte(send);
    1b36:	83 e0       	ldi	r24, 0x03	; 3
    1b38:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
		UART_sendByte(minus);
    1b3c:	8f e0       	ldi	r24, 0x0F	; 15
    1b3e:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
		if(Check_pass()==1)
    1b42:	0e 94 8f 0c 	call	0x191e	; 0x191e <Check_pass>
    1b46:	81 30       	cpi	r24, 0x01	; 1
    1b48:	41 f4       	brne	.+16     	; 0x1b5a <MC1_Main_options+0x1ea>
		{
			MC1_First_Run();
    1b4a:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <MC1_First_Run>
			return_flag=1;
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	80 93 f9 00 	sts	0x00F9, r24
			g_check=0;
    1b54:	10 92 10 01 	sts	0x0110, r1
    1b58:	31 c0       	rjmp	.+98     	; 0x1bbc <MC1_Main_options+0x24c>
		}
		else
		{
			g_error++;
    1b5a:	80 91 0e 01 	lds	r24, 0x010E
    1b5e:	8f 5f       	subi	r24, 0xFF	; 255
    1b60:	80 93 0e 01 	sts	0x010E, r24
			UART_sendByte(ERROR_inPass);
    1b64:	8d e0       	ldi	r24, 0x0D	; 13
    1b66:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
			while(UART_receiveByte()!=ERROR_inPass);
    1b6a:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    1b6e:	8d 30       	cpi	r24, 0x0D	; 13
    1b70:	e1 f7       	brne	.-8      	; 0x1b6a <MC1_Main_options+0x1fa>
    1b72:	11 c0       	rjmp	.+34     	; 0x1b96 <MC1_Main_options+0x226>
			while(g_error<3)
			{
				if(Check_pass()==1)
    1b74:	0e 94 8f 0c 	call	0x191e	; 0x191e <Check_pass>
    1b78:	81 30       	cpi	r24, 0x01	; 1
    1b7a:	41 f4       	brne	.+16     	; 0x1b8c <MC1_Main_options+0x21c>
				{
					MC1_First_Run();
    1b7c:	0e 94 0b 0f 	call	0x1e16	; 0x1e16 <MC1_First_Run>
					g_check=0;
    1b80:	10 92 10 01 	sts	0x0110, r1
					return_flag=1;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	80 93 f9 00 	sts	0x00F9, r24
    1b8a:	09 c0       	rjmp	.+18     	; 0x1b9e <MC1_Main_options+0x22e>
					break;
				}
				else
				{
					g_error++;
    1b8c:	80 91 0e 01 	lds	r24, 0x010E
    1b90:	8f 5f       	subi	r24, 0xFF	; 255
    1b92:	80 93 0e 01 	sts	0x010E, r24
		else
		{
			g_error++;
			UART_sendByte(ERROR_inPass);
			while(UART_receiveByte()!=ERROR_inPass);
			while(g_error<3)
    1b96:	80 91 0e 01 	lds	r24, 0x010E
    1b9a:	83 30       	cpi	r24, 0x03	; 3
    1b9c:	58 f3       	brcs	.-42     	; 0x1b74 <MC1_Main_options+0x204>
				else
				{
					g_error++;
				}
			}
			if(g_error==3)
    1b9e:	80 91 0e 01 	lds	r24, 0x010E
    1ba2:	83 30       	cpi	r24, 0x03	; 3
    1ba4:	49 f4       	brne	.+18     	; 0x1bb8 <MC1_Main_options+0x248>
			{
				UART_sendByte(ERROR_inPass);
    1ba6:	8d e0       	ldi	r24, 0x0D	; 13
    1ba8:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
				while(UART_receiveByte()!=ERROR_inPass);
    1bac:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    1bb0:	8d 30       	cpi	r24, 0x0D	; 13
    1bb2:	e1 f7       	brne	.-8      	; 0x1bac <MC1_Main_options+0x23c>
				MC1_error_msgDisplay();
    1bb4:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <MC1_error_msgDisplay>
			}
			g_error=0;
    1bb8:	10 92 0e 01 	sts	0x010E, r1
		}
	}
}
    1bbc:	2e 96       	adiw	r28, 0x0e	; 14
    1bbe:	0f b6       	in	r0, 0x3f	; 63
    1bc0:	f8 94       	cli
    1bc2:	de bf       	out	0x3e, r29	; 62
    1bc4:	0f be       	out	0x3f, r0	; 63
    1bc6:	cd bf       	out	0x3d, r28	; 61
    1bc8:	cf 91       	pop	r28
    1bca:	df 91       	pop	r29
    1bcc:	08 95       	ret

00001bce <MC1_Door_open>:


void MC1_Door_open()
{
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    1bd6:	80 91 08 01 	lds	r24, 0x0108
    1bda:	90 91 09 01 	lds	r25, 0x0109
    1bde:	a0 91 0a 01 	lds	r26, 0x010A
    1be2:	b0 91 0b 01 	lds	r27, 0x010B
    1be6:	01 96       	adiw	r24, 0x01	; 1
    1be8:	a1 1d       	adc	r26, r1
    1bea:	b1 1d       	adc	r27, r1
    1bec:	80 93 08 01 	sts	0x0108, r24
    1bf0:	90 93 09 01 	sts	0x0109, r25
    1bf4:	a0 93 0a 01 	sts	0x010A, r26
    1bf8:	b0 93 0b 01 	sts	0x010B, r27
	if(g_ticks==450)
    1bfc:	80 91 08 01 	lds	r24, 0x0108
    1c00:	90 91 09 01 	lds	r25, 0x0109
    1c04:	a0 91 0a 01 	lds	r26, 0x010A
    1c08:	b0 91 0b 01 	lds	r27, 0x010B
    1c0c:	82 3c       	cpi	r24, 0xC2	; 194
    1c0e:	21 e0       	ldi	r18, 0x01	; 1
    1c10:	92 07       	cpc	r25, r18
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	a2 07       	cpc	r26, r18
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	b2 07       	cpc	r27, r18
    1c1a:	71 f4       	brne	.+28     	; 0x1c38 <MC1_Door_open+0x6a>
	{
		UART_sendByte(Hold);
    1c1c:	8c e0       	ldi	r24, 0x0C	; 12
    1c1e:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
		while(UART_receiveByte()!=Hold);
    1c22:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    1c26:	8c 30       	cpi	r24, 0x0C	; 12
    1c28:	e1 f7       	brne	.-8      	; 0x1c22 <MC1_Door_open+0x54>
		LCD_clearScreen();
    1c2a:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
		LCD_displayString("Door is Open");
    1c2e:	87 eb       	ldi	r24, 0xB7	; 183
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_displayString>
    1c36:	3e c0       	rjmp	.+124    	; 0x1cb4 <MC1_Door_open+0xe6>
	}
	else if(g_ticks==550)
    1c38:	80 91 08 01 	lds	r24, 0x0108
    1c3c:	90 91 09 01 	lds	r25, 0x0109
    1c40:	a0 91 0a 01 	lds	r26, 0x010A
    1c44:	b0 91 0b 01 	lds	r27, 0x010B
    1c48:	86 32       	cpi	r24, 0x26	; 38
    1c4a:	22 e0       	ldi	r18, 0x02	; 2
    1c4c:	92 07       	cpc	r25, r18
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	a2 07       	cpc	r26, r18
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	b2 07       	cpc	r27, r18
    1c56:	89 f4       	brne	.+34     	; 0x1c7a <MC1_Door_open+0xac>
	{
		UART_sendByte(ClosingDoor);
    1c58:	8a e0       	ldi	r24, 0x0A	; 10
    1c5a:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
		while(UART_receiveByte()!=ClosingDoor);
    1c5e:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    1c62:	8a 30       	cpi	r24, 0x0A	; 10
    1c64:	e1 f7       	brne	.-8      	; 0x1c5e <MC1_Door_open+0x90>
		LCD_clearScreen();
    1c66:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
		LCD_displayStringRowColumn(0,0,"locking door");
    1c6a:	24 ec       	ldi	r18, 0xC4	; 196
    1c6c:	30 e0       	ldi	r19, 0x00	; 0
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	60 e0       	ldi	r22, 0x00	; 0
    1c72:	a9 01       	movw	r20, r18
    1c74:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
    1c78:	1d c0       	rjmp	.+58     	; 0x1cb4 <MC1_Door_open+0xe6>
	}

	else if(g_ticks==1000)
    1c7a:	80 91 08 01 	lds	r24, 0x0108
    1c7e:	90 91 09 01 	lds	r25, 0x0109
    1c82:	a0 91 0a 01 	lds	r26, 0x010A
    1c86:	b0 91 0b 01 	lds	r27, 0x010B
    1c8a:	88 3e       	cpi	r24, 0xE8	; 232
    1c8c:	23 e0       	ldi	r18, 0x03	; 3
    1c8e:	92 07       	cpc	r25, r18
    1c90:	20 e0       	ldi	r18, 0x00	; 0
    1c92:	a2 07       	cpc	r26, r18
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	b2 07       	cpc	r27, r18
    1c98:	69 f4       	brne	.+26     	; 0x1cb4 <MC1_Door_open+0xe6>
	{
		Timer0_DeInit();
    1c9a:	0e 94 d7 13 	call	0x27ae	; 0x27ae <Timer0_DeInit>
		g_ticks=0;
    1c9e:	10 92 08 01 	sts	0x0108, r1
    1ca2:	10 92 09 01 	sts	0x0109, r1
    1ca6:	10 92 0a 01 	sts	0x010A, r1
    1caa:	10 92 0b 01 	sts	0x010B, r1
		return_flag=1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	80 93 f9 00 	sts	0x00F9, r24
	}
}
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <MC1_First_open>:

// function to run fist app

void MC1_First_open()
{
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(startTimer);
    1cc2:	88 e0       	ldi	r24, 0x08	; 8
    1cc4:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
	while(UART_receiveByte()!=startTimer);
    1cc8:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    1ccc:	88 30       	cpi	r24, 0x08	; 8
    1cce:	e1 f7       	brne	.-8      	; 0x1cc8 <MC1_First_open+0xe>

	Timer0_Ovf_setCallBack(MC1_Door_open);
    1cd0:	87 ee       	ldi	r24, 0xE7	; 231
    1cd2:	9d e0       	ldi	r25, 0x0D	; 13
    1cd4:	0e 94 b3 13 	call	0x2766	; 0x2766 <Timer0_Ovf_setCallBack>
	MC1_Calculate_time();
    1cd8:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <MC1_Calculate_time>
	while(UART_receiveByte()!=UNLOCK_DOOR);
    1cdc:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    1ce0:	89 30       	cpi	r24, 0x09	; 9
    1ce2:	e1 f7       	brne	.-8      	; 0x1cdc <MC1_First_open+0x22>
	UART_sendByte(UNLOCK_DOOR);
    1ce4:	89 e0       	ldi	r24, 0x09	; 9
    1ce6:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
	LCD_clearScreen();
    1cea:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Unlocking door");
    1cee:	21 ed       	ldi	r18, 0xD1	; 209
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	80 e0       	ldi	r24, 0x00	; 0
    1cf4:	60 e0       	ldi	r22, 0x00	; 0
    1cf6:	a9 01       	movw	r20, r18
    1cf8:	0e 94 1b 0a 	call	0x1436	; 0x1436 <LCD_displayStringRowColumn>
}
    1cfc:	cf 91       	pop	r28
    1cfe:	df 91       	pop	r29
    1d00:	08 95       	ret

00001d02 <MC1_CallBackForError>:

// error callback function

void MC1_CallBackForError()
{
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	cd b7       	in	r28, 0x3d	; 61
    1d08:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    1d0a:	80 91 08 01 	lds	r24, 0x0108
    1d0e:	90 91 09 01 	lds	r25, 0x0109
    1d12:	a0 91 0a 01 	lds	r26, 0x010A
    1d16:	b0 91 0b 01 	lds	r27, 0x010B
    1d1a:	01 96       	adiw	r24, 0x01	; 1
    1d1c:	a1 1d       	adc	r26, r1
    1d1e:	b1 1d       	adc	r27, r1
    1d20:	80 93 08 01 	sts	0x0108, r24
    1d24:	90 93 09 01 	sts	0x0109, r25
    1d28:	a0 93 0a 01 	sts	0x010A, r26
    1d2c:	b0 93 0b 01 	sts	0x010B, r27
	if(g_ticks>1800)
    1d30:	80 91 08 01 	lds	r24, 0x0108
    1d34:	90 91 09 01 	lds	r25, 0x0109
    1d38:	a0 91 0a 01 	lds	r26, 0x010A
    1d3c:	b0 91 0b 01 	lds	r27, 0x010B
    1d40:	89 30       	cpi	r24, 0x09	; 9
    1d42:	27 e0       	ldi	r18, 0x07	; 7
    1d44:	92 07       	cpc	r25, r18
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	a2 07       	cpc	r26, r18
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	b2 07       	cpc	r27, r18
    1d4e:	78 f0       	brcs	.+30     	; 0x1d6e <MC1_CallBackForError+0x6c>
	{
		LCD_clearScreen();
    1d50:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
		g_ticks=0; /*Put tick=0 to start counting new second*/
    1d54:	10 92 08 01 	sts	0x0108, r1
    1d58:	10 92 09 01 	sts	0x0109, r1
    1d5c:	10 92 0a 01 	sts	0x010A, r1
    1d60:	10 92 0b 01 	sts	0x010B, r1
		Timer0_DeInit();
    1d64:	0e 94 d7 13 	call	0x27ae	; 0x27ae <Timer0_DeInit>
		return_flag=1;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	80 93 f9 00 	sts	0x00F9, r24
	}
}
    1d6e:	cf 91       	pop	r28
    1d70:	df 91       	pop	r29
    1d72:	08 95       	ret

00001d74 <MC1_error_msgDisplay>:

// displaying error msg on screen

void MC1_error_msgDisplay()
{
    1d74:	df 93       	push	r29
    1d76:	cf 93       	push	r28
    1d78:	cd b7       	in	r28, 0x3d	; 61
    1d7a:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    1d7c:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_clearScreen>
	LCD_displayString("Wrong pass 0 try");
    1d80:	80 ee       	ldi	r24, 0xE0	; 224
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	0e 94 b0 09 	call	0x1360	; 0x1360 <LCD_displayString>
	UART_sendByte(startTimer);
    1d88:	88 e0       	ldi	r24, 0x08	; 8
    1d8a:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
	while(UART_receiveByte()!=startTimer);
    1d8e:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    1d92:	88 30       	cpi	r24, 0x08	; 8
    1d94:	e1 f7       	brne	.-8      	; 0x1d8e <MC1_error_msgDisplay+0x1a>
	Timer0_Ovf_setCallBack(MC1_CallBackForError);
    1d96:	81 e8       	ldi	r24, 0x81	; 129
    1d98:	9e e0       	ldi	r25, 0x0E	; 14
    1d9a:	0e 94 b3 13 	call	0x2766	; 0x2766 <Timer0_Ovf_setCallBack>
	MC1_Calculate_time();
    1d9e:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <MC1_Calculate_time>

}
    1da2:	cf 91       	pop	r28
    1da4:	df 91       	pop	r29
    1da6:	08 95       	ret

00001da8 <MC1_Calculate_time>:
// function used to calculate time

void MC1_Calculate_time()
{
    1da8:	df 93       	push	r29
    1daa:	cf 93       	push	r28
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	2b 97       	sbiw	r28, 0x0b	; 11
    1db2:	0f b6       	in	r0, 0x3f	; 63
    1db4:	f8 94       	cli
    1db6:	de bf       	out	0x3e, r29	; 62
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	cd bf       	out	0x3d, r28	; 61
	Timer_Config timer_ptr={NORMAL,F_CPU_1024,0,0,ENABLE_N,DISABLE};
    1dbc:	ce 01       	movw	r24, r28
    1dbe:	01 96       	adiw	r24, 0x01	; 1
    1dc0:	98 87       	std	Y+8, r25	; 0x08
    1dc2:	8f 83       	std	Y+7, r24	; 0x07
    1dc4:	e1 e0       	ldi	r30, 0x01	; 1
    1dc6:	f1 e0       	ldi	r31, 0x01	; 1
    1dc8:	fa 87       	std	Y+10, r31	; 0x0a
    1dca:	e9 87       	std	Y+9, r30	; 0x09
    1dcc:	f6 e0       	ldi	r31, 0x06	; 6
    1dce:	fb 87       	std	Y+11, r31	; 0x0b
    1dd0:	e9 85       	ldd	r30, Y+9	; 0x09
    1dd2:	fa 85       	ldd	r31, Y+10	; 0x0a
    1dd4:	00 80       	ld	r0, Z
    1dd6:	89 85       	ldd	r24, Y+9	; 0x09
    1dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dda:	01 96       	adiw	r24, 0x01	; 1
    1ddc:	9a 87       	std	Y+10, r25	; 0x0a
    1dde:	89 87       	std	Y+9, r24	; 0x09
    1de0:	ef 81       	ldd	r30, Y+7	; 0x07
    1de2:	f8 85       	ldd	r31, Y+8	; 0x08
    1de4:	00 82       	st	Z, r0
    1de6:	8f 81       	ldd	r24, Y+7	; 0x07
    1de8:	98 85       	ldd	r25, Y+8	; 0x08
    1dea:	01 96       	adiw	r24, 0x01	; 1
    1dec:	98 87       	std	Y+8, r25	; 0x08
    1dee:	8f 83       	std	Y+7, r24	; 0x07
    1df0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1df2:	91 50       	subi	r25, 0x01	; 1
    1df4:	9b 87       	std	Y+11, r25	; 0x0b
    1df6:	eb 85       	ldd	r30, Y+11	; 0x0b
    1df8:	ee 23       	and	r30, r30
    1dfa:	51 f7       	brne	.-44     	; 0x1dd0 <MC1_Calculate_time+0x28>
	Timer0_init(&timer_ptr);
    1dfc:	ce 01       	movw	r24, r28
    1dfe:	01 96       	adiw	r24, 0x01	; 1
    1e00:	0e 94 59 13 	call	0x26b2	; 0x26b2 <Timer0_init>
}
    1e04:	2b 96       	adiw	r28, 0x0b	; 11
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
    1e10:	cf 91       	pop	r28
    1e12:	df 91       	pop	r29
    1e14:	08 95       	ret

00001e16 <MC1_First_Run>:

// function fist run application

void MC1_First_Run()
{
    1e16:	df 93       	push	r29
    1e18:	cf 93       	push	r28
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
	do
	{
		MC1_pass_creating();
    1e1e:	0e 94 2f 0c 	call	0x185e	; 0x185e <MC1_pass_creating>
		while(UART_receiveByte()!=send);
    1e22:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    1e26:	83 30       	cpi	r24, 0x03	; 3
    1e28:	e1 f7       	brne	.-8      	; 0x1e22 <MC1_First_Run+0xc>
		UART_sendByte(send);
    1e2a:	83 e0       	ldi	r24, 0x03	; 3
    1e2c:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
		checked=UART_receiveByte();
    1e30:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    1e34:	80 93 0f 01 	sts	0x010F, r24

	}while(checked==0);
    1e38:	80 91 0f 01 	lds	r24, 0x010F
    1e3c:	88 23       	and	r24, r24
    1e3e:	79 f3       	breq	.-34     	; 0x1e1e <MC1_First_Run+0x8>
}
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <GPIO_setupPinDirection+0x6>
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <GPIO_setupPinDirection+0x8>
    1e4e:	0f 92       	push	r0
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	6a 83       	std	Y+2, r22	; 0x02
    1e58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	88 30       	cpi	r24, 0x08	; 8
    1e5e:	08 f0       	brcs	.+2      	; 0x1e62 <GPIO_setupPinDirection+0x1c>
    1e60:	d5 c0       	rjmp	.+426    	; 0x200c <GPIO_setupPinDirection+0x1c6>
    1e62:	89 81       	ldd	r24, Y+1	; 0x01
    1e64:	84 30       	cpi	r24, 0x04	; 4
    1e66:	08 f0       	brcs	.+2      	; 0x1e6a <GPIO_setupPinDirection+0x24>
    1e68:	d1 c0       	rjmp	.+418    	; 0x200c <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	28 2f       	mov	r18, r24
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	3d 83       	std	Y+5, r19	; 0x05
    1e72:	2c 83       	std	Y+4, r18	; 0x04
    1e74:	8c 81       	ldd	r24, Y+4	; 0x04
    1e76:	9d 81       	ldd	r25, Y+5	; 0x05
    1e78:	81 30       	cpi	r24, 0x01	; 1
    1e7a:	91 05       	cpc	r25, r1
    1e7c:	09 f4       	brne	.+2      	; 0x1e80 <GPIO_setupPinDirection+0x3a>
    1e7e:	43 c0       	rjmp	.+134    	; 0x1f06 <GPIO_setupPinDirection+0xc0>
    1e80:	2c 81       	ldd	r18, Y+4	; 0x04
    1e82:	3d 81       	ldd	r19, Y+5	; 0x05
    1e84:	22 30       	cpi	r18, 0x02	; 2
    1e86:	31 05       	cpc	r19, r1
    1e88:	2c f4       	brge	.+10     	; 0x1e94 <GPIO_setupPinDirection+0x4e>
    1e8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	71 f0       	breq	.+28     	; 0x1eae <GPIO_setupPinDirection+0x68>
    1e92:	bc c0       	rjmp	.+376    	; 0x200c <GPIO_setupPinDirection+0x1c6>
    1e94:	2c 81       	ldd	r18, Y+4	; 0x04
    1e96:	3d 81       	ldd	r19, Y+5	; 0x05
    1e98:	22 30       	cpi	r18, 0x02	; 2
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <GPIO_setupPinDirection+0x5a>
    1e9e:	5f c0       	rjmp	.+190    	; 0x1f5e <GPIO_setupPinDirection+0x118>
    1ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea4:	83 30       	cpi	r24, 0x03	; 3
    1ea6:	91 05       	cpc	r25, r1
    1ea8:	09 f4       	brne	.+2      	; 0x1eac <GPIO_setupPinDirection+0x66>
    1eaa:	85 c0       	rjmp	.+266    	; 0x1fb6 <GPIO_setupPinDirection+0x170>
    1eac:	af c0       	rjmp	.+350    	; 0x200c <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1eae:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb0:	81 30       	cpi	r24, 0x01	; 1
    1eb2:	a1 f4       	brne	.+40     	; 0x1edc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1eb4:	aa e3       	ldi	r26, 0x3A	; 58
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	ea e3       	ldi	r30, 0x3A	; 58
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	80 81       	ld	r24, Z
    1ebe:	48 2f       	mov	r20, r24
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	28 2f       	mov	r18, r24
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	02 2e       	mov	r0, r18
    1ecc:	02 c0       	rjmp	.+4      	; 0x1ed2 <GPIO_setupPinDirection+0x8c>
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	0a 94       	dec	r0
    1ed4:	e2 f7       	brpl	.-8      	; 0x1ece <GPIO_setupPinDirection+0x88>
    1ed6:	84 2b       	or	r24, r20
    1ed8:	8c 93       	st	X, r24
    1eda:	98 c0       	rjmp	.+304    	; 0x200c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1edc:	aa e3       	ldi	r26, 0x3A	; 58
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	ea e3       	ldi	r30, 0x3A	; 58
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	48 2f       	mov	r20, r24
    1ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eea:	28 2f       	mov	r18, r24
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	02 2e       	mov	r0, r18
    1ef4:	02 c0       	rjmp	.+4      	; 0x1efa <GPIO_setupPinDirection+0xb4>
    1ef6:	88 0f       	add	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	0a 94       	dec	r0
    1efc:	e2 f7       	brpl	.-8      	; 0x1ef6 <GPIO_setupPinDirection+0xb0>
    1efe:	80 95       	com	r24
    1f00:	84 23       	and	r24, r20
    1f02:	8c 93       	st	X, r24
    1f04:	83 c0       	rjmp	.+262    	; 0x200c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1f06:	8b 81       	ldd	r24, Y+3	; 0x03
    1f08:	81 30       	cpi	r24, 0x01	; 1
    1f0a:	a1 f4       	brne	.+40     	; 0x1f34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1f0c:	a7 e3       	ldi	r26, 0x37	; 55
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e7 e3       	ldi	r30, 0x37	; 55
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	48 2f       	mov	r20, r24
    1f18:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1a:	28 2f       	mov	r18, r24
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	90 e0       	ldi	r25, 0x00	; 0
    1f22:	02 2e       	mov	r0, r18
    1f24:	02 c0       	rjmp	.+4      	; 0x1f2a <GPIO_setupPinDirection+0xe4>
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	0a 94       	dec	r0
    1f2c:	e2 f7       	brpl	.-8      	; 0x1f26 <GPIO_setupPinDirection+0xe0>
    1f2e:	84 2b       	or	r24, r20
    1f30:	8c 93       	st	X, r24
    1f32:	6c c0       	rjmp	.+216    	; 0x200c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1f34:	a7 e3       	ldi	r26, 0x37	; 55
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e7 e3       	ldi	r30, 0x37	; 55
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	80 81       	ld	r24, Z
    1f3e:	48 2f       	mov	r20, r24
    1f40:	8a 81       	ldd	r24, Y+2	; 0x02
    1f42:	28 2f       	mov	r18, r24
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	90 e0       	ldi	r25, 0x00	; 0
    1f4a:	02 2e       	mov	r0, r18
    1f4c:	02 c0       	rjmp	.+4      	; 0x1f52 <GPIO_setupPinDirection+0x10c>
    1f4e:	88 0f       	add	r24, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	0a 94       	dec	r0
    1f54:	e2 f7       	brpl	.-8      	; 0x1f4e <GPIO_setupPinDirection+0x108>
    1f56:	80 95       	com	r24
    1f58:	84 23       	and	r24, r20
    1f5a:	8c 93       	st	X, r24
    1f5c:	57 c0       	rjmp	.+174    	; 0x200c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	81 30       	cpi	r24, 0x01	; 1
    1f62:	a1 f4       	brne	.+40     	; 0x1f8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1f64:	a4 e3       	ldi	r26, 0x34	; 52
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e4 e3       	ldi	r30, 0x34	; 52
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	48 2f       	mov	r20, r24
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	02 2e       	mov	r0, r18
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <GPIO_setupPinDirection+0x13c>
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	0a 94       	dec	r0
    1f84:	e2 f7       	brpl	.-8      	; 0x1f7e <GPIO_setupPinDirection+0x138>
    1f86:	84 2b       	or	r24, r20
    1f88:	8c 93       	st	X, r24
    1f8a:	40 c0       	rjmp	.+128    	; 0x200c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1f8c:	a4 e3       	ldi	r26, 0x34	; 52
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e4 e3       	ldi	r30, 0x34	; 52
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	48 2f       	mov	r20, r24
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	02 2e       	mov	r0, r18
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <GPIO_setupPinDirection+0x164>
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	0a 94       	dec	r0
    1fac:	e2 f7       	brpl	.-8      	; 0x1fa6 <GPIO_setupPinDirection+0x160>
    1fae:	80 95       	com	r24
    1fb0:	84 23       	and	r24, r20
    1fb2:	8c 93       	st	X, r24
    1fb4:	2b c0       	rjmp	.+86     	; 0x200c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb8:	81 30       	cpi	r24, 0x01	; 1
    1fba:	a1 f4       	brne	.+40     	; 0x1fe4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1fbc:	a1 e3       	ldi	r26, 0x31	; 49
    1fbe:	b0 e0       	ldi	r27, 0x00	; 0
    1fc0:	e1 e3       	ldi	r30, 0x31	; 49
    1fc2:	f0 e0       	ldi	r31, 0x00	; 0
    1fc4:	80 81       	ld	r24, Z
    1fc6:	48 2f       	mov	r20, r24
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	28 2f       	mov	r18, r24
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	02 2e       	mov	r0, r18
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <GPIO_setupPinDirection+0x194>
    1fd6:	88 0f       	add	r24, r24
    1fd8:	99 1f       	adc	r25, r25
    1fda:	0a 94       	dec	r0
    1fdc:	e2 f7       	brpl	.-8      	; 0x1fd6 <GPIO_setupPinDirection+0x190>
    1fde:	84 2b       	or	r24, r20
    1fe0:	8c 93       	st	X, r24
    1fe2:	14 c0       	rjmp	.+40     	; 0x200c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1fe4:	a1 e3       	ldi	r26, 0x31	; 49
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e1 e3       	ldi	r30, 0x31	; 49
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 81       	ld	r24, Z
    1fee:	48 2f       	mov	r20, r24
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	81 e0       	ldi	r24, 0x01	; 1
    1ff8:	90 e0       	ldi	r25, 0x00	; 0
    1ffa:	02 2e       	mov	r0, r18
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <GPIO_setupPinDirection+0x1bc>
    1ffe:	88 0f       	add	r24, r24
    2000:	99 1f       	adc	r25, r25
    2002:	0a 94       	dec	r0
    2004:	e2 f7       	brpl	.-8      	; 0x1ffe <GPIO_setupPinDirection+0x1b8>
    2006:	80 95       	com	r24
    2008:	84 23       	and	r24, r20
    200a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    200c:	0f 90       	pop	r0
    200e:	0f 90       	pop	r0
    2010:	0f 90       	pop	r0
    2012:	0f 90       	pop	r0
    2014:	0f 90       	pop	r0
    2016:	cf 91       	pop	r28
    2018:	df 91       	pop	r29
    201a:	08 95       	ret

0000201c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    201c:	df 93       	push	r29
    201e:	cf 93       	push	r28
    2020:	00 d0       	rcall	.+0      	; 0x2022 <GPIO_writePin+0x6>
    2022:	00 d0       	rcall	.+0      	; 0x2024 <GPIO_writePin+0x8>
    2024:	0f 92       	push	r0
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	6a 83       	std	Y+2, r22	; 0x02
    202e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2030:	8a 81       	ldd	r24, Y+2	; 0x02
    2032:	88 30       	cpi	r24, 0x08	; 8
    2034:	08 f0       	brcs	.+2      	; 0x2038 <GPIO_writePin+0x1c>
    2036:	d5 c0       	rjmp	.+426    	; 0x21e2 <GPIO_writePin+0x1c6>
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	84 30       	cpi	r24, 0x04	; 4
    203c:	08 f0       	brcs	.+2      	; 0x2040 <GPIO_writePin+0x24>
    203e:	d1 c0       	rjmp	.+418    	; 0x21e2 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	28 2f       	mov	r18, r24
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	3d 83       	std	Y+5, r19	; 0x05
    2048:	2c 83       	std	Y+4, r18	; 0x04
    204a:	8c 81       	ldd	r24, Y+4	; 0x04
    204c:	9d 81       	ldd	r25, Y+5	; 0x05
    204e:	81 30       	cpi	r24, 0x01	; 1
    2050:	91 05       	cpc	r25, r1
    2052:	09 f4       	brne	.+2      	; 0x2056 <GPIO_writePin+0x3a>
    2054:	43 c0       	rjmp	.+134    	; 0x20dc <GPIO_writePin+0xc0>
    2056:	2c 81       	ldd	r18, Y+4	; 0x04
    2058:	3d 81       	ldd	r19, Y+5	; 0x05
    205a:	22 30       	cpi	r18, 0x02	; 2
    205c:	31 05       	cpc	r19, r1
    205e:	2c f4       	brge	.+10     	; 0x206a <GPIO_writePin+0x4e>
    2060:	8c 81       	ldd	r24, Y+4	; 0x04
    2062:	9d 81       	ldd	r25, Y+5	; 0x05
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	71 f0       	breq	.+28     	; 0x2084 <GPIO_writePin+0x68>
    2068:	bc c0       	rjmp	.+376    	; 0x21e2 <GPIO_writePin+0x1c6>
    206a:	2c 81       	ldd	r18, Y+4	; 0x04
    206c:	3d 81       	ldd	r19, Y+5	; 0x05
    206e:	22 30       	cpi	r18, 0x02	; 2
    2070:	31 05       	cpc	r19, r1
    2072:	09 f4       	brne	.+2      	; 0x2076 <GPIO_writePin+0x5a>
    2074:	5f c0       	rjmp	.+190    	; 0x2134 <GPIO_writePin+0x118>
    2076:	8c 81       	ldd	r24, Y+4	; 0x04
    2078:	9d 81       	ldd	r25, Y+5	; 0x05
    207a:	83 30       	cpi	r24, 0x03	; 3
    207c:	91 05       	cpc	r25, r1
    207e:	09 f4       	brne	.+2      	; 0x2082 <GPIO_writePin+0x66>
    2080:	85 c0       	rjmp	.+266    	; 0x218c <GPIO_writePin+0x170>
    2082:	af c0       	rjmp	.+350    	; 0x21e2 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	81 30       	cpi	r24, 0x01	; 1
    2088:	a1 f4       	brne	.+40     	; 0x20b2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    208a:	ab e3       	ldi	r26, 0x3B	; 59
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	eb e3       	ldi	r30, 0x3B	; 59
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	48 2f       	mov	r20, r24
    2096:	8a 81       	ldd	r24, Y+2	; 0x02
    2098:	28 2f       	mov	r18, r24
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	02 2e       	mov	r0, r18
    20a2:	02 c0       	rjmp	.+4      	; 0x20a8 <GPIO_writePin+0x8c>
    20a4:	88 0f       	add	r24, r24
    20a6:	99 1f       	adc	r25, r25
    20a8:	0a 94       	dec	r0
    20aa:	e2 f7       	brpl	.-8      	; 0x20a4 <GPIO_writePin+0x88>
    20ac:	84 2b       	or	r24, r20
    20ae:	8c 93       	st	X, r24
    20b0:	98 c0       	rjmp	.+304    	; 0x21e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    20b2:	ab e3       	ldi	r26, 0x3B	; 59
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	eb e3       	ldi	r30, 0x3B	; 59
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	48 2f       	mov	r20, r24
    20be:	8a 81       	ldd	r24, Y+2	; 0x02
    20c0:	28 2f       	mov	r18, r24
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	02 2e       	mov	r0, r18
    20ca:	02 c0       	rjmp	.+4      	; 0x20d0 <GPIO_writePin+0xb4>
    20cc:	88 0f       	add	r24, r24
    20ce:	99 1f       	adc	r25, r25
    20d0:	0a 94       	dec	r0
    20d2:	e2 f7       	brpl	.-8      	; 0x20cc <GPIO_writePin+0xb0>
    20d4:	80 95       	com	r24
    20d6:	84 23       	and	r24, r20
    20d8:	8c 93       	st	X, r24
    20da:	83 c0       	rjmp	.+262    	; 0x21e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	81 30       	cpi	r24, 0x01	; 1
    20e0:	a1 f4       	brne	.+40     	; 0x210a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    20e2:	a8 e3       	ldi	r26, 0x38	; 56
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e8 e3       	ldi	r30, 0x38	; 56
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	48 2f       	mov	r20, r24
    20ee:	8a 81       	ldd	r24, Y+2	; 0x02
    20f0:	28 2f       	mov	r18, r24
    20f2:	30 e0       	ldi	r19, 0x00	; 0
    20f4:	81 e0       	ldi	r24, 0x01	; 1
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	02 2e       	mov	r0, r18
    20fa:	02 c0       	rjmp	.+4      	; 0x2100 <GPIO_writePin+0xe4>
    20fc:	88 0f       	add	r24, r24
    20fe:	99 1f       	adc	r25, r25
    2100:	0a 94       	dec	r0
    2102:	e2 f7       	brpl	.-8      	; 0x20fc <GPIO_writePin+0xe0>
    2104:	84 2b       	or	r24, r20
    2106:	8c 93       	st	X, r24
    2108:	6c c0       	rjmp	.+216    	; 0x21e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    210a:	a8 e3       	ldi	r26, 0x38	; 56
    210c:	b0 e0       	ldi	r27, 0x00	; 0
    210e:	e8 e3       	ldi	r30, 0x38	; 56
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	48 2f       	mov	r20, r24
    2116:	8a 81       	ldd	r24, Y+2	; 0x02
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	81 e0       	ldi	r24, 0x01	; 1
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	02 2e       	mov	r0, r18
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <GPIO_writePin+0x10c>
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	0a 94       	dec	r0
    212a:	e2 f7       	brpl	.-8      	; 0x2124 <GPIO_writePin+0x108>
    212c:	80 95       	com	r24
    212e:	84 23       	and	r24, r20
    2130:	8c 93       	st	X, r24
    2132:	57 c0       	rjmp	.+174    	; 0x21e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    2134:	8b 81       	ldd	r24, Y+3	; 0x03
    2136:	81 30       	cpi	r24, 0x01	; 1
    2138:	a1 f4       	brne	.+40     	; 0x2162 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    213a:	a5 e3       	ldi	r26, 0x35	; 53
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e5 e3       	ldi	r30, 0x35	; 53
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 81       	ld	r24, Z
    2144:	48 2f       	mov	r20, r24
    2146:	8a 81       	ldd	r24, Y+2	; 0x02
    2148:	28 2f       	mov	r18, r24
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	02 2e       	mov	r0, r18
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <GPIO_writePin+0x13c>
    2154:	88 0f       	add	r24, r24
    2156:	99 1f       	adc	r25, r25
    2158:	0a 94       	dec	r0
    215a:	e2 f7       	brpl	.-8      	; 0x2154 <GPIO_writePin+0x138>
    215c:	84 2b       	or	r24, r20
    215e:	8c 93       	st	X, r24
    2160:	40 c0       	rjmp	.+128    	; 0x21e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2162:	a5 e3       	ldi	r26, 0x35	; 53
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	e5 e3       	ldi	r30, 0x35	; 53
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	48 2f       	mov	r20, r24
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	28 2f       	mov	r18, r24
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	81 e0       	ldi	r24, 0x01	; 1
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	02 2e       	mov	r0, r18
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <GPIO_writePin+0x164>
    217c:	88 0f       	add	r24, r24
    217e:	99 1f       	adc	r25, r25
    2180:	0a 94       	dec	r0
    2182:	e2 f7       	brpl	.-8      	; 0x217c <GPIO_writePin+0x160>
    2184:	80 95       	com	r24
    2186:	84 23       	and	r24, r20
    2188:	8c 93       	st	X, r24
    218a:	2b c0       	rjmp	.+86     	; 0x21e2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    218c:	8b 81       	ldd	r24, Y+3	; 0x03
    218e:	81 30       	cpi	r24, 0x01	; 1
    2190:	a1 f4       	brne	.+40     	; 0x21ba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2192:	a2 e3       	ldi	r26, 0x32	; 50
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e2 e3       	ldi	r30, 0x32	; 50
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	48 2f       	mov	r20, r24
    219e:	8a 81       	ldd	r24, Y+2	; 0x02
    21a0:	28 2f       	mov	r18, r24
    21a2:	30 e0       	ldi	r19, 0x00	; 0
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	02 2e       	mov	r0, r18
    21aa:	02 c0       	rjmp	.+4      	; 0x21b0 <GPIO_writePin+0x194>
    21ac:	88 0f       	add	r24, r24
    21ae:	99 1f       	adc	r25, r25
    21b0:	0a 94       	dec	r0
    21b2:	e2 f7       	brpl	.-8      	; 0x21ac <GPIO_writePin+0x190>
    21b4:	84 2b       	or	r24, r20
    21b6:	8c 93       	st	X, r24
    21b8:	14 c0       	rjmp	.+40     	; 0x21e2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    21ba:	a2 e3       	ldi	r26, 0x32	; 50
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e2 e3       	ldi	r30, 0x32	; 50
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	48 2f       	mov	r20, r24
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	28 2f       	mov	r18, r24
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	02 2e       	mov	r0, r18
    21d2:	02 c0       	rjmp	.+4      	; 0x21d8 <GPIO_writePin+0x1bc>
    21d4:	88 0f       	add	r24, r24
    21d6:	99 1f       	adc	r25, r25
    21d8:	0a 94       	dec	r0
    21da:	e2 f7       	brpl	.-8      	; 0x21d4 <GPIO_writePin+0x1b8>
    21dc:	80 95       	com	r24
    21de:	84 23       	and	r24, r20
    21e0:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	0f 90       	pop	r0
    21e8:	0f 90       	pop	r0
    21ea:	0f 90       	pop	r0
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	08 95       	ret

000021f2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <GPIO_readPin+0x6>
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <GPIO_readPin+0x8>
    21fa:	0f 92       	push	r0
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    2200:	8a 83       	std	Y+2, r24	; 0x02
    2202:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2204:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	88 30       	cpi	r24, 0x08	; 8
    220a:	08 f0       	brcs	.+2      	; 0x220e <GPIO_readPin+0x1c>
    220c:	84 c0       	rjmp	.+264    	; 0x2316 <GPIO_readPin+0x124>
    220e:	8a 81       	ldd	r24, Y+2	; 0x02
    2210:	84 30       	cpi	r24, 0x04	; 4
    2212:	08 f0       	brcs	.+2      	; 0x2216 <GPIO_readPin+0x24>
    2214:	80 c0       	rjmp	.+256    	; 0x2316 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	28 2f       	mov	r18, r24
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	3d 83       	std	Y+5, r19	; 0x05
    221e:	2c 83       	std	Y+4, r18	; 0x04
    2220:	4c 81       	ldd	r20, Y+4	; 0x04
    2222:	5d 81       	ldd	r21, Y+5	; 0x05
    2224:	41 30       	cpi	r20, 0x01	; 1
    2226:	51 05       	cpc	r21, r1
    2228:	79 f1       	breq	.+94     	; 0x2288 <GPIO_readPin+0x96>
    222a:	8c 81       	ldd	r24, Y+4	; 0x04
    222c:	9d 81       	ldd	r25, Y+5	; 0x05
    222e:	82 30       	cpi	r24, 0x02	; 2
    2230:	91 05       	cpc	r25, r1
    2232:	34 f4       	brge	.+12     	; 0x2240 <GPIO_readPin+0x4e>
    2234:	2c 81       	ldd	r18, Y+4	; 0x04
    2236:	3d 81       	ldd	r19, Y+5	; 0x05
    2238:	21 15       	cp	r18, r1
    223a:	31 05       	cpc	r19, r1
    223c:	69 f0       	breq	.+26     	; 0x2258 <GPIO_readPin+0x66>
    223e:	6b c0       	rjmp	.+214    	; 0x2316 <GPIO_readPin+0x124>
    2240:	4c 81       	ldd	r20, Y+4	; 0x04
    2242:	5d 81       	ldd	r21, Y+5	; 0x05
    2244:	42 30       	cpi	r20, 0x02	; 2
    2246:	51 05       	cpc	r21, r1
    2248:	b9 f1       	breq	.+110    	; 0x22b8 <GPIO_readPin+0xc6>
    224a:	8c 81       	ldd	r24, Y+4	; 0x04
    224c:	9d 81       	ldd	r25, Y+5	; 0x05
    224e:	83 30       	cpi	r24, 0x03	; 3
    2250:	91 05       	cpc	r25, r1
    2252:	09 f4       	brne	.+2      	; 0x2256 <GPIO_readPin+0x64>
    2254:	49 c0       	rjmp	.+146    	; 0x22e8 <GPIO_readPin+0xf6>
    2256:	5f c0       	rjmp	.+190    	; 0x2316 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2258:	e9 e3       	ldi	r30, 0x39	; 57
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	88 2f       	mov	r24, r24
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	a9 01       	movw	r20, r18
    226a:	02 c0       	rjmp	.+4      	; 0x2270 <GPIO_readPin+0x7e>
    226c:	55 95       	asr	r21
    226e:	47 95       	ror	r20
    2270:	8a 95       	dec	r24
    2272:	e2 f7       	brpl	.-8      	; 0x226c <GPIO_readPin+0x7a>
    2274:	ca 01       	movw	r24, r20
    2276:	81 70       	andi	r24, 0x01	; 1
    2278:	90 70       	andi	r25, 0x00	; 0
    227a:	88 23       	and	r24, r24
    227c:	19 f0       	breq	.+6      	; 0x2284 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	89 83       	std	Y+1, r24	; 0x01
    2282:	49 c0       	rjmp	.+146    	; 0x2316 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2284:	19 82       	std	Y+1, r1	; 0x01
    2286:	47 c0       	rjmp	.+142    	; 0x2316 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2288:	e6 e3       	ldi	r30, 0x36	; 54
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	88 2f       	mov	r24, r24
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	a9 01       	movw	r20, r18
    229a:	02 c0       	rjmp	.+4      	; 0x22a0 <GPIO_readPin+0xae>
    229c:	55 95       	asr	r21
    229e:	47 95       	ror	r20
    22a0:	8a 95       	dec	r24
    22a2:	e2 f7       	brpl	.-8      	; 0x229c <GPIO_readPin+0xaa>
    22a4:	ca 01       	movw	r24, r20
    22a6:	81 70       	andi	r24, 0x01	; 1
    22a8:	90 70       	andi	r25, 0x00	; 0
    22aa:	88 23       	and	r24, r24
    22ac:	19 f0       	breq	.+6      	; 0x22b4 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	89 83       	std	Y+1, r24	; 0x01
    22b2:	31 c0       	rjmp	.+98     	; 0x2316 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    22b4:	19 82       	std	Y+1, r1	; 0x01
    22b6:	2f c0       	rjmp	.+94     	; 0x2316 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    22b8:	e3 e3       	ldi	r30, 0x33	; 51
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	28 2f       	mov	r18, r24
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	88 2f       	mov	r24, r24
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	a9 01       	movw	r20, r18
    22ca:	02 c0       	rjmp	.+4      	; 0x22d0 <GPIO_readPin+0xde>
    22cc:	55 95       	asr	r21
    22ce:	47 95       	ror	r20
    22d0:	8a 95       	dec	r24
    22d2:	e2 f7       	brpl	.-8      	; 0x22cc <GPIO_readPin+0xda>
    22d4:	ca 01       	movw	r24, r20
    22d6:	81 70       	andi	r24, 0x01	; 1
    22d8:	90 70       	andi	r25, 0x00	; 0
    22da:	88 23       	and	r24, r24
    22dc:	19 f0       	breq	.+6      	; 0x22e4 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	89 83       	std	Y+1, r24	; 0x01
    22e2:	19 c0       	rjmp	.+50     	; 0x2316 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    22e4:	19 82       	std	Y+1, r1	; 0x01
    22e6:	17 c0       	rjmp	.+46     	; 0x2316 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    22e8:	e0 e3       	ldi	r30, 0x30	; 48
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	80 81       	ld	r24, Z
    22ee:	28 2f       	mov	r18, r24
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	88 2f       	mov	r24, r24
    22f6:	90 e0       	ldi	r25, 0x00	; 0
    22f8:	a9 01       	movw	r20, r18
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <GPIO_readPin+0x10e>
    22fc:	55 95       	asr	r21
    22fe:	47 95       	ror	r20
    2300:	8a 95       	dec	r24
    2302:	e2 f7       	brpl	.-8      	; 0x22fc <GPIO_readPin+0x10a>
    2304:	ca 01       	movw	r24, r20
    2306:	81 70       	andi	r24, 0x01	; 1
    2308:	90 70       	andi	r25, 0x00	; 0
    230a:	88 23       	and	r24, r24
    230c:	19 f0       	breq	.+6      	; 0x2314 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	89 83       	std	Y+1, r24	; 0x01
    2312:	01 c0       	rjmp	.+2      	; 0x2316 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2314:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2316:	89 81       	ldd	r24, Y+1	; 0x01
}
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	cf 91       	pop	r28
    2324:	df 91       	pop	r29
    2326:	08 95       	ret

00002328 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2328:	df 93       	push	r29
    232a:	cf 93       	push	r28
    232c:	00 d0       	rcall	.+0      	; 0x232e <GPIO_setupPortDirection+0x6>
    232e:	00 d0       	rcall	.+0      	; 0x2330 <GPIO_setupPortDirection+0x8>
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	89 83       	std	Y+1, r24	; 0x01
    2336:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	84 30       	cpi	r24, 0x04	; 4
    233c:	90 f5       	brcc	.+100    	; 0x23a2 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	28 2f       	mov	r18, r24
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	3c 83       	std	Y+4, r19	; 0x04
    2346:	2b 83       	std	Y+3, r18	; 0x03
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	9c 81       	ldd	r25, Y+4	; 0x04
    234c:	81 30       	cpi	r24, 0x01	; 1
    234e:	91 05       	cpc	r25, r1
    2350:	d1 f0       	breq	.+52     	; 0x2386 <GPIO_setupPortDirection+0x5e>
    2352:	2b 81       	ldd	r18, Y+3	; 0x03
    2354:	3c 81       	ldd	r19, Y+4	; 0x04
    2356:	22 30       	cpi	r18, 0x02	; 2
    2358:	31 05       	cpc	r19, r1
    235a:	2c f4       	brge	.+10     	; 0x2366 <GPIO_setupPortDirection+0x3e>
    235c:	8b 81       	ldd	r24, Y+3	; 0x03
    235e:	9c 81       	ldd	r25, Y+4	; 0x04
    2360:	00 97       	sbiw	r24, 0x00	; 0
    2362:	61 f0       	breq	.+24     	; 0x237c <GPIO_setupPortDirection+0x54>
    2364:	1e c0       	rjmp	.+60     	; 0x23a2 <GPIO_setupPortDirection+0x7a>
    2366:	2b 81       	ldd	r18, Y+3	; 0x03
    2368:	3c 81       	ldd	r19, Y+4	; 0x04
    236a:	22 30       	cpi	r18, 0x02	; 2
    236c:	31 05       	cpc	r19, r1
    236e:	81 f0       	breq	.+32     	; 0x2390 <GPIO_setupPortDirection+0x68>
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	9c 81       	ldd	r25, Y+4	; 0x04
    2374:	83 30       	cpi	r24, 0x03	; 3
    2376:	91 05       	cpc	r25, r1
    2378:	81 f0       	breq	.+32     	; 0x239a <GPIO_setupPortDirection+0x72>
    237a:	13 c0       	rjmp	.+38     	; 0x23a2 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    237c:	ea e3       	ldi	r30, 0x3A	; 58
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	8a 81       	ldd	r24, Y+2	; 0x02
    2382:	80 83       	st	Z, r24
    2384:	0e c0       	rjmp	.+28     	; 0x23a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2386:	e7 e3       	ldi	r30, 0x37	; 55
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	8a 81       	ldd	r24, Y+2	; 0x02
    238c:	80 83       	st	Z, r24
    238e:	09 c0       	rjmp	.+18     	; 0x23a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2390:	e4 e3       	ldi	r30, 0x34	; 52
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	80 83       	st	Z, r24
    2398:	04 c0       	rjmp	.+8      	; 0x23a2 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    239a:	e1 e3       	ldi	r30, 0x31	; 49
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	8a 81       	ldd	r24, Y+2	; 0x02
    23a0:	80 83       	st	Z, r24
			break;
		}
	}
}
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	08 95       	ret

000023b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    23b0:	df 93       	push	r29
    23b2:	cf 93       	push	r28
    23b4:	00 d0       	rcall	.+0      	; 0x23b6 <GPIO_writePort+0x6>
    23b6:	00 d0       	rcall	.+0      	; 0x23b8 <GPIO_writePort+0x8>
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
    23bc:	89 83       	std	Y+1, r24	; 0x01
    23be:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    23c0:	89 81       	ldd	r24, Y+1	; 0x01
    23c2:	84 30       	cpi	r24, 0x04	; 4
    23c4:	90 f5       	brcc	.+100    	; 0x242a <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	28 2f       	mov	r18, r24
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	3c 83       	std	Y+4, r19	; 0x04
    23ce:	2b 83       	std	Y+3, r18	; 0x03
    23d0:	8b 81       	ldd	r24, Y+3	; 0x03
    23d2:	9c 81       	ldd	r25, Y+4	; 0x04
    23d4:	81 30       	cpi	r24, 0x01	; 1
    23d6:	91 05       	cpc	r25, r1
    23d8:	d1 f0       	breq	.+52     	; 0x240e <GPIO_writePort+0x5e>
    23da:	2b 81       	ldd	r18, Y+3	; 0x03
    23dc:	3c 81       	ldd	r19, Y+4	; 0x04
    23de:	22 30       	cpi	r18, 0x02	; 2
    23e0:	31 05       	cpc	r19, r1
    23e2:	2c f4       	brge	.+10     	; 0x23ee <GPIO_writePort+0x3e>
    23e4:	8b 81       	ldd	r24, Y+3	; 0x03
    23e6:	9c 81       	ldd	r25, Y+4	; 0x04
    23e8:	00 97       	sbiw	r24, 0x00	; 0
    23ea:	61 f0       	breq	.+24     	; 0x2404 <GPIO_writePort+0x54>
    23ec:	1e c0       	rjmp	.+60     	; 0x242a <GPIO_writePort+0x7a>
    23ee:	2b 81       	ldd	r18, Y+3	; 0x03
    23f0:	3c 81       	ldd	r19, Y+4	; 0x04
    23f2:	22 30       	cpi	r18, 0x02	; 2
    23f4:	31 05       	cpc	r19, r1
    23f6:	81 f0       	breq	.+32     	; 0x2418 <GPIO_writePort+0x68>
    23f8:	8b 81       	ldd	r24, Y+3	; 0x03
    23fa:	9c 81       	ldd	r25, Y+4	; 0x04
    23fc:	83 30       	cpi	r24, 0x03	; 3
    23fe:	91 05       	cpc	r25, r1
    2400:	81 f0       	breq	.+32     	; 0x2422 <GPIO_writePort+0x72>
    2402:	13 c0       	rjmp	.+38     	; 0x242a <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2404:	eb e3       	ldi	r30, 0x3B	; 59
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	8a 81       	ldd	r24, Y+2	; 0x02
    240a:	80 83       	st	Z, r24
    240c:	0e c0       	rjmp	.+28     	; 0x242a <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    240e:	e8 e3       	ldi	r30, 0x38	; 56
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	8a 81       	ldd	r24, Y+2	; 0x02
    2414:	80 83       	st	Z, r24
    2416:	09 c0       	rjmp	.+18     	; 0x242a <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2418:	e5 e3       	ldi	r30, 0x35	; 53
    241a:	f0 e0       	ldi	r31, 0x00	; 0
    241c:	8a 81       	ldd	r24, Y+2	; 0x02
    241e:	80 83       	st	Z, r24
    2420:	04 c0       	rjmp	.+8      	; 0x242a <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2422:	e2 e3       	ldi	r30, 0x32	; 50
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	8a 81       	ldd	r24, Y+2	; 0x02
    2428:	80 83       	st	Z, r24
			break;
		}
	}
}
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	cf 91       	pop	r28
    2434:	df 91       	pop	r29
    2436:	08 95       	ret

00002438 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    2438:	df 93       	push	r29
    243a:	cf 93       	push	r28
    243c:	00 d0       	rcall	.+0      	; 0x243e <GPIO_readPort+0x6>
    243e:	00 d0       	rcall	.+0      	; 0x2440 <GPIO_readPort+0x8>
    2440:	cd b7       	in	r28, 0x3d	; 61
    2442:	de b7       	in	r29, 0x3e	; 62
    2444:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2446:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	84 30       	cpi	r24, 0x04	; 4
    244c:	90 f5       	brcc	.+100    	; 0x24b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	28 2f       	mov	r18, r24
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	3c 83       	std	Y+4, r19	; 0x04
    2456:	2b 83       	std	Y+3, r18	; 0x03
    2458:	8b 81       	ldd	r24, Y+3	; 0x03
    245a:	9c 81       	ldd	r25, Y+4	; 0x04
    245c:	81 30       	cpi	r24, 0x01	; 1
    245e:	91 05       	cpc	r25, r1
    2460:	d1 f0       	breq	.+52     	; 0x2496 <GPIO_readPort+0x5e>
    2462:	2b 81       	ldd	r18, Y+3	; 0x03
    2464:	3c 81       	ldd	r19, Y+4	; 0x04
    2466:	22 30       	cpi	r18, 0x02	; 2
    2468:	31 05       	cpc	r19, r1
    246a:	2c f4       	brge	.+10     	; 0x2476 <GPIO_readPort+0x3e>
    246c:	8b 81       	ldd	r24, Y+3	; 0x03
    246e:	9c 81       	ldd	r25, Y+4	; 0x04
    2470:	00 97       	sbiw	r24, 0x00	; 0
    2472:	61 f0       	breq	.+24     	; 0x248c <GPIO_readPort+0x54>
    2474:	1e c0       	rjmp	.+60     	; 0x24b2 <GPIO_readPort+0x7a>
    2476:	2b 81       	ldd	r18, Y+3	; 0x03
    2478:	3c 81       	ldd	r19, Y+4	; 0x04
    247a:	22 30       	cpi	r18, 0x02	; 2
    247c:	31 05       	cpc	r19, r1
    247e:	81 f0       	breq	.+32     	; 0x24a0 <GPIO_readPort+0x68>
    2480:	8b 81       	ldd	r24, Y+3	; 0x03
    2482:	9c 81       	ldd	r25, Y+4	; 0x04
    2484:	83 30       	cpi	r24, 0x03	; 3
    2486:	91 05       	cpc	r25, r1
    2488:	81 f0       	breq	.+32     	; 0x24aa <GPIO_readPort+0x72>
    248a:	13 c0       	rjmp	.+38     	; 0x24b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    248c:	e9 e3       	ldi	r30, 0x39	; 57
    248e:	f0 e0       	ldi	r31, 0x00	; 0
    2490:	80 81       	ld	r24, Z
    2492:	89 83       	std	Y+1, r24	; 0x01
    2494:	0e c0       	rjmp	.+28     	; 0x24b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2496:	e6 e3       	ldi	r30, 0x36	; 54
    2498:	f0 e0       	ldi	r31, 0x00	; 0
    249a:	80 81       	ld	r24, Z
    249c:	89 83       	std	Y+1, r24	; 0x01
    249e:	09 c0       	rjmp	.+18     	; 0x24b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    24a0:	e3 e3       	ldi	r30, 0x33	; 51
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	89 83       	std	Y+1, r24	; 0x01
    24a8:	04 c0       	rjmp	.+8      	; 0x24b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    24aa:	e0 e3       	ldi	r30, 0x30	; 48
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    24b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	08 95       	ret

000024c2 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	00 d0       	rcall	.+0      	; 0x24c8 <KEYPAD_getPressedKey+0x6>
    24c8:	0f 92       	push	r0
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    24ce:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    24d0:	1b 82       	std	Y+3, r1	; 0x03
    24d2:	43 c0       	rjmp	.+134    	; 0x255a <KEYPAD_getPressedKey+0x98>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    24d4:	80 e0       	ldi	r24, 0x00	; 0
    24d6:	60 e0       	ldi	r22, 0x00	; 0
    24d8:	0e 94 94 11 	call	0x2328	; 0x2328 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    24dc:	8b 81       	ldd	r24, Y+3	; 0x03
    24de:	98 2f       	mov	r25, r24
    24e0:	9c 5f       	subi	r25, 0xFC	; 252
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	69 2f       	mov	r22, r25
    24e6:	41 e0       	ldi	r20, 0x01	; 1
    24e8:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    24ec:	8b 81       	ldd	r24, Y+3	; 0x03
    24ee:	88 2f       	mov	r24, r24
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9c 01       	movw	r18, r24
    24f4:	2c 5f       	subi	r18, 0xFC	; 252
    24f6:	3f 4f       	sbci	r19, 0xFF	; 255
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	02 c0       	rjmp	.+4      	; 0x2502 <KEYPAD_getPressedKey+0x40>
    24fe:	88 0f       	add	r24, r24
    2500:	99 1f       	adc	r25, r25
    2502:	2a 95       	dec	r18
    2504:	e2 f7       	brpl	.-8      	; 0x24fe <KEYPAD_getPressedKey+0x3c>
    2506:	80 95       	com	r24
    2508:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    250a:	80 e0       	ldi	r24, 0x00	; 0
    250c:	69 81       	ldd	r22, Y+1	; 0x01
    250e:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2512:	1a 82       	std	Y+2, r1	; 0x02
    2514:	1c c0       	rjmp	.+56     	; 0x254e <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	6a 81       	ldd	r22, Y+2	; 0x02
    251a:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <GPIO_readPin>
    251e:	88 23       	and	r24, r24
    2520:	99 f4       	brne	.+38     	; 0x2548 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2522:	8a 81       	ldd	r24, Y+2	; 0x02
    2524:	88 2f       	mov	r24, r24
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	88 0f       	add	r24, r24
    252a:	99 1f       	adc	r25, r25
    252c:	88 0f       	add	r24, r24
    252e:	99 1f       	adc	r25, r25
    2530:	98 2f       	mov	r25, r24
    2532:	8b 81       	ldd	r24, Y+3	; 0x03
    2534:	89 0f       	add	r24, r25
    2536:	8f 5f       	subi	r24, 0xFF	; 255
    2538:	0e 94 b2 12 	call	0x2564	; 0x2564 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    253c:	0f 90       	pop	r0
    253e:	0f 90       	pop	r0
    2540:	0f 90       	pop	r0
    2542:	cf 91       	pop	r28
    2544:	df 91       	pop	r29
    2546:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	8f 5f       	subi	r24, 0xFF	; 255
    254c:	8a 83       	std	Y+2, r24	; 0x02
    254e:	8a 81       	ldd	r24, Y+2	; 0x02
    2550:	84 30       	cpi	r24, 0x04	; 4
    2552:	08 f3       	brcs	.-62     	; 0x2516 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2554:	8b 81       	ldd	r24, Y+3	; 0x03
    2556:	8f 5f       	subi	r24, 0xFF	; 255
    2558:	8b 83       	std	Y+3, r24	; 0x03
    255a:	8b 81       	ldd	r24, Y+3	; 0x03
    255c:	84 30       	cpi	r24, 0x04	; 4
    255e:	08 f4       	brcc	.+2      	; 0x2562 <KEYPAD_getPressedKey+0xa0>
    2560:	b9 cf       	rjmp	.-142    	; 0x24d4 <KEYPAD_getPressedKey+0x12>
    2562:	b6 cf       	rjmp	.-148    	; 0x24d0 <KEYPAD_getPressedKey+0xe>

00002564 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	00 d0       	rcall	.+0      	; 0x256a <KEYPAD_4x4_adjustKeyNumber+0x6>
    256a:	00 d0       	rcall	.+0      	; 0x256c <KEYPAD_4x4_adjustKeyNumber+0x8>
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
    2570:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2572:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2574:	8a 81       	ldd	r24, Y+2	; 0x02
    2576:	28 2f       	mov	r18, r24
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	3c 83       	std	Y+4, r19	; 0x04
    257c:	2b 83       	std	Y+3, r18	; 0x03
    257e:	8b 81       	ldd	r24, Y+3	; 0x03
    2580:	9c 81       	ldd	r25, Y+4	; 0x04
    2582:	88 30       	cpi	r24, 0x08	; 8
    2584:	91 05       	cpc	r25, r1
    2586:	09 f4       	brne	.+2      	; 0x258a <KEYPAD_4x4_adjustKeyNumber+0x26>
    2588:	70 c0       	rjmp	.+224    	; 0x266a <KEYPAD_4x4_adjustKeyNumber+0x106>
    258a:	2b 81       	ldd	r18, Y+3	; 0x03
    258c:	3c 81       	ldd	r19, Y+4	; 0x04
    258e:	29 30       	cpi	r18, 0x09	; 9
    2590:	31 05       	cpc	r19, r1
    2592:	5c f5       	brge	.+86     	; 0x25ea <KEYPAD_4x4_adjustKeyNumber+0x86>
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	9c 81       	ldd	r25, Y+4	; 0x04
    2598:	84 30       	cpi	r24, 0x04	; 4
    259a:	91 05       	cpc	r25, r1
    259c:	09 f4       	brne	.+2      	; 0x25a0 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    259e:	59 c0       	rjmp	.+178    	; 0x2652 <KEYPAD_4x4_adjustKeyNumber+0xee>
    25a0:	2b 81       	ldd	r18, Y+3	; 0x03
    25a2:	3c 81       	ldd	r19, Y+4	; 0x04
    25a4:	25 30       	cpi	r18, 0x05	; 5
    25a6:	31 05       	cpc	r19, r1
    25a8:	9c f4       	brge	.+38     	; 0x25d0 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	9c 81       	ldd	r25, Y+4	; 0x04
    25ae:	82 30       	cpi	r24, 0x02	; 2
    25b0:	91 05       	cpc	r25, r1
    25b2:	09 f4       	brne	.+2      	; 0x25b6 <KEYPAD_4x4_adjustKeyNumber+0x52>
    25b4:	48 c0       	rjmp	.+144    	; 0x2646 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    25b6:	2b 81       	ldd	r18, Y+3	; 0x03
    25b8:	3c 81       	ldd	r19, Y+4	; 0x04
    25ba:	23 30       	cpi	r18, 0x03	; 3
    25bc:	31 05       	cpc	r19, r1
    25be:	0c f0       	brlt	.+2      	; 0x25c2 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    25c0:	45 c0       	rjmp	.+138    	; 0x264c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	9c 81       	ldd	r25, Y+4	; 0x04
    25c6:	81 30       	cpi	r24, 0x01	; 1
    25c8:	91 05       	cpc	r25, r1
    25ca:	09 f4       	brne	.+2      	; 0x25ce <KEYPAD_4x4_adjustKeyNumber+0x6a>
    25cc:	39 c0       	rjmp	.+114    	; 0x2640 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    25ce:	67 c0       	rjmp	.+206    	; 0x269e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    25d0:	2b 81       	ldd	r18, Y+3	; 0x03
    25d2:	3c 81       	ldd	r19, Y+4	; 0x04
    25d4:	26 30       	cpi	r18, 0x06	; 6
    25d6:	31 05       	cpc	r19, r1
    25d8:	09 f4       	brne	.+2      	; 0x25dc <KEYPAD_4x4_adjustKeyNumber+0x78>
    25da:	41 c0       	rjmp	.+130    	; 0x265e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    25dc:	8b 81       	ldd	r24, Y+3	; 0x03
    25de:	9c 81       	ldd	r25, Y+4	; 0x04
    25e0:	87 30       	cpi	r24, 0x07	; 7
    25e2:	91 05       	cpc	r25, r1
    25e4:	0c f0       	brlt	.+2      	; 0x25e8 <KEYPAD_4x4_adjustKeyNumber+0x84>
    25e6:	3e c0       	rjmp	.+124    	; 0x2664 <KEYPAD_4x4_adjustKeyNumber+0x100>
    25e8:	37 c0       	rjmp	.+110    	; 0x2658 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    25ea:	2b 81       	ldd	r18, Y+3	; 0x03
    25ec:	3c 81       	ldd	r19, Y+4	; 0x04
    25ee:	2c 30       	cpi	r18, 0x0C	; 12
    25f0:	31 05       	cpc	r19, r1
    25f2:	09 f4       	brne	.+2      	; 0x25f6 <KEYPAD_4x4_adjustKeyNumber+0x92>
    25f4:	46 c0       	rjmp	.+140    	; 0x2682 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    25f6:	8b 81       	ldd	r24, Y+3	; 0x03
    25f8:	9c 81       	ldd	r25, Y+4	; 0x04
    25fa:	8d 30       	cpi	r24, 0x0D	; 13
    25fc:	91 05       	cpc	r25, r1
    25fe:	5c f4       	brge	.+22     	; 0x2616 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2600:	2b 81       	ldd	r18, Y+3	; 0x03
    2602:	3c 81       	ldd	r19, Y+4	; 0x04
    2604:	2a 30       	cpi	r18, 0x0A	; 10
    2606:	31 05       	cpc	r19, r1
    2608:	b1 f1       	breq	.+108    	; 0x2676 <KEYPAD_4x4_adjustKeyNumber+0x112>
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	9c 81       	ldd	r25, Y+4	; 0x04
    260e:	8b 30       	cpi	r24, 0x0B	; 11
    2610:	91 05       	cpc	r25, r1
    2612:	a4 f5       	brge	.+104    	; 0x267c <KEYPAD_4x4_adjustKeyNumber+0x118>
    2614:	2d c0       	rjmp	.+90     	; 0x2670 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2616:	2b 81       	ldd	r18, Y+3	; 0x03
    2618:	3c 81       	ldd	r19, Y+4	; 0x04
    261a:	2e 30       	cpi	r18, 0x0E	; 14
    261c:	31 05       	cpc	r19, r1
    261e:	b9 f1       	breq	.+110    	; 0x268e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2620:	8b 81       	ldd	r24, Y+3	; 0x03
    2622:	9c 81       	ldd	r25, Y+4	; 0x04
    2624:	8e 30       	cpi	r24, 0x0E	; 14
    2626:	91 05       	cpc	r25, r1
    2628:	7c f1       	brlt	.+94     	; 0x2688 <KEYPAD_4x4_adjustKeyNumber+0x124>
    262a:	2b 81       	ldd	r18, Y+3	; 0x03
    262c:	3c 81       	ldd	r19, Y+4	; 0x04
    262e:	2f 30       	cpi	r18, 0x0F	; 15
    2630:	31 05       	cpc	r19, r1
    2632:	79 f1       	breq	.+94     	; 0x2692 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2634:	8b 81       	ldd	r24, Y+3	; 0x03
    2636:	9c 81       	ldd	r25, Y+4	; 0x04
    2638:	80 31       	cpi	r24, 0x10	; 16
    263a:	91 05       	cpc	r25, r1
    263c:	69 f1       	breq	.+90     	; 0x2698 <KEYPAD_4x4_adjustKeyNumber+0x134>
    263e:	2f c0       	rjmp	.+94     	; 0x269e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    2640:	87 e0       	ldi	r24, 0x07	; 7
    2642:	89 83       	std	Y+1, r24	; 0x01
    2644:	2e c0       	rjmp	.+92     	; 0x26a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2646:	88 e0       	ldi	r24, 0x08	; 8
    2648:	89 83       	std	Y+1, r24	; 0x01
    264a:	2b c0       	rjmp	.+86     	; 0x26a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    264c:	89 e0       	ldi	r24, 0x09	; 9
    264e:	89 83       	std	Y+1, r24	; 0x01
    2650:	28 c0       	rjmp	.+80     	; 0x26a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2652:	85 e2       	ldi	r24, 0x25	; 37
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	25 c0       	rjmp	.+74     	; 0x26a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2658:	84 e0       	ldi	r24, 0x04	; 4
    265a:	89 83       	std	Y+1, r24	; 0x01
    265c:	22 c0       	rjmp	.+68     	; 0x26a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    265e:	85 e0       	ldi	r24, 0x05	; 5
    2660:	89 83       	std	Y+1, r24	; 0x01
    2662:	1f c0       	rjmp	.+62     	; 0x26a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2664:	86 e0       	ldi	r24, 0x06	; 6
    2666:	89 83       	std	Y+1, r24	; 0x01
    2668:	1c c0       	rjmp	.+56     	; 0x26a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    266a:	8a e2       	ldi	r24, 0x2A	; 42
    266c:	89 83       	std	Y+1, r24	; 0x01
    266e:	19 c0       	rjmp	.+50     	; 0x26a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    2670:	81 e0       	ldi	r24, 0x01	; 1
    2672:	89 83       	std	Y+1, r24	; 0x01
    2674:	16 c0       	rjmp	.+44     	; 0x26a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2676:	82 e0       	ldi	r24, 0x02	; 2
    2678:	89 83       	std	Y+1, r24	; 0x01
    267a:	13 c0       	rjmp	.+38     	; 0x26a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    267c:	83 e0       	ldi	r24, 0x03	; 3
    267e:	89 83       	std	Y+1, r24	; 0x01
    2680:	10 c0       	rjmp	.+32     	; 0x26a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2682:	8d e2       	ldi	r24, 0x2D	; 45
    2684:	89 83       	std	Y+1, r24	; 0x01
    2686:	0d c0       	rjmp	.+26     	; 0x26a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2688:	8d e0       	ldi	r24, 0x0D	; 13
    268a:	89 83       	std	Y+1, r24	; 0x01
    268c:	0a c0       	rjmp	.+20     	; 0x26a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    268e:	19 82       	std	Y+1, r1	; 0x01
    2690:	08 c0       	rjmp	.+16     	; 0x26a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2692:	8d e3       	ldi	r24, 0x3D	; 61
    2694:	89 83       	std	Y+1, r24	; 0x01
    2696:	05 c0       	rjmp	.+10     	; 0x26a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2698:	8b e2       	ldi	r24, 0x2B	; 43
    269a:	89 83       	std	Y+1, r24	; 0x01
    269c:	02 c0       	rjmp	.+4      	; 0x26a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    269e:	8a 81       	ldd	r24, Y+2	; 0x02
    26a0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	cf 91       	pop	r28
    26ae:	df 91       	pop	r29
    26b0:	08 95       	ret

000026b2 <Timer0_init>:

static volatile void (*g_t_0_ovf_callBackPtr)(void) = NULL_PTR; /*Timer0,overflow mode*/
static volatile void (*g_t_0_ctc_callBackPtr)(void) = NULL_PTR; /*Timer0,compare mode*/

void Timer0_init(Timer_Config* config)
{
    26b2:	df 93       	push	r29
    26b4:	cf 93       	push	r28
    26b6:	00 d0       	rcall	.+0      	; 0x26b8 <Timer0_init+0x6>
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
    26bc:	9a 83       	std	Y+2, r25	; 0x02
    26be:	89 83       	std	Y+1, r24	; 0x01
	/*Configure the timer to work in a non-PWM mode*/
	TCCR0=(1<<FOC0);
    26c0:	e3 e5       	ldi	r30, 0x53	; 83
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	80 e8       	ldi	r24, 0x80	; 128
    26c6:	80 83       	st	Z, r24

	/*Configure the timer clock prescaler*/
	TCCR0=(TCCR0 & 0xF8) | (config->prescaler & 0x07);
    26c8:	a3 e5       	ldi	r26, 0x53	; 83
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	e3 e5       	ldi	r30, 0x53	; 83
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	98 2f       	mov	r25, r24
    26d4:	98 7f       	andi	r25, 0xF8	; 248
    26d6:	e9 81       	ldd	r30, Y+1	; 0x01
    26d8:	fa 81       	ldd	r31, Y+2	; 0x02
    26da:	81 81       	ldd	r24, Z+1	; 0x01
    26dc:	87 70       	andi	r24, 0x07	; 7
    26de:	89 2b       	or	r24, r25
    26e0:	8c 93       	st	X, r24

	/*Set timer initial value*/
	TCNT0=config->Initial_value;
    26e2:	a2 e5       	ldi	r26, 0x52	; 82
    26e4:	b0 e0       	ldi	r27, 0x00	; 0
    26e6:	e9 81       	ldd	r30, Y+1	; 0x01
    26e8:	fa 81       	ldd	r31, Y+2	; 0x02
    26ea:	82 81       	ldd	r24, Z+2	; 0x02
    26ec:	8c 93       	st	X, r24
	/*Configure the timer to work in the Normal mode:
	 * WGM00=0 & WGM01=0
	 * COM00=0 & COM01=0
	 * Enable Timer Overflow Interrupt TOIE0=1
	 */
	TIMSK|=config->N_INT & 0x01;
    26ee:	a9 e5       	ldi	r26, 0x59	; 89
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	e9 e5       	ldi	r30, 0x59	; 89
    26f4:	f0 e0       	ldi	r31, 0x00	; 0
    26f6:	80 81       	ld	r24, Z
    26f8:	98 2f       	mov	r25, r24
    26fa:	e9 81       	ldd	r30, Y+1	; 0x01
    26fc:	fa 81       	ldd	r31, Y+2	; 0x02
    26fe:	84 81       	ldd	r24, Z+4	; 0x04
    2700:	81 70       	andi	r24, 0x01	; 1
    2702:	89 2b       	or	r24, r25
    2704:	8c 93       	st	X, r24
	 * WGM00=0 & WGM01=1
	 * COM00=0 & COM01=0
	 * Set timer compare match value OCR0
	 * Enable Timer output compare match Interrupt OCIE0=1
	 */
	TCCR0=(TCCR0 & 0xF7)|((config->mode & 0x02)<<2);
    2706:	a3 e5       	ldi	r26, 0x53	; 83
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	e3 e5       	ldi	r30, 0x53	; 83
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	28 2f       	mov	r18, r24
    2712:	27 7f       	andi	r18, 0xF7	; 247
    2714:	e9 81       	ldd	r30, Y+1	; 0x01
    2716:	fa 81       	ldd	r31, Y+2	; 0x02
    2718:	80 81       	ld	r24, Z
    271a:	88 2f       	mov	r24, r24
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	82 70       	andi	r24, 0x02	; 2
    2720:	90 70       	andi	r25, 0x00	; 0
    2722:	88 0f       	add	r24, r24
    2724:	99 1f       	adc	r25, r25
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	82 2b       	or	r24, r18
    272c:	8c 93       	st	X, r24
	OCR0=config->Compare_value;
    272e:	ac e5       	ldi	r26, 0x5C	; 92
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	e9 81       	ldd	r30, Y+1	; 0x01
    2734:	fa 81       	ldd	r31, Y+2	; 0x02
    2736:	83 81       	ldd	r24, Z+3	; 0x03
    2738:	8c 93       	st	X, r24
	TIMSK|=(config->CTC_INT & 0x01)<<1;
    273a:	a9 e5       	ldi	r26, 0x59	; 89
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e9 e5       	ldi	r30, 0x59	; 89
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	80 81       	ld	r24, Z
    2744:	28 2f       	mov	r18, r24
    2746:	e9 81       	ldd	r30, Y+1	; 0x01
    2748:	fa 81       	ldd	r31, Y+2	; 0x02
    274a:	85 81       	ldd	r24, Z+5	; 0x05
    274c:	88 2f       	mov	r24, r24
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	81 70       	andi	r24, 0x01	; 1
    2752:	90 70       	andi	r25, 0x00	; 0
    2754:	88 0f       	add	r24, r24
    2756:	99 1f       	adc	r25, r25
    2758:	82 2b       	or	r24, r18
    275a:	8c 93       	st	X, r24
}
    275c:	0f 90       	pop	r0
    275e:	0f 90       	pop	r0
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	08 95       	ret

00002766 <Timer0_Ovf_setCallBack>:

void Timer0_Ovf_setCallBack(void(*a_t0_ovf_ptr)(void))
{
    2766:	df 93       	push	r29
    2768:	cf 93       	push	r28
    276a:	00 d0       	rcall	.+0      	; 0x276c <Timer0_Ovf_setCallBack+0x6>
    276c:	cd b7       	in	r28, 0x3d	; 61
    276e:	de b7       	in	r29, 0x3e	; 62
    2770:	9a 83       	std	Y+2, r25	; 0x02
    2772:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_t_0_ovf_callBackPtr = a_t0_ovf_ptr;
    2774:	89 81       	ldd	r24, Y+1	; 0x01
    2776:	9a 81       	ldd	r25, Y+2	; 0x02
    2778:	90 93 12 01 	sts	0x0112, r25
    277c:	80 93 11 01 	sts	0x0111, r24
}
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	cf 91       	pop	r28
    2786:	df 91       	pop	r29
    2788:	08 95       	ret

0000278a <Timer0_CTC_setCallBack>:

/*Function to set the Call Back function address for Timer0, compare mode*/
void Timer0_CTC_setCallBack(void(*a_t0_ctc_ptr)(void))
{
    278a:	df 93       	push	r29
    278c:	cf 93       	push	r28
    278e:	00 d0       	rcall	.+0      	; 0x2790 <Timer0_CTC_setCallBack+0x6>
    2790:	cd b7       	in	r28, 0x3d	; 61
    2792:	de b7       	in	r29, 0x3e	; 62
    2794:	9a 83       	std	Y+2, r25	; 0x02
    2796:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_t_0_ctc_callBackPtr = a_t0_ctc_ptr;
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	9a 81       	ldd	r25, Y+2	; 0x02
    279c:	90 93 14 01 	sts	0x0114, r25
    27a0:	80 93 13 01 	sts	0x0113, r24
}
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	cf 91       	pop	r28
    27aa:	df 91       	pop	r29
    27ac:	08 95       	ret

000027ae <Timer0_DeInit>:
void Timer0_DeInit()
{
    27ae:	df 93       	push	r29
    27b0:	cf 93       	push	r28
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    27b6:	e3 e5       	ldi	r30, 0x53	; 83
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	10 82       	st	Z, r1
	TCNT0=0;
    27bc:	e2 e5       	ldi	r30, 0x52	; 82
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	10 82       	st	Z, r1
}
    27c2:	cf 91       	pop	r28
    27c4:	df 91       	pop	r29
    27c6:	08 95       	ret

000027c8 <__vector_9>:
/******************************************************************************
 * 							Interrupt service routines
 ******************************************************************************/
ISR(TIMER0_OVF_vect)
{
    27c8:	1f 92       	push	r1
    27ca:	0f 92       	push	r0
    27cc:	0f b6       	in	r0, 0x3f	; 63
    27ce:	0f 92       	push	r0
    27d0:	11 24       	eor	r1, r1
    27d2:	2f 93       	push	r18
    27d4:	3f 93       	push	r19
    27d6:	4f 93       	push	r20
    27d8:	5f 93       	push	r21
    27da:	6f 93       	push	r22
    27dc:	7f 93       	push	r23
    27de:	8f 93       	push	r24
    27e0:	9f 93       	push	r25
    27e2:	af 93       	push	r26
    27e4:	bf 93       	push	r27
    27e6:	ef 93       	push	r30
    27e8:	ff 93       	push	r31
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
	if(g_t_0_ovf_callBackPtr != NULL_PTR)
    27f2:	80 91 11 01 	lds	r24, 0x0111
    27f6:	90 91 12 01 	lds	r25, 0x0112
    27fa:	00 97       	sbiw	r24, 0x00	; 0
    27fc:	29 f0       	breq	.+10     	; 0x2808 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after each overflow */
		(*g_t_0_ovf_callBackPtr)();
    27fe:	e0 91 11 01 	lds	r30, 0x0111
    2802:	f0 91 12 01 	lds	r31, 0x0112
    2806:	09 95       	icall
		/* another method to call the function using pointer to function t_0_ovf_callBackPtr(); */
	}
}
    2808:	cf 91       	pop	r28
    280a:	df 91       	pop	r29
    280c:	ff 91       	pop	r31
    280e:	ef 91       	pop	r30
    2810:	bf 91       	pop	r27
    2812:	af 91       	pop	r26
    2814:	9f 91       	pop	r25
    2816:	8f 91       	pop	r24
    2818:	7f 91       	pop	r23
    281a:	6f 91       	pop	r22
    281c:	5f 91       	pop	r21
    281e:	4f 91       	pop	r20
    2820:	3f 91       	pop	r19
    2822:	2f 91       	pop	r18
    2824:	0f 90       	pop	r0
    2826:	0f be       	out	0x3f, r0	; 63
    2828:	0f 90       	pop	r0
    282a:	1f 90       	pop	r1
    282c:	18 95       	reti

0000282e <__vector_19>:
ISR(TIMER0_COMP_vect)
{
    282e:	1f 92       	push	r1
    2830:	0f 92       	push	r0
    2832:	0f b6       	in	r0, 0x3f	; 63
    2834:	0f 92       	push	r0
    2836:	11 24       	eor	r1, r1
    2838:	2f 93       	push	r18
    283a:	3f 93       	push	r19
    283c:	4f 93       	push	r20
    283e:	5f 93       	push	r21
    2840:	6f 93       	push	r22
    2842:	7f 93       	push	r23
    2844:	8f 93       	push	r24
    2846:	9f 93       	push	r25
    2848:	af 93       	push	r26
    284a:	bf 93       	push	r27
    284c:	ef 93       	push	r30
    284e:	ff 93       	push	r31
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
	if(g_t_0_ctc_callBackPtr != NULL_PTR)
    2858:	80 91 13 01 	lds	r24, 0x0113
    285c:	90 91 14 01 	lds	r25, 0x0114
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	29 f0       	breq	.+10     	; 0x286e <__vector_19+0x40>
	{
		/* Call the Call Back function in the application
		 * after the timer reach the compare value
		 */
		(*g_t_0_ctc_callBackPtr)();
    2864:	e0 91 13 01 	lds	r30, 0x0113
    2868:	f0 91 14 01 	lds	r31, 0x0114
    286c:	09 95       	icall
		/* another method to call the function using pointer to function t_0_ctc_callBackPtr(); */
	}
}
    286e:	cf 91       	pop	r28
    2870:	df 91       	pop	r29
    2872:	ff 91       	pop	r31
    2874:	ef 91       	pop	r30
    2876:	bf 91       	pop	r27
    2878:	af 91       	pop	r26
    287a:	9f 91       	pop	r25
    287c:	8f 91       	pop	r24
    287e:	7f 91       	pop	r23
    2880:	6f 91       	pop	r22
    2882:	5f 91       	pop	r21
    2884:	4f 91       	pop	r20
    2886:	3f 91       	pop	r19
    2888:	2f 91       	pop	r18
    288a:	0f 90       	pop	r0
    288c:	0f be       	out	0x3f, r0	; 63
    288e:	0f 90       	pop	r0
    2890:	1f 90       	pop	r1
    2892:	18 95       	reti

00002894 <UART_init>:
 * 2. Set the required stop bits
 * 3. Set the required number of bits
 * 4. Set the required baudrate
 */
void UART_init(Uart_ConfigType * config)
{
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	00 d0       	rcall	.+0      	; 0x289a <UART_init+0x6>
    289a:	00 d0       	rcall	.+0      	; 0x289c <UART_init+0x8>
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	9c 83       	std	Y+4, r25	; 0x04
    28a2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    28a4:	1a 82       	std	Y+2, r1	; 0x02
    28a6:	19 82       	std	Y+1, r1	; 0x01
	/*U2X=1 for double speed*/
	UCSRA=(1<<U2X);
    28a8:	eb e2       	ldi	r30, 0x2B	; 43
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	82 e0       	ldi	r24, 0x02	; 2
    28ae:	80 83       	st	Z, r24
	 * TXEN=1 transmit enable
	 * UDRIE=0 to Disable USART Data Register Empty Interrupt Enable
	 * RXB8 not used for 8-bit data mode
	 * TXB8 not used for 8-bit data mode
	 */
	UCSRB=(1<<RXEN)|(1<<TXEN);
    28b0:	ea e2       	ldi	r30, 0x2A	; 42
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	88 e1       	ldi	r24, 0x18	; 24
    28b6:	80 83       	st	Z, r24
	/*Setup UCSZ2 for the number of bits*/
	UCSRB=(UCSRB & 0xFB)|(config->bits & 0x04);
    28b8:	aa e2       	ldi	r26, 0x2A	; 42
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	ea e2       	ldi	r30, 0x2A	; 42
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	98 2f       	mov	r25, r24
    28c4:	9b 7f       	andi	r25, 0xFB	; 251
    28c6:	eb 81       	ldd	r30, Y+3	; 0x03
    28c8:	fc 81       	ldd	r31, Y+4	; 0x04
    28ca:	80 81       	ld	r24, Z
    28cc:	84 70       	andi	r24, 0x04	; 4
    28ce:	89 2b       	or	r24, r25
    28d0:	8c 93       	st	X, r24
	 * Configuring the UCSRC register:
	 * URSEL=1 to enable writing in the UCSRC register
	 * UMSEL=0 for asynchronous mode
	 * UCPOL not used for asynchronous mode
	 */
	UCSRC=(1<<URSEL);
    28d2:	e0 e4       	ldi	r30, 0x40	; 64
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 e8       	ldi	r24, 0x80	; 128
    28d8:	80 83       	st	Z, r24
	/*Setup the parity bits : UPM1 & UPM0 bits*/
	UCSRC=(UCSRC & 0xCF)|((config->parity & 0x03)<<4);
    28da:	a0 e4       	ldi	r26, 0x40	; 64
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	e0 e4       	ldi	r30, 0x40	; 64
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	28 2f       	mov	r18, r24
    28e6:	2f 7c       	andi	r18, 0xCF	; 207
    28e8:	eb 81       	ldd	r30, Y+3	; 0x03
    28ea:	fc 81       	ldd	r31, Y+4	; 0x04
    28ec:	81 81       	ldd	r24, Z+1	; 0x01
    28ee:	88 2f       	mov	r24, r24
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	83 70       	andi	r24, 0x03	; 3
    28f4:	90 70       	andi	r25, 0x00	; 0
    28f6:	82 95       	swap	r24
    28f8:	92 95       	swap	r25
    28fa:	90 7f       	andi	r25, 0xF0	; 240
    28fc:	98 27       	eor	r25, r24
    28fe:	80 7f       	andi	r24, 0xF0	; 240
    2900:	98 27       	eor	r25, r24
    2902:	82 2b       	or	r24, r18
    2904:	8c 93       	st	X, r24
	/*Setup the number of stop-bits : USBS bit*/
	UCSRC=(UCSRC & 0xF7)|((config->stop & 0x01)<<3);
    2906:	a0 e4       	ldi	r26, 0x40	; 64
    2908:	b0 e0       	ldi	r27, 0x00	; 0
    290a:	e0 e4       	ldi	r30, 0x40	; 64
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	28 2f       	mov	r18, r24
    2912:	27 7f       	andi	r18, 0xF7	; 247
    2914:	eb 81       	ldd	r30, Y+3	; 0x03
    2916:	fc 81       	ldd	r31, Y+4	; 0x04
    2918:	82 81       	ldd	r24, Z+2	; 0x02
    291a:	88 2f       	mov	r24, r24
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	81 70       	andi	r24, 0x01	; 1
    2920:	90 70       	andi	r25, 0x00	; 0
    2922:	88 0f       	add	r24, r24
    2924:	99 1f       	adc	r25, r25
    2926:	88 0f       	add	r24, r24
    2928:	99 1f       	adc	r25, r25
    292a:	88 0f       	add	r24, r24
    292c:	99 1f       	adc	r25, r25
    292e:	82 2b       	or	r24, r18
    2930:	8c 93       	st	X, r24
	/*Setup the number of bits : UCSZ1 & UCSZ0 bits*/
	UCSRC=(UCSRC & 0xF9)|((config->bits & 0x03)<<1);
    2932:	a0 e4       	ldi	r26, 0x40	; 64
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	e0 e4       	ldi	r30, 0x40	; 64
    2938:	f0 e0       	ldi	r31, 0x00	; 0
    293a:	80 81       	ld	r24, Z
    293c:	28 2f       	mov	r18, r24
    293e:	29 7f       	andi	r18, 0xF9	; 249
    2940:	eb 81       	ldd	r30, Y+3	; 0x03
    2942:	fc 81       	ldd	r31, Y+4	; 0x04
    2944:	80 81       	ld	r24, Z
    2946:	88 2f       	mov	r24, r24
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	83 70       	andi	r24, 0x03	; 3
    294c:	90 70       	andi	r25, 0x00	; 0
    294e:	88 0f       	add	r24, r24
    2950:	99 1f       	adc	r25, r25
    2952:	82 2b       	or	r24, r18
    2954:	8c 93       	st	X, r24

	/*Calculating the UBRR register value*/
	ubrr_value = (uint16)(((F_CPU / (config->BaudRate * 8UL))) - 1);
    2956:	eb 81       	ldd	r30, Y+3	; 0x03
    2958:	fc 81       	ldd	r31, Y+4	; 0x04
    295a:	83 81       	ldd	r24, Z+3	; 0x03
    295c:	94 81       	ldd	r25, Z+4	; 0x04
    295e:	a5 81       	ldd	r26, Z+5	; 0x05
    2960:	b6 81       	ldd	r27, Z+6	; 0x06
    2962:	88 0f       	add	r24, r24
    2964:	99 1f       	adc	r25, r25
    2966:	aa 1f       	adc	r26, r26
    2968:	bb 1f       	adc	r27, r27
    296a:	88 0f       	add	r24, r24
    296c:	99 1f       	adc	r25, r25
    296e:	aa 1f       	adc	r26, r26
    2970:	bb 1f       	adc	r27, r27
    2972:	88 0f       	add	r24, r24
    2974:	99 1f       	adc	r25, r25
    2976:	aa 1f       	adc	r26, r26
    2978:	bb 1f       	adc	r27, r27
    297a:	9c 01       	movw	r18, r24
    297c:	ad 01       	movw	r20, r26
    297e:	80 e4       	ldi	r24, 0x40	; 64
    2980:	92 e4       	ldi	r25, 0x42	; 66
    2982:	af e0       	ldi	r26, 0x0F	; 15
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	bc 01       	movw	r22, r24
    2988:	cd 01       	movw	r24, r26
    298a:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodsi4>
    298e:	da 01       	movw	r26, r20
    2990:	c9 01       	movw	r24, r18
    2992:	01 97       	sbiw	r24, 0x01	; 1
    2994:	9a 83       	std	Y+2, r25	; 0x02
    2996:	89 83       	std	Y+1, r24	; 0x01

	UBRRH=ubrr_value>>8;
    2998:	e0 e4       	ldi	r30, 0x40	; 64
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	89 81       	ldd	r24, Y+1	; 0x01
    299e:	9a 81       	ldd	r25, Y+2	; 0x02
    29a0:	89 2f       	mov	r24, r25
    29a2:	99 27       	eor	r25, r25
    29a4:	80 83       	st	Z, r24
	UBRRL=ubrr_value;
    29a6:	e9 e2       	ldi	r30, 0x29	; 41
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	80 83       	st	Z, r24
}
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	cf 91       	pop	r28
    29b8:	df 91       	pop	r29
    29ba:	08 95       	ret

000029bc <UART_sendByte>:
/*Function responsible for sending the given data*/
void UART_sendByte(uint8 data)
{
    29bc:	df 93       	push	r29
    29be:	cf 93       	push	r28
    29c0:	0f 92       	push	r0
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	89 83       	std	Y+1, r24	; 0x01
	UDR=data;
    29c8:	ec e2       	ldi	r30, 0x2C	; 44
    29ca:	f0 e0       	ldi	r31, 0x00	; 0
    29cc:	89 81       	ldd	r24, Y+1	; 0x01
    29ce:	80 83       	st	Z, r24
	while(BIT_IS_CLEAR(UCSRA,TXC));
    29d0:	eb e2       	ldi	r30, 0x2B	; 43
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	88 2f       	mov	r24, r24
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	80 74       	andi	r24, 0x40	; 64
    29dc:	90 70       	andi	r25, 0x00	; 0
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	b9 f3       	breq	.-18     	; 0x29d0 <UART_sendByte+0x14>
	SET_BIT(UCSRA,TXC);
    29e2:	ab e2       	ldi	r26, 0x2B	; 43
    29e4:	b0 e0       	ldi	r27, 0x00	; 0
    29e6:	eb e2       	ldi	r30, 0x2B	; 43
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	80 81       	ld	r24, Z
    29ec:	80 64       	ori	r24, 0x40	; 64
    29ee:	8c 93       	st	X, r24
}
    29f0:	0f 90       	pop	r0
    29f2:	cf 91       	pop	r28
    29f4:	df 91       	pop	r29
    29f6:	08 95       	ret

000029f8 <UART_receiveByte>:

/*Function responsible for receiving the data*/
uint8 UART_receiveByte(void)
{
    29f8:	df 93       	push	r29
    29fa:	cf 93       	push	r28
    29fc:	cd b7       	in	r28, 0x3d	; 61
    29fe:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
    2a00:	eb e2       	ldi	r30, 0x2B	; 43
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	80 81       	ld	r24, Z
    2a06:	88 23       	and	r24, r24
    2a08:	dc f7       	brge	.-10     	; 0x2a00 <UART_receiveByte+0x8>
	return UDR;
    2a0a:	ec e2       	ldi	r30, 0x2C	; 44
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
}
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	08 95       	ret

00002a16 <UART_sendString>:


/*Function responsible for sending a string*/
void UART_sendString(uint8 *str)
{
    2a16:	df 93       	push	r29
    2a18:	cf 93       	push	r28
    2a1a:	00 d0       	rcall	.+0      	; 0x2a1c <UART_sendString+0x6>
    2a1c:	0f 92       	push	r0
    2a1e:	cd b7       	in	r28, 0x3d	; 61
    2a20:	de b7       	in	r29, 0x3e	; 62
    2a22:	9b 83       	std	Y+3, r25	; 0x03
    2a24:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2a26:	19 82       	std	Y+1, r1	; 0x01
    2a28:	0e c0       	rjmp	.+28     	; 0x2a46 <UART_sendString+0x30>
	while(str[i]!='\0')
	{
		UART_sendByte(str[i]);
    2a2a:	89 81       	ldd	r24, Y+1	; 0x01
    2a2c:	28 2f       	mov	r18, r24
    2a2e:	30 e0       	ldi	r19, 0x00	; 0
    2a30:	8a 81       	ldd	r24, Y+2	; 0x02
    2a32:	9b 81       	ldd	r25, Y+3	; 0x03
    2a34:	fc 01       	movw	r30, r24
    2a36:	e2 0f       	add	r30, r18
    2a38:	f3 1f       	adc	r31, r19
    2a3a:	80 81       	ld	r24, Z
    2a3c:	0e 94 de 14 	call	0x29bc	; 0x29bc <UART_sendByte>
		i++;
    2a40:	89 81       	ldd	r24, Y+1	; 0x01
    2a42:	8f 5f       	subi	r24, 0xFF	; 255
    2a44:	89 83       	std	Y+1, r24	; 0x01

/*Function responsible for sending a string*/
void UART_sendString(uint8 *str)
{
	uint8 i=0;
	while(str[i]!='\0')
    2a46:	89 81       	ldd	r24, Y+1	; 0x01
    2a48:	28 2f       	mov	r18, r24
    2a4a:	30 e0       	ldi	r19, 0x00	; 0
    2a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a50:	fc 01       	movw	r30, r24
    2a52:	e2 0f       	add	r30, r18
    2a54:	f3 1f       	adc	r31, r19
    2a56:	80 81       	ld	r24, Z
    2a58:	88 23       	and	r24, r24
    2a5a:	39 f7       	brne	.-50     	; 0x2a2a <UART_sendString+0x14>
	{
		UART_sendByte(str[i]);
		i++;
	}
}
    2a5c:	0f 90       	pop	r0
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	cf 91       	pop	r28
    2a64:	df 91       	pop	r29
    2a66:	08 95       	ret

00002a68 <UART_receiveString>:

/*Function responsible for receiving a string*/
void UART_receiveString(uint8 *str)
{
    2a68:	0f 93       	push	r16
    2a6a:	1f 93       	push	r17
    2a6c:	df 93       	push	r29
    2a6e:	cf 93       	push	r28
    2a70:	00 d0       	rcall	.+0      	; 0x2a72 <UART_receiveString+0xa>
    2a72:	0f 92       	push	r0
    2a74:	cd b7       	in	r28, 0x3d	; 61
    2a76:	de b7       	in	r29, 0x3e	; 62
    2a78:	9b 83       	std	Y+3, r25	; 0x03
    2a7a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    2a7c:	19 82       	std	Y+1, r1	; 0x01
	/*Receive the first byte*/
	str[i]=UART_receiveByte();
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	28 2f       	mov	r18, r24
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	8a 81       	ldd	r24, Y+2	; 0x02
    2a86:	9b 81       	ldd	r25, Y+3	; 0x03
    2a88:	8c 01       	movw	r16, r24
    2a8a:	02 0f       	add	r16, r18
    2a8c:	13 1f       	adc	r17, r19
    2a8e:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    2a92:	f8 01       	movw	r30, r16
    2a94:	80 83       	st	Z, r24
    2a96:	0f c0       	rjmp	.+30     	; 0x2ab6 <UART_receiveString+0x4e>
	while(str[i]!='#')
	{
		i++;
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	8f 5f       	subi	r24, 0xFF	; 255
    2a9c:	89 83       	std	Y+1, r24	; 0x01
		str[i]=UART_receiveByte();
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	28 2f       	mov	r18, r24
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2aa6:	9b 81       	ldd	r25, Y+3	; 0x03
    2aa8:	8c 01       	movw	r16, r24
    2aaa:	02 0f       	add	r16, r18
    2aac:	13 1f       	adc	r17, r19
    2aae:	0e 94 fc 14 	call	0x29f8	; 0x29f8 <UART_receiveByte>
    2ab2:	f8 01       	movw	r30, r16
    2ab4:	80 83       	st	Z, r24
void UART_receiveString(uint8 *str)
{
	uint8 i=0;
	/*Receive the first byte*/
	str[i]=UART_receiveByte();
	while(str[i]!='#')
    2ab6:	89 81       	ldd	r24, Y+1	; 0x01
    2ab8:	28 2f       	mov	r18, r24
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	8a 81       	ldd	r24, Y+2	; 0x02
    2abe:	9b 81       	ldd	r25, Y+3	; 0x03
    2ac0:	fc 01       	movw	r30, r24
    2ac2:	e2 0f       	add	r30, r18
    2ac4:	f3 1f       	adc	r31, r19
    2ac6:	80 81       	ld	r24, Z
    2ac8:	83 32       	cpi	r24, 0x23	; 35
    2aca:	31 f7       	brne	.-52     	; 0x2a98 <UART_receiveString+0x30>
	{
		i++;
		str[i]=UART_receiveByte();
	}
	str[i]='\0';
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	28 2f       	mov	r18, r24
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	e2 0f       	add	r30, r18
    2ada:	f3 1f       	adc	r31, r19
    2adc:	10 82       	st	Z, r1
}
    2ade:	0f 90       	pop	r0
    2ae0:	0f 90       	pop	r0
    2ae2:	0f 90       	pop	r0
    2ae4:	cf 91       	pop	r28
    2ae6:	df 91       	pop	r29
    2ae8:	1f 91       	pop	r17
    2aea:	0f 91       	pop	r16
    2aec:	08 95       	ret

00002aee <__udivmodsi4>:
    2aee:	a1 e2       	ldi	r26, 0x21	; 33
    2af0:	1a 2e       	mov	r1, r26
    2af2:	aa 1b       	sub	r26, r26
    2af4:	bb 1b       	sub	r27, r27
    2af6:	fd 01       	movw	r30, r26
    2af8:	0d c0       	rjmp	.+26     	; 0x2b14 <__udivmodsi4_ep>

00002afa <__udivmodsi4_loop>:
    2afa:	aa 1f       	adc	r26, r26
    2afc:	bb 1f       	adc	r27, r27
    2afe:	ee 1f       	adc	r30, r30
    2b00:	ff 1f       	adc	r31, r31
    2b02:	a2 17       	cp	r26, r18
    2b04:	b3 07       	cpc	r27, r19
    2b06:	e4 07       	cpc	r30, r20
    2b08:	f5 07       	cpc	r31, r21
    2b0a:	20 f0       	brcs	.+8      	; 0x2b14 <__udivmodsi4_ep>
    2b0c:	a2 1b       	sub	r26, r18
    2b0e:	b3 0b       	sbc	r27, r19
    2b10:	e4 0b       	sbc	r30, r20
    2b12:	f5 0b       	sbc	r31, r21

00002b14 <__udivmodsi4_ep>:
    2b14:	66 1f       	adc	r22, r22
    2b16:	77 1f       	adc	r23, r23
    2b18:	88 1f       	adc	r24, r24
    2b1a:	99 1f       	adc	r25, r25
    2b1c:	1a 94       	dec	r1
    2b1e:	69 f7       	brne	.-38     	; 0x2afa <__udivmodsi4_loop>
    2b20:	60 95       	com	r22
    2b22:	70 95       	com	r23
    2b24:	80 95       	com	r24
    2b26:	90 95       	com	r25
    2b28:	9b 01       	movw	r18, r22
    2b2a:	ac 01       	movw	r20, r24
    2b2c:	bd 01       	movw	r22, r26
    2b2e:	cf 01       	movw	r24, r30
    2b30:	08 95       	ret

00002b32 <__prologue_saves__>:
    2b32:	2f 92       	push	r2
    2b34:	3f 92       	push	r3
    2b36:	4f 92       	push	r4
    2b38:	5f 92       	push	r5
    2b3a:	6f 92       	push	r6
    2b3c:	7f 92       	push	r7
    2b3e:	8f 92       	push	r8
    2b40:	9f 92       	push	r9
    2b42:	af 92       	push	r10
    2b44:	bf 92       	push	r11
    2b46:	cf 92       	push	r12
    2b48:	df 92       	push	r13
    2b4a:	ef 92       	push	r14
    2b4c:	ff 92       	push	r15
    2b4e:	0f 93       	push	r16
    2b50:	1f 93       	push	r17
    2b52:	cf 93       	push	r28
    2b54:	df 93       	push	r29
    2b56:	cd b7       	in	r28, 0x3d	; 61
    2b58:	de b7       	in	r29, 0x3e	; 62
    2b5a:	ca 1b       	sub	r28, r26
    2b5c:	db 0b       	sbc	r29, r27
    2b5e:	0f b6       	in	r0, 0x3f	; 63
    2b60:	f8 94       	cli
    2b62:	de bf       	out	0x3e, r29	; 62
    2b64:	0f be       	out	0x3f, r0	; 63
    2b66:	cd bf       	out	0x3d, r28	; 61
    2b68:	09 94       	ijmp

00002b6a <__epilogue_restores__>:
    2b6a:	2a 88       	ldd	r2, Y+18	; 0x12
    2b6c:	39 88       	ldd	r3, Y+17	; 0x11
    2b6e:	48 88       	ldd	r4, Y+16	; 0x10
    2b70:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b72:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b74:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b76:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b78:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b7a:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b7c:	b9 84       	ldd	r11, Y+9	; 0x09
    2b7e:	c8 84       	ldd	r12, Y+8	; 0x08
    2b80:	df 80       	ldd	r13, Y+7	; 0x07
    2b82:	ee 80       	ldd	r14, Y+6	; 0x06
    2b84:	fd 80       	ldd	r15, Y+5	; 0x05
    2b86:	0c 81       	ldd	r16, Y+4	; 0x04
    2b88:	1b 81       	ldd	r17, Y+3	; 0x03
    2b8a:	aa 81       	ldd	r26, Y+2	; 0x02
    2b8c:	b9 81       	ldd	r27, Y+1	; 0x01
    2b8e:	ce 0f       	add	r28, r30
    2b90:	d1 1d       	adc	r29, r1
    2b92:	0f b6       	in	r0, 0x3f	; 63
    2b94:	f8 94       	cli
    2b96:	de bf       	out	0x3e, r29	; 62
    2b98:	0f be       	out	0x3f, r0	; 63
    2b9a:	cd bf       	out	0x3d, r28	; 61
    2b9c:	ed 01       	movw	r28, r26
    2b9e:	08 95       	ret

00002ba0 <itoa>:
    2ba0:	fb 01       	movw	r30, r22
    2ba2:	9f 01       	movw	r18, r30
    2ba4:	e8 94       	clt
    2ba6:	42 30       	cpi	r20, 0x02	; 2
    2ba8:	c4 f0       	brlt	.+48     	; 0x2bda <itoa+0x3a>
    2baa:	45 32       	cpi	r20, 0x25	; 37
    2bac:	b4 f4       	brge	.+44     	; 0x2bda <itoa+0x3a>
    2bae:	4a 30       	cpi	r20, 0x0A	; 10
    2bb0:	29 f4       	brne	.+10     	; 0x2bbc <itoa+0x1c>
    2bb2:	97 fb       	bst	r25, 7
    2bb4:	1e f4       	brtc	.+6      	; 0x2bbc <itoa+0x1c>
    2bb6:	90 95       	com	r25
    2bb8:	81 95       	neg	r24
    2bba:	9f 4f       	sbci	r25, 0xFF	; 255
    2bbc:	64 2f       	mov	r22, r20
    2bbe:	77 27       	eor	r23, r23
    2bc0:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__udivmodhi4>
    2bc4:	80 5d       	subi	r24, 0xD0	; 208
    2bc6:	8a 33       	cpi	r24, 0x3A	; 58
    2bc8:	0c f0       	brlt	.+2      	; 0x2bcc <itoa+0x2c>
    2bca:	89 5d       	subi	r24, 0xD9	; 217
    2bcc:	81 93       	st	Z+, r24
    2bce:	cb 01       	movw	r24, r22
    2bd0:	00 97       	sbiw	r24, 0x00	; 0
    2bd2:	a1 f7       	brne	.-24     	; 0x2bbc <itoa+0x1c>
    2bd4:	16 f4       	brtc	.+4      	; 0x2bda <itoa+0x3a>
    2bd6:	5d e2       	ldi	r21, 0x2D	; 45
    2bd8:	51 93       	st	Z+, r21
    2bda:	10 82       	st	Z, r1
    2bdc:	c9 01       	movw	r24, r18
    2bde:	0c 94 f1 15 	jmp	0x2be2	; 0x2be2 <strrev>

00002be2 <strrev>:
    2be2:	dc 01       	movw	r26, r24
    2be4:	fc 01       	movw	r30, r24
    2be6:	67 2f       	mov	r22, r23
    2be8:	71 91       	ld	r23, Z+
    2bea:	77 23       	and	r23, r23
    2bec:	e1 f7       	brne	.-8      	; 0x2be6 <strrev+0x4>
    2bee:	32 97       	sbiw	r30, 0x02	; 2
    2bf0:	04 c0       	rjmp	.+8      	; 0x2bfa <strrev+0x18>
    2bf2:	7c 91       	ld	r23, X
    2bf4:	6d 93       	st	X+, r22
    2bf6:	70 83       	st	Z, r23
    2bf8:	62 91       	ld	r22, -Z
    2bfa:	ae 17       	cp	r26, r30
    2bfc:	bf 07       	cpc	r27, r31
    2bfe:	c8 f3       	brcs	.-14     	; 0x2bf2 <strrev+0x10>
    2c00:	08 95       	ret

00002c02 <__udivmodhi4>:
    2c02:	aa 1b       	sub	r26, r26
    2c04:	bb 1b       	sub	r27, r27
    2c06:	51 e1       	ldi	r21, 0x11	; 17
    2c08:	07 c0       	rjmp	.+14     	; 0x2c18 <__udivmodhi4_ep>

00002c0a <__udivmodhi4_loop>:
    2c0a:	aa 1f       	adc	r26, r26
    2c0c:	bb 1f       	adc	r27, r27
    2c0e:	a6 17       	cp	r26, r22
    2c10:	b7 07       	cpc	r27, r23
    2c12:	10 f0       	brcs	.+4      	; 0x2c18 <__udivmodhi4_ep>
    2c14:	a6 1b       	sub	r26, r22
    2c16:	b7 0b       	sbc	r27, r23

00002c18 <__udivmodhi4_ep>:
    2c18:	88 1f       	adc	r24, r24
    2c1a:	99 1f       	adc	r25, r25
    2c1c:	5a 95       	dec	r21
    2c1e:	a9 f7       	brne	.-22     	; 0x2c0a <__udivmodhi4_loop>
    2c20:	80 95       	com	r24
    2c22:	90 95       	com	r25
    2c24:	bc 01       	movw	r22, r24
    2c26:	cd 01       	movw	r24, r26
    2c28:	08 95       	ret

00002c2a <_exit>:
    2c2a:	f8 94       	cli

00002c2c <__stop_program>:
    2c2c:	ff cf       	rjmp	.-2      	; 0x2c2c <__stop_program>
